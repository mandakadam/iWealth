var ilang=ilang||{};
var iwebz=iwebz||{};
var ws=ws||{}
var javaObj={}
var irpt=irpt||{}
iwebz.round=c_round;
iwebz.det_data=iwebz.det_data||{};
var ifwk=ifwk||{}
var desc=desc||{}
var rep_dataset={}; //Added by Harshit - 06082014 - For Report Schedular
var cnt_move=1;
//iwebz.theme='xtheme-tp.css';
iwebz.globalDateFormat=iwebz.globalDateFormat||"dd-MM-yyyy";
iwebz.calDateFormat = iwebz.calDateFormat||{"dd-MM-yyyy":"d-m-Y"};
iwebz.LogMe=iwebz.LogMe||false;
iwebz.stylesheet=iwebz.stylesheet||"Framewrk/stylesheet/iwebz_style.css";
iwebz.favicon=iwebz.favicon||"favicon.ico";
iwebz.jquery_file=iwebz.jquery_file||"jquery-1.7.2.min.js";
iwebz.soft_delete=iwebz.soft_delete||true;
iwebz.isLog=iwebz.isLog||"false";
iwebz.local_country=iwebz.local_country||"INDIA";
iwebz.timeout_interval=iwebz.timeout_interval||'100000';
iwebz.def_decimal_point=iwebz.def_decimal_point||'2';
iwebz.msg_type=[["AL",""],["MAL","Mail"],["SMS","Sms"],["TWT","Tweet"],["FBK ","Facebook"]];
iwebz.msg_constraint=[["AL",""],["ASAP","As Soon as possible"],["SNET","Send no earlier than"],["MUSO","Must Send on"]];
iwebz.msg_status=[["AL",""],["UAU","Un Authorised"],["AUT","Authorised"],["CAN","Cancel"],["SNT","Sent"],["ERR","Error"]];
iwebz.round_conf=iwebz.round_conf||0;
iwebz.round_conf_qty=iwebz.round_conf_qty||0;
iwebz.lcy_curr_main=iwebz.lcy_curr_main||'INR';
iwebz.gcy_curr_main=iwebz.gcy_curr_main||'USD';
iwebz.chat_interval=iwebz.chat_interval||1000;
iwebz.paramtable=iwebz.paramtable||[["",""],["iwz_actionsdef","Actions Master"],["iwz_viewmaster","View Master"],["iwz_masters_config","Masters Config"],["iwz_childmasters_config","Child Masters Config"],["parameter","Parameter Table"],["cms_accounts","Account Types"],["groupmaster","Group Masters"],["currency_master","Currency Master"],["cms_bankmaster","Bank Account Master"],["banktypes","Bank Category Master"],["reutersmktfeed","Exchange Rates"],["fimmda_sector","Issuer Sector Master"],["mfobjective","MF Objective Master"],["reasonmaster","Reason Master"],["trindex","Index Values Master"],["holidays","Holiday Master"],["modelportfolio","Model Portfolio Master"],["modelport_details","Model Portfolio Details"],["product_master","Product Master"],["product_model_compo","Product Composition"],["custodian_account_master","Custodian Account Master"],["ac_voucherdefinition","Voucher Definition"],["ac_accountmaster","Chart of Accounts"],["portfolio_asset_costing","Assetclass Costing Policy"],["iwz_parameter","Framework Parameters"] ,["if_user_portfolio","Data Profiling Portfolio"],["if_user_assetclass","Data Profiling Asset Class"],["liquidity_matrix","Liquidity Matrix (All Asset Class)"],["liquidity_eq_matrix","Liquidity Matrix (EQ)"]];
iwebz.subview_name_not_allowed="NONE";
iwebz.prod_param_table=iwebz.prod_param_table||"parameter";
iwebz.navexpand=iwebz.navexpand||"true";
iwebz.accessrights=iwebz.accessrights||'n';
iwebz.copyAllRecordCount=iwebz.copyAllRecordCount||"10000";
iwebz.minpasswordlength=5;
iwebz.maxpasswordlength=20;
iwebz.CHQ_DET_MADATORY=iwebz.CHQ_DET_MADATORY||"true";
iwebz.LOAD_ALL_VIEW_GRID=(iwebz.LOAD_ALL_VIEW_GRID||"true").toLowerCase();
iwebz.jobUserid=iwebz.jobUserid||"jobadmin"
iwebz.MANUAL_JOB_TYPE=iwebz.MANUAL_JOB_TYPE||[["eod","EOD"],["bod","BOD"]];
iwebz.blacklistedfiles=["EXE","SH","PNG","JPG","LOG","SQL"];
iwebz.round_conf_qty=iwebz.round_conf_qty||0;
iwebz.def_decimal_point=iwebz.def_decimal_point||'2';
iwebz.round_conf=iwebz.round_conf||0;

var userObj={};
userObj.userid="";
userObj.profileid="";
userObj.sessionid="";
userObj.branchcode="";
//userObj.expirydays="";
//userObj.ctoken="";
userObj.roles=new Array();
sysObjName = "";
var params;
var branchcode = "";
var vParamData = null;
iwebz.PasswordParameters={
	matchpassworduserid:"true",
	passwordhistorycount:5,
	maxpasswordlength:14,
	bshouldalphanumeric:"true",
	allowsspecialchr:"false",
	bshouldcapitalize:"true",
	checkpasswordhistory:"true",
	limitlength:"true",
	expiry_days:30,
	minpasswordlength:8
}


function getUserID()
{	return userid;
}

function login()
{   
  txtuser = iwebz.getParameter("txtUser"); 
  txtPassword =iwebz.getParameter("txtPassword");
  if(txtuser == null || txtuser == "") return "false"; 
  session.setAttribute("loggedin","true");
  session.setAttribute("login",txtuser);  
  return "true";
 }

function logout()
{ session.setAttribute("loggedin","false");
  session.setAttribute("login","");  
  return request.getAttribute("loginHTML");  
}

function authenticate()
{
   var filedate=getServerDate().replace("-","_","\g").replace("/","_","\g").replace(" ","","\g"); 
   var sid = ""+iwebz.getParameter("sessionid");
 //var ctoken= ""+request.getParameter("ctoken");

	if ("".equalsIgnoreCase(sid) || "null".equalsIgnoreCase(sid)) 
  {
    var userId=iwebz.getParameter("txtUser");
    // appendFileText(serverPath+"/log/LogoutTrace_"+filedate+".txt","\n Authenticate User : "+userId);
    if(userId=="") 
    {
      // appendFileText(serverPath+"/log/LogoutTrace_"+filedate+".txt","\n User is blank.");
      return "false";
    }
//     org.owasp.esapi.ESAPI.authenticator().setCurrentUser(userId);
//     appendFileText(serverPath+"/log/esapi.txt","\n on loin set the current user ");                              
    var vSQL="SELECT sessionid,timeinterval-diff diff FROM (select sessionid,Round(To_Number((SYSDATE - LAST_ACCESSTIME) * 24 * 60)) as diff,decode((SELECT Count(*) FROM iwz_parameter WHERE paramname='timeout_interval'),0,60,(SELECT paramvalue FROM iwz_parameter WHERE paramname='timeout_interval')) timeinterval from iwz_user_master where user_id='"+_encode(userId)+"')"
// 	appendFileText(serverPath+"/log/LoginTrace.txt","\n  Not logged in Diff query "+vSQL);
  var resultSet1 = SQLResultset(vSQL);
       		  
  if(resultSet1.recordcount==0)
  {
    //appendFileText(serverPath+"/LoginTrace.txt","\n  no Records from diff Returned false.");
	   return "false";
	//appendFileText(serverPath+"/log/sesssionLog.txt","\n SessionID1 session :"+resultSet1.fieldbyname("sessionid"));	   
	}
	//appendFileText(serverPath+"/LoginTrace.txt","\n  Checking already logged in some where");
    if (resultSet1.fieldbyname("sessionid")=="" || resultSet1.fieldbyname("sessionid")==null)
    {
      // appendFileText(serverPath+"/log/LogoutTrace_"+filedate+".txt","\n User '"+userId+"' : session id isnull... means user is not logged in any where ");
 	    vSQL="update iwz_user_master set last_accesstime=sysdate where user_id='"+_encode(userId)+"'";
		 		  res=execSQL(vSQL);
		 		  	return "false";
   }
 	
 	//// appendFileText(serverPath+"/LoginTrace.txt","\n  Checking Timeout");
    if(resultSet1.fieldbyname("diff")<=0)	
    {
      // appendFileText(serverPath+"/log/LogoutTrace_"+filedate+".txt","\n User '"+userId+"' :Last access time diff is greater than timeout interval");
  //appendFileText(serverPath+"/LoginTrace.txt","\n  Last access time diff is greater than timeout interval");
  vSQL="update iwz_user_master set sessionid='',LAST_LOGIN_TIME='',LAST_ACCESSTIME=sysdate,login_flag='N',LASTLOGINIP='' where user_id='"+_encode(userId)+"'";
  res=execSQL(vSQL);
  //// appendFileText(serverPath+"/LoginTrace.txt","\n  Returning False");
  return "false";	
  }	  
 	//appendFileText(serverPath+"/LoginTrace.txt","\n  No conditions occured Returning False");		
  return "false"
  }
  
  var vSQL="SELECT (timeinterval-diff) timediff ,u.* FROM (select Round(To_Number((SYSDATE - LAST_ACCESSTIME) * 24 * 60)) as diff,decode((SELECT Count(*) FROM iwz_parameter WHERE paramname='timeout_interval'),0,60,(SELECT paramvalue FROM iwz_parameter WHERE paramname='timeout_interval')) timeinterval,u.USER_ID,u. USER_NAME,u. BRANCH_CODE,u. PROFILE_ID,u. USER_SHORT_CODE,u. SESSIONID,u. LOCATION,u. COUNTER,u. REPORTS_TO,u. ENTITY_CODE,u.isadmin from iwz_user_master u where sessionid ='"+ _encode(sid) +"' and active='Y') u"
  //appendFileText(serverPath+"/log/LoginTrace.txt","\n  time out qry"+vSQL);
  var adataset = SQLResultset(vSQL);
  if(adataset.recordcount ==0)
  {
    // appendFileText(serverPath+"/log/LogoutTrace_"+filedate+".txt","\n No records in User Time Out.Sessionid="+sid+" Encode Session="+_encode(sid)+" ");
    return "false";
  } 
  if(adataset.fieldbyname("timediff")<=0)
  {
	 //appendFileText(serverPath+"/log/LoginTrace.txt","\n its timeout");  
    // appendFileText(serverPath+"/log/LogoutTrace_"+filedate+".txt","\n User Time Out.Time Diff="+adataset.fieldbyname('timediff')+" Sessionid="+sid+" Encode Session="+_encode(sid)+" ");
    var vSql="update iwz_user_master set sessionid='',LAST_LOGIN_TIME='',LAST_ACCESSTIME=sysdate,login_flag='N',LASTLOGINIP='' where sessionid="+_encode(sid)+"";
    res=execSQL(vSql);
  	return "false";
  }
  	
  for(var i = 0 ; i < adataset.fields.length ;  i++)
  {
  	userObj[adataset.fields[i]]=adataset.fieldbyname(adataset.fields[i]);			
  }
	
	userObj.profileid =adataset.fieldbyname("profile_id");
  userObj.userid=  adataset.fieldbyname("user_id");
  userObj.branchcode=adataset.fieldbyname("branch_code");
  //userObj.ctoken=""+session.getAttribute("ctoken");
//  appendFileText(serverPath+"/log/esapi.txt","\n .ctoken: "+session.getAttribute("ctoken"));
  var vRoleSQL="SELECT um.roleid ,rm.visibility,rm.rolename FROM iwz_user_role_master um,iwz_role_master rm WHERE user_id='"+_encode(userObj.userid)+"' AND  um.roleid=rm.roleid"
  vRoleSQL=SQLResultset(vRoleSQL);
  for(var k = 0 ; k < vRoleSQL.recordcount; k++)
  {
  vRoleSQL.recordno = k;
    userObj['roles'][userObj['roles'].length]={role:vRoleSQL.fieldbyname('roleid'),rolename:vRoleSQL.fieldbyname('rolename'),visibility:vRoleSQL.fieldbyname('visibility')};
  }
  adataset =null;
  
 	var vSql="update iwz_user_master set last_accesstime=sysdate where sessionid='"+_encode(sid)+"'";
 	var res=execSQL(vSql); 
	return "true";
}

function checkaccess(vsysObject, vobjType)
{ 
	if(userObj.isadmin=='Y'){
		RecordMessage(userObj.userid,"Manuplating Database",vsysObject);
		return true;
	}
	var vSQL = "Select accrights from iwz_accessrights where roleid in (select roleid from iwz_user_role_master where user_id = '"+_encode(userObj.userid)+"') and sysobjtype ='" + _encode(vobjType) +"' and sysobjname ='" +_encode(vsysObject)+"' AND ACCRIGHTS = 'y'";
	// appendFileText(serverPath+"/log/LoginTrace.txt","\n vSQL CHECKACCESS "+vSQL);
	var adataset = SQLResultset(vSQL);
  if (adataset.recordcount==0)return false;
	if("y".equalsIgnoreCase(adataset.fieldbyname("accrights"))){
		RecordMessage(userObj.userid,"Manuplating Database",vsysObject);
		return true;
	}
	return false;
}


function RecordMessageExt()
{
  var view=iwebz.getParameter('view')
  RecordMessage(userObj.user_id,'System Access',view);
  return "";
}
function RecordMessage(vUserid,vMsgType,vMsg)
{
	var vSql = "insert into iwz_messagelog values(sysdate,'" + _encode(vUserid) + "','" + _encode(vMsgType) + "','" + _encode(vMsg) + "')";

	var resultStr = execSQL(vSql);
	return resultStr;
}

function evalExpressions(aStr)
{ 
  regExp = new RegExp("{([^}]*)}","gi");
  var result = aStr.match(regExp);
  var expression="";
  var exprStr="";
  if (result==null) return aStr;
  for (idx=0;idx<result.length;idx++)
  {
    exprStr =result[idx];
    expression =exprStr.replace("{","").replace("}","");
    try
    { 
      replaceStr = eval(expression);
    }
    catch (e)
    { 
	    LogError(e);
      replaceStr = 'Error evaluating expression : '+ expression + '-'+e;
    }
    aStr = aStr.replace(exprStr,replaceStr);
  }
  return aStr;
}

function parseCurlyBrackets(aStr)
{ 
  regExp = new RegExp("{{([^}]*)}}","gi");
  var result = aStr.match(regExp);
  var expression="";
  var exprStr="";
  if (result==null) return aStr;
  for (idx=0;idx<result.length;idx++)
  {
    exprStr =result[idx];
    expression =exprStr.replace("{","").replace("}","");
    try
    { 
      replaceStr = eval(expression);
    }
    catch (e)
    { 
	    LogError(e);
      replaceStr = 'Error evaluating expression : '+ expression + '-'+e;
    }
    aStr = aStr.replace(exprStr,replaceStr);
  }
  return aStr;
}

function getFileText(filename)
{ 
	return FileObj.getFileText(filename);
}

function getFileTextNew(filename)
{
	var f = null;
	var data=null;
	var dis =null;
     try{
      try{
 			f = new java.io.File(filename);
 		}
 		catch (e)
 			{return "hi "+e }
 		}

 		finally
 		{
 }
 return new String(data);
}

//vikas for appending text to a file. 01-06-2007 6.00 pm

function createFileText(aFilePath,aText)
{
	try 
	{                         
		var logoutfile = new java.io.BufferedWriter(new java.io.FileWriter(aFilePath, false));
		logoutfile.write(aText);
	}
	catch(e)
	{//return
	LogError(e);
	}
	finally
	{
		logoutfile.close(); 
	}	
}


function appendFileText(aFilePath,aText,vFlag)
{
	try 
	{
		if(vFlag==null || vFlag==null)
			vFlag=true;
		else vFlag=false;	
		//added my mukesh on 06-12-2013 to create folder if it does not exists-start
		var filepath_index=aFilePath.lastIndexOf("/")
		var temp_filepath=aFilePath.substring(0,filepath_index)
		
		var objMkFolder = new java.io.File(temp_filepath);
		if(!objMkFolder.isDirectory())
  			objMkFolder.mkdirs();    
  		//added my mukesh on 06-12-2013 to create folder if it does not exists-end
  		
		var logoutfile = new java.io.BufferedWriter(new java.io.FileWriter(aFilePath, vFlag));
		logoutfile.write(aText);
	}
	catch(e)
	{//return
	LogError(e);
	}
	finally
	{
    if(logoutfile!=null)
		logoutfile.close(); 
	}	
}

function getServerDate()                                         
{  return formatDate(new java.util.Date(),iwebz.globalDateFormat);
}
function _getFirstDayMonth()                                         
{  
    var cal = java.util.Calendar.getInstance();  
    cal.setTime(java.util.Date());  
    cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
    return formatDate(cal.getTime(),iwebz.globalDateFormat);  
}

function _getLastDayMonth()                                         
{  
    var cal = java.util.Calendar.getInstance();  
    cal.setTime(java.util.Date());  
    cal.set(java.util.Calendar.DAY_OF_MONTH, cal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH));
    return formatDate(cal.getTime(),iwebz.globalDateFormat);  
}

/**
 *@event      firstDatePrevMonth.
 *@desc       return first date of previous month 
 *@author     Mohini
 *@dated      26-06-2013 11:40:57 AM
 *@return     date
**/
function firstDatePrevMonth()
{
  var cal = java.util.Calendar.getInstance();
  cal.add(java.util.Calendar.MONTH, -1);
  cal.set(java.util.Calendar.DATE, 1);
  return formatDate(cal.getTime(),iwebz.globalDateFormat);  
}

/**
 *@event      lastDatePrevMonth.
 *@desc       return last date of previous month 
 *@author     Mohini
 *@dated      26-06-2013 11:40:57 AM
 *@return     date
**/
function lastDatePrevMonth()
{
  var cal = java.util.Calendar.getInstance();
  cal.add(java.util.Calendar.MONTH, -1);
  cal.set(java.util.Calendar.DATE, cal.getActualMaximum(java.util.Calendar.DATE));
  return formatDate(cal.getTime(),iwebz.globalDateFormat);
}

/**
 *@event      firstDateOfLastWeek.
 *@desc       Get first date of last week
 *@author     Mohini
 *@dated      26-06-2013 12:18:59 PM
 *@return     date
**/
function firstDateOfLastWeek()
{
  var cal = java.util.Calendar.getInstance();
  cal.set(java.util.Calendar.DAY_OF_WEEK, 
  cal.getActualMinimum(java.util.Calendar.DAY_OF_WEEK));
  var fdate=formatDate(cal.getTime(),iwebz.globalDateFormat)
  return DateAdd("D",-7,fdate,iwebz.globalDateFormat)
}
/**
 *@event      lastDateOfLastWeek.
 *@desc       Get last date of last week
 *@author     Mohini
 *@dated      26-06-2013 12:28:09 PM
 *@return     date 
**/
function lastDateOfLastWeek()
{
  var cal = java.util.Calendar.getInstance();
  cal.set(java.util.Calendar.DAY_OF_WEEK, 
  cal.getActualMinimum(java.util.Calendar.DAY_OF_WEEK));
  var fdate=formatDate(cal.getTime(),iwebz.globalDateFormat)
  return DateAdd("D",-1,fdate,iwebz.globalDateFormat)
}

/**
 *@event      getPrevServerDate.
 *@desc       Get previous date
 *@author     Mohini
 *@dated      26-06-2013 12:36:06 PM
 *@return     date
 **/
function getPrevServerDate()
{
  var cal = java.util.Calendar.getInstance()
  cal.add(java.util.Calendar.DATE, -1);
  return formatDate(cal.getTime(),iwebz.globalDateFormat);
}


function getEssDate_format()
{ return formatDate(new java.util.Date(),"MMddyyyy");
}

function getServerDateTime()
{ return formatDate(new java.util.Date(),iwebz.globalDateFormat+" HH:mm:ss");
}

function getServerTime()
{ return formatDate(new java.util.Date(),"HH:mm:ss");
}

function getMiliseconds()
{ //return new java.util.Date().getTime().toString();
	var format =     new java.text.SimpleDateFormat("dd-MM-yyyy HH:mm:ss SSS");
	return format.format(new java.util.Date());
}

function getServerTimeStamp()
{ return formatDate(new java.util.Date(),"yyyy-MM-dd-HH-mm-ss");
}
function HasSpecialChars(strName)
{
	var strSpecials = /[!@#$%^&*()\-+=?]/;
	return strSpecials.test(strName);
}


function getClockTime()
{ 
  var hours,minutes,second;
  var calendar = java.util.Calendar.getInstance();
  calendar.setTime(java.util.Date());
  hours = calendar.get(java.util.Calendar.HOUR_OF_DAY);
  minutes = calendar.get(java.util.Calendar.MINUTE);
  second=calendar.get(java.util.Calendar.SECOND);
  return '{"hour":"'+hours+'","min":"'+minutes+'","second":"'+second+'"}';
}

function getParameter(parameter_name)
{
	var fetch_parameter_sql = "select paramvalue from iwz_parameter where paramname='"+_encode(parameter_name)+"'";
 //appendFileText(serverPath+"/log/mohini.txt","\n fetch_parameter_sql : "+fetch_parameter_sql);	
	var fetched_obj = SQLResultset(fetch_parameter_sql);
	if(fetched_obj.recordcount > 0)
	return fetched_obj.fieldbyname("paramvalue");
}

function gethbasepath()
{
	var BasePath= Server.jsp
	return BasePath;
}


/**
 *@name       makeAudit.
 *@desc       Function that posts the Audit entries
 *@author     vikas  
 *@dated      27-01-2009
 *@param      
              * vObj{Object} - Audit Object contianing following cfg options
                * @cfg
                    * tab - Tablename
                    * opr - Operation name -- [add/modify/delete]
                    * res - Audit reason to be set if any                    
                    * user - userid of the person who is performing the operation
                    * sqlwhr - where clause to be set to perform audit for
                    * issql - whether to return sql or to execute and return                                                                                                                 
 *@return     Return Data Desc
 **/
function makeAudit(vObj)
{
	var vSQL;
	vSQL = "select Count(*) total from user_objects where object_type = 'TABLE' AND Upper(object_name) = Upper('audit_"+vObj.tab+"') ";
	vSQL = SQLResultset( vSQL );
	if( vSQL.data[ vSQL.recordno ][ vSQL.total ] > 0)
	{
		if( !vObj.cols )
			vSQL = "insert into audit_"+vObj.tab+" select "+vObj.tab+".*,'"+vObj.res+"','" +vObj.user+"' ,sysdate,'"+vObj.opr+ "','1' from "+vObj.tab+" where "+vObj.sqlwhr;
		else
			vSQL = "insert into audit_"+vObj.tab+"("+vObj.cols+") select "+vObj.cols+" from "+vObj.tab+" where "+vObj.sqlwhr;
	}
	else
	{
		if( !vObj.cols )
			vSQL = "insert into log_"+vObj.tab+" select "+vObj.tab+".*,'"+vObj.res+"','" +vObj.user+"' ,sysdate,'"+vObj.opr+ "','1' from "+vObj.tab+" where "+vObj.sqlwhr;
		else
			vSQL = "insert into log_"+vObj.tab+"("+vObj.cols+") select "+vObj.cols+" from "+vObj.tab+" where "+vObj.sqlwhr;
	}
	
	// appendFileText(serverPath+"/log/test.txt","\n  : "+vSQL);
	if(vObj.issql)
	 return vSQL;
  else
    return execSQLResultset(vSQL);
}

/**
 *@name       makeVerAudit.
 *@desc       Function that posts the Audit entries
 *@author     vikas  
 *@dated      27-01-2009
 *@param      
              * vObj{Object} - Audit Object contianing following cfg options
                * @cfg
                    * tab - Tablename
                    * opr - Operation name -- [add/modify/delete]
                    * res - Audit reason to be set if any                    
                    * user - userid of the person who is performing the operation
                    * sqlwhr - where clause to be set to perform audit for
                    * issql - whether to return sql or to execute and return                                                                                                                 
 *@return     Return Data Desc
 **/
function makeVerAudit(vObj)
{
	var vSQL = "insert into audit_"+vObj.tab+" select "+vObj.tab+".*,'"+vObj.res+"','" +vObj.user+"' ,sysdate,'"+vObj.opr+ "',(select nvl(Max(To_Number(sys_audit_id))+1,0) from Audit_"+vObj.tab+") from "+vObj.tab+" where "+vObj.sqlwhr;
	//appendFileText(serverPath+"/log/Append.txt","\n Audit Query : "+vSQL);
	if(vObj.issql)
	 return vSQL;
  else
    return execSQLResultset(vSQL);
}

function iif(bVarValue,aValReturn1,aValReturn2)
{
	if(bVarValue)
	{
		return aValReturn1;
	}
	else
	{
		return aValReturn2;	
	}
}
//created by vikas on 14-12-2007 for getting branch code or any entity name wheere ever needed.
function getBranchName(bcode)
{
	var vSQL="Select entity_name from mfx_entity_master where entity_code ='"+_encode(bcode)+"'";
	vSQL=SQLResultset(vSQL);
	return vSQL.data[0][0];
}

function c_round(num,decimal)
{	
	if(num === 0)
		return (""+num);

	//Added by Harshit - 19092014 - To convert the rounding parameter to a Number
	decimal=parseFloat(decimal);
	
	if(num == "") return "";
	if(isNaN(num)) return num;
	num=parseFloat(num);
	
	
	
	if(num !=0)
	{	if(decimal != 0)
		{	num1=Math.round( num * ( Math.pow(10,decimal) ) )  ;
			var num2=""+num1;
			if((num2.length-decimal)<0)
			{	var dec="0";
  				for(i=(num2.length-decimal);i<-1;i++)
  				{ 	dec=dec+"0";	}
  				dec=dec+num2;
  				return (""+(num2.substr(0,num2.length-decimal)+"."+dec.substr(dec.length-decimal,decimal)));
			}
			else
			{	return (""+(num2.substr(0,num2.length-decimal)+"."+num2.substr(num2.length-decimal,decimal)) );   	}
		}
		else
		{return (""+(Math.round(num) )) ;}
	}
	return (""+num);
}

/**
     * This  Function is a Generic Insert Creation and Execution Function.This function does the Following Steps.
     	* Checks if Primary Key is Set for the table name passed in DBSchema.js
     	* Validates the Paramdata using the Validation configuration in DBSchema.js
     	* If Primary key Value is Blank will Generate Primay key using configuration in DBschema.js
     	* Executes the dynamically created Procedure and returns the primary key after creation.
     	
     @param {Object}	paramdata - Data to be Inserted.
     @param {String}	tablename - tablename in whihc data is to be inserted.
     
     @return   Data Pattern Returned  {"status":"[success/unsuccess]","msg":"","error":"","out":{[name:value]}}.Returns whole Generated SQL for debugging if any error caused while insertion.
     @type		String
*/

function getInsertData(vParamdata,vTablename,isSQL)
{
	var fieldcount = vParamdata.fieldnames.length;
	
	var vSQL = new Array();
	var vValues = new Array();
	

	// Check is Primary Key is set or not
	var vTmpPK=DBSchema.getprimarykey(vTablename);
	
	if(!vTmpPK) return '{"status":"unsuccess","msg":"","error":"Please Set Primary key for the Table"}';

	// Create SQL Statements 
	var vPkey="";
	var outPkey=new Array();
	var pKeyList=(DBSchema.primarykey[vTablename]).split(",");
	
	
	for (var idx=0;idx<fieldcount; idx++)
	{
		vPkey="";
		vSQL[vSQL.length]= vParamdata.fieldnames[idx];
		if(pKeyList.indexOf(vParamdata.fieldnames[idx])>=0 )
		{
			
			if(vParamdata[vParamdata.fieldnames[idx]]!="" )			
			{
				vPkey=vParamdata[vParamdata.fieldnames[idx]];
			}
			else
			{
				vPkey=DBSchema.getSystemkey(vTablename,vParamdata.fieldnames[idx]);
        appendFileText(serverPath+"/log/test.txt","\n vPkey: "+vPkey);   
				vParamdata[vParamdata.fieldnames[idx]]=vPkey;
				if(vPkey=="") return '{"status":"unsuccess","msg":"","error":"Error in Generating Primary Key"}';
			}
			vValues[vValues.length]= "'" + _encode(vPkey)+"'";
			outPkey[outPkey.length]='?';
		}
		else vValues[vValues.length]= "'" + _encode(vParamdata[vParamdata.fieldnames[idx]])+"'";
	   
		vValues[vValues.length-1]=DBSchema.transform(vTablename,vParamdata.fieldnames[idx],vValues[vValues.length-1]);
		// update the param to new Value
		//vParamdata[vParamdata.fieldnames[idx]]=vValues[vValues.length-1];
	}
	
	//Validate the Data based on the validations set in dbschema
	var valMsg=DBSchema.transValidate(vTablename,'add',vParamdata);
	if(valMsg!="") return '{"status":"unsuccess","msg":"","error":"'+valMsg+'"}';

	//if return sql data then change the format of the sql
	if(!isSQL)
    var finalSQL = "declare begin insert into " + vTablename + " (" + vSQL.join(',') +") values (" + vValues.join(',') +") returning "+vTmpPK+" into "+outPkey.join(',')+"; end;";
  else
    var finalSQL = "insert into " + vTablename + " (" + vSQL.join(',') +") values (" + vValues.join(',') +");";
	
	// if isSQL is true then return sql or else execute the query
	if(isSQL)
	 return '{"status":"success","msg":"'+finalSQL+'"}';
	else
	{
	  var resp=execEngineProc(finalSQL,vTmpPK);
	  
	  var respObj=eval("("+resp+")");
    
	  // if Unsuccess then return the error 
	  if(respObj.status=="unsuccess")
	  {  
	   return resp; 
    }

    // generate audit for this record
    // generate where clause from the generated primary keys
	  var sqlWhr=new Array();
	  for(var key in respObj.out)
	  {
	       sqlWhr[sqlWhr.length]=key+"='"+ _encode(respObj.out[key])+"'";
    }
	  //Check if custom data exist for the same
	  var vSQLMeta = "SELECT * FROM iwz_cust_metadata WHERE upper(cust_table_name) = upper('"+_encode(vTablename)+"')";


    vSQLMeta = SQLResultset(vSQLMeta);
    if(vSQLMeta.recordcount!=0 && vParamdata["_custparams"] && vParamdata["_custparams"]["fieldnames"].length>0)
    {
      for(var key in respObj.out)
      {
		//Changed by Harshit - 26032014 - For saving custom fields in masters
        vParamdata["_custparams"]["fieldnames"][vParamdata["_custparams"]["fieldnames"].length]="cust_"+key;
        vParamdata["_custparams"]["cust_"+key]=respObj.out[key];
      }

	
      var custtemp=getCustInsertData(
      {
          paramdatacust:vParamdata["_custparams"]
          ,tablename:vTablename
          ,metadataset:vSQLMeta
          ,issql:false
        }
      )   

//		appendFileText(serverPath+"/log/CustomFields.txt","\n Result of getCustInsertData : "+JSON.stringify(custtemp));
      if(custtemp.status!="success")
      {
        var upSQL="delete from "+vTablename+" where  "+sqlWhr.join(" and ");
//         appendFileText(serverPath+"/log/CustomFields.txt","\n upSQL : "+upSQL);
        upSQL= execSQL(upSQL);
        return '{"status":"unsuccess","msg":"Error While Inserting Custom data","error":"Error While Inserting Custom data"}'; 
      }
    }
    
    var audResp= makeAudit(
      {
        issql:false
        ,tab:vTablename
        ,opr:"add"
        ,res:"add"
//		    ,cols:vSQL.join(',')
        ,user:userObj.user_id
        ,sqlwhr:sqlWhr.join(" and ")
      });
     // if audit is success then return previous object 
     if(audResp.status=="success")
      return resp;
     else
      {
     // else delete the record from the table which was inserted and return unsuccess 
          var upSQL="delete from "+vTablename+" where  "+sqlWhr.join(" and ");
//           appendFileText(serverPath+"/log/CustomFields.txt","\n upSQL : "+upSQL);
           // upSQL= execSQL(upSQL);
          return '{"status":"unsuccess","msg":"Error While Generating Audit","error":"Error While Generating Audit"}'; 
      }
  }
}


function execEngineProc(vSQL,vPKey)
{
	var con = getConnection();
	var engineResult="";
	try 
	{
		proc = con.prepareCall(vSQL);
		var vLen=0;
		var vOut= new Array();
		var vRValues=null;
		if(vPKey)
		{
    		vRValues=vPKey.split(',');
    		vLen=vRValues.length;
    		for(var vCnt=0;vCnt<vLen;vCnt++)
    			proc.registerOutParameter(vCnt+1, java.sql.Types.VARCHAR);
		}
		proc.execute();
		if(vPKey)
		{
				for(var vCnt=0;vCnt<vLen;vCnt++)
					vOut[vOut.length]=' "'+vRValues[vCnt]+'":"'+proc.getString(vCnt+1)+'"' ;
		}
		engineResult='{"status":"success","msg":"Record added successfully","error":"","out":{'+vOut.join(',')+'}}';
	}
	catch(e)
	{
    appendFileText(serverPath+"/log/test.txt","\n ERror : "+e); 	
		if(iwebz.isLog=="true")		
			engineResult='{"status":"unsuccess","msg":"","error":"'+e.toString().replace("\"","","\g").replace("\n","","\g")+'"}'; 
		else
			engineResult='{"status":"unsuccess","msg":"","error":"'+vSQL+'"}'; 
    	return engineResult;	
    }
	finally
	{  con.close();con=null; }
	return engineResult;
}

/**
 *@event      getCustInsertData.
 *@desc       This Function creates a insert for custom fields.
 *@author     vikas
 *@dated      05-10-2009
 *@param      paramdatacust{Object} - Custom paramdataset
 *@param      tablename{String} - table for this custom param is set
 *@param      issql{Boolean} - whether you need SQL or not
 *@param      metadataset{Object}  - Metadataset for the column 
 *@validation 
              * tablename and paramdatacust is mandatory
 *@return     Return Data Desc
 **/
function getCustInsertData(o)
{
	try
	{
 
	  //Variables
	  var o = o||{};
	  var vSQLMeta="";
	  var finalSQL = "";
	  var vSQL= new Array();
	  var vValues= new Array();
	  var vWhr= new Array();
	  
	  o.issql = o.issql||false;
	  
	  //1 Check if tablename is passed or not
	  if(!o.tablename && o.issql) return "";
	  if(!o.tablename && !o.issql) return {"status":"unsuccess","msg":"","error":"Tablename not passed."};
	  if(!o.paramdatacust && o.issql) return "";
	  if(!o.paramdatacust && !o.issql) return {"status":"unsuccess","msg":"","error":"Paramdata not passed."};


		 
	  //2 Check if Meta data is passed or not if not then return unsuccess 
		if(!o.metadataset)
		{
			vSQLMeta = "SELECT * FROM iwz_cust_metadata WHERE cust_table_name = '"+_encode(o.tablename)+"'";
			o.metadata = SQLResultset(vSQLMeta);
			if(o.metadata.recordcount==0)
			{
				if(o.issql) return "";
				if(!o.issql) return {"status":"unsuccess","msg":"","error":"Metadata info not available for the same."};
			}
		} 


	  
	  //3 Create a Insert values for the same


		for (var idx=0;idx<o.paramdatacust.fieldnames.length; idx++)
		{
			vSQL[vSQL.length]= o.paramdatacust.fieldnames[idx];

			//Changed by Harshit - 26032014 - For saving custom fields in masters
			var origtable=o.tablename
			var custtable="custom_"+origtable;

			
//			if(DBSchema.primarykey[custtable].indexOf(o.paramdatacust.fieldnames[idx])>=0 ) - Commented by Harshit
			if((DBSchema.primarykey[custtable])==(o.paramdatacust.fieldnames[idx]))
			{
				vWhr[vWhr.length]=o.paramdatacust.fieldnames[idx]+"='"+_encode(o.paramdatacust[o.paramdatacust.fieldnames[idx]])+"'";
			}
			vValues[vValues.length]= "'" + _encode(o.paramdatacust[o.paramdatacust.fieldnames[idx]])+"'";
		}
		//Changed by Harshit - 26032014 - For saving custom fields in masters
		finalSQL = "insert into custom_" + o.tablename + " (" + vSQL.join(',') +") values (" + vValues.join(',') +");";
		


	  // Create a Insert Query	
		var audResp= makeLog( //Changed by Harshit - 26032014 - For saving custom fields in masters
		{
		  issql:true
		  ,tab:"custom_"+o.tablename ////Changed by Harshit - 26032014 - For saving custom fields in masters
		  ,opr:'add'
		  ,res:'add'
		  ,user:userObj.user_id
		  ,sqlwhr:vWhr.join(" and ")
		  
		});

		finalSQL= finalSQL+audResp;


	  
		if(o.issql) return finalSQL;
		else  	
		{
			return execSQLResultset("Begin "+finalSQL+"\n End;")
		}
	}
	catch(e)
	{


		if(o.issql) return "";
		else
			return {"status":"unsuccess","msg":"","error":"Error Ocurred in preparing query for Custom table"};
	}
}


function modifyRecord(tablename, vparamdata,thisaction,isSQL)
{

	
	var whereClause = new Array();
	var whereClause_cust = new Array();
	var sqlValues = new Array();
	var sqlCust = new Array();
	var idx2=0;
	var vdx=0;
	var updnewSql;
	var tableCols;

	var vPkey="";
	var outPkey=new Array();
	var pKeyList=(DBSchema.primarykey[tablename]).split(",");

	var valMsg=DBSchema.transValidate(tablename,thisaction,vparamdata);
	if(valMsg!="") return '{"status":"unsuccess","msg":"","error":"'+valMsg+'"}';
	
	for (var idx=0;idx<vparamdata.fieldnames.length; idx++)
	{	
		if(pKeyList.indexOf(vparamdata.fieldnames[idx])>=0)
//		if((DBSchema.primarykey[tablename])==(vparamdata.fieldnames[idx]))
		{
			whereClause[vdx]=vparamdata.fieldnames[idx]+" = '"+_encode(vparamdata[vparamdata.fieldnames[idx]])+"'";	
			whereClause_cust[vdx]="cust_"+vparamdata.fieldnames[idx]+" = '"+_encode(vparamdata[vparamdata.fieldnames[idx]])+"'";	
			vdx++;
		}
		else
		{
			if(vparamdata.fieldnames[idx] == "created_by")
				continue;
			else
			{	
				sqlValues[idx2]=vparamdata.fieldnames[idx]+" = "+DBSchema.transform(tablename,vparamdata.fieldnames[idx],"'"+_encode(vparamdata[vparamdata.fieldnames[idx]])+"'")+"";
				idx2++;
			}
		}
	}

	if(vparamdata['_custparams'] && vparamdata['_custparams']["fieldnames"] && vparamdata['_custparams']["fieldnames"].length>0)
	{
		for (var idx=0;idx<vparamdata._custparams.fieldnames.length; idx++)
		{
			///if (DBSchema.primarykey[tablename].indexOf(vparamdata._custparams.fieldnames[idx])>=0) continue;
			sqlCust[sqlCust.length]=vparamdata._custparams.fieldnames[idx]+" = '"+_encode(vparamdata._custparams[vparamdata._custparams.fieldnames[idx]])+"'";
		}
	}

	if (thisaction == "modify")
	{
	 	var vTmpPK=DBSchema.getprimarykey(tablename);
		if(!vTmpPK) return '{"status":"unsuccess","msg":"","error":"Please Set Primary key for the Table"}';
		
		tableCols = SQLResultset("select column_name from user_tab_columns where Upper(table_name)=Upper('"+tablename+"') and upper(column_name) in ('CREATED_BY','AUTH_STATUS','AUTH_BY','AUTH_ON')");
		
		if(tableCols.recordcount==4)
			updnewSql = "update "+ tablename + "  set " +(sqlValues.length!=0?sqlValues.join(',')+",":"") + " auth_status='0',auth_by='',auth_on='',created_by='"+_encode(userObj.user_id)+"' where " + whereClause.join(" and ");
		else
			updnewSql = "update "+ tablename + "  set " +sqlValues.join(',') + " where " + whereClause.join(" and ");
			
    // Changes as per the Custom Fields
	      
 	}
		else if (thisaction == "deleted")
		// else if (thisaction == "deleted" && !iwebz.soft_delete)
			updnewSql=" DELETE FROM "+ tablename +" "+" where "+ whereClause.join(" and ");
		else
			updnewSql = "update "+ tablename + "  set deleted='Y' where " + whereClause.join(" and ");
	   
		var audResp= makeAudit(
	      {
	        issql:true
	        ,tab:tablename
	        ,opr:thisaction
	        ,res:thisaction
	        ,user:userObj.user_id
	        ,sqlwhr:whereClause.join(" and ")
	      });
		audResp+=";"
		
	
   if(vparamdata['_custparams'] && vparamdata['_custparams']["fieldnames"] && vparamdata['_custparams']["fieldnames"].length>0)
    {
	    updnewSql = updnewSql+"; update custom_"+ tablename + "  set " +sqlCust.join(',') + " where "+whereClause_cust.join(" and ");

		if(vparamdata['_custparams']["fieldnames"].length>0) 
		{
			audResp=audResp+" "+makeLog(
			{
				issql:true
				,tab:"custom_"+tablename
				,opr:'add'
				,res:'add'
				,user:userObj.user_id
				,sqlwhr:whereClause_cust.join(" and ")
			});
		}
    }

    if(isSQL)return updnewSql+";\n"+audResp+" ";
	else 
	{
		if (thisaction == "modify")
			updnewSql= "Begin \n "+updnewSql+";\n"+audResp+" \n End;";
		else
			updnewSql= "Begin \n"+audResp+" \n "+updnewSql+";\n End;"; //execute log and then delete the actual record
	
		var resp = execSQL(updnewSql);
		resp = encodeEscapeCharacters(resp);
		return resp;
	}
}

function getWhereLikeClause(vParamdata)
{
	
	var fieldcount = vParamdata.fieldnames.length;	
	var vValues="";
	var val="";
	for (var idx=0;idx<fieldcount; idx++)
	{	
		val=_encode(vParamdata[vParamdata.fieldnames[idx]]);
		if(val=="" || val=="AL")
			continue;
		vValues+= "upper(a."+vParamdata.fieldnames[idx]+") like ";
		vValues+= "upper('"+ val +"%')"+" and ";
	}
	if(vValues.length>0)
		vValues=" and "+vValues.substring(0,vValues.lastIndexOf("and"));
	return vValues;
}

function getTabWhereClause(vParamdata)
{

var fieldcount = vParamdata.fieldnames.length;	
  
	var vValues="";
	var val="";
	for (var idx=0;idx<fieldcount; idx++ )
	{
		
		val=_encode(vParamdata[vParamdata.fieldnames[idx]]);          
		if(val=="" || val=="AL")
			continue;
	
		if(vParamdata.asgn && vParamdata.asgn[idx]=='like')
		{
      vValues+= "lower("+vParamdata.fieldnames[idx]+") like ";
		  vValues+= "lower('%"+val+"%')"+" and ";
    }
    else if(vParamdata.asgn && vParamdata.asgn[idx]=='frm_between')
    {
	   	  vValues+= ""+vParamdata.fieldnames[idx]+" > ";
 			  vValues+= ""+val+""+" and ";
    }
     else if(vParamdata.asgn && vParamdata.asgn[idx]=='to_between')
     {
      	val=vParamdata[vParamdata.fieldnames[idx]];
     	  vValues+= ""+vParamdata.fieldnames[idx]+" < ";
    	  vValues+= ""+val+""+" and ";
     }
     else if(vParamdata.asgn && vParamdata.asgn[idx]=='formatsearchdate')
     {
        	vValues+= "trunc("+vParamdata.fieldnames[idx]+") = ";
    	  	vValues+= "'"+val+"'"+" and ";
     }
     else
     {
    	  vValues+= ""+vParamdata.fieldnames[idx]+" = ";
    	  vValues+= "'"+val+"'"+" and ";
     }
	}
	if(vValues.length>0)
		vValues=" and "+vValues.substring(0,vValues.lastIndexOf("and"));
		
	return vValues;
}

function getNormalWhereClause(vParamdata)
{
	var fieldcount = vParamdata.fieldnames.length;	
	var vValues="";
	var val="";
	for (var idx=0;idx<fieldcount; idx++ )
	{	
		val=_encode(vParamdata[vParamdata.fieldnames[idx]]);
		if(val=="" || val=="AL")
			continue;
		vValues+= vParamdata.fieldnames[idx]+" = ";
		vValues+= "'"+val+"'"+" and ";
	}
	if(vValues.length>0)
		vValues=" and "+vValues.substring(0,vValues.lastIndexOf("and"));
	return vValues;
}

function getLOVWhereClause(vParamdata)
{
	var fieldcount = vParamdata.fieldnames.length;	
	var vValues="";
	var val="";
	for (var idx=0;idx<fieldcount; idx++ )
	{	
		val=_encode(vParamdata[vParamdata.fieldnames[idx]]);
		vValues+= ""+vParamdata.fieldnames[idx]+" like %";
		vValues+= ""+val+""+"% and ";
	}
	if(vValues.length>0)
		vValues=" and "+vValues.substring(0,vValues.lastIndexOf("and"));
	return vValues;
}

function getTabSortColumn(vObj)
{
	var order_by="";
	if(vObj.sort_by) if(!vObj.sort_by=="")	order_by=" Order By trim(lower("+_encode(vObj.sort_by)+")) "+_encode(vObj.sort_by_dir);
	return order_by;
}

function getHtmlFile()
{
	var vPath=iwebz.getParameter('path');
  return iwebz.getHtmlText(vPath);
//   if(vPath=="") return "";
//   try 
//   {
//     //canonical path of server
//     var spath=new java.io.File(serverPath);
//     spath=spath.getCanonicalPath();
//     spath=spath.replace("\\","/");
// //    appendFileText(serverPath+"/log/path.txt","\n server path: "+spath);
//     
//     //file path
//     var filepath= new java.io.File(spath+""+vPath);
//     filepath=filepath.getCanonicalPath();
//     filepath=filepath.replace("\\","/");
// //    appendFileText(serverPath+"/log/path.txt","\n canonicalPath of file : "+filepath);
//     
//     var indx=filepath.indexOf(spath);
// //    appendFileText(serverPath+"/log/path.txt","\n canonicalPath index : "+indx);
//     if(indx==-1)
//       return ""
//     else
// 		  return getFileText(serverPath+""+vPath);
// 	}
// 	catch(e) 
//   {
//     return "";
//   }
}

function getDashHtmlFile()
{
	var vPath=iwebz.getParameter('path');
  if(vPath=="")return "";
	return getFileText(serverPath+""+vPath).replace("frmTabSearch","frmDashSearch");
}


/** this function returns the where clause and take sas input object as following
{	"fieldnames":
		[<col1>,<col2>...<coln>],
	"data":[
			[<colval11>,<colval12>...<colval1n>],
			[<colval21>,<colval22>...<colval2n>]
			.
			.
			.
			[<colvaln1>,<colvaln2>...<colvalnn>]
			]
}
*/			
function getWhereInClause(vdata)
{
	var whereClause = new Array();
	var tempClause="";
	for(var idx=0;idx<vdata.fieldnames.length; idx++ )
	{
		tempClause="";
		tempClause=vdata.fieldnames[idx]+" IN (";		
		for (var vdx=0;vdx<vdata.data.length; vdx++ )
			tempClause=tempClause+"'"+_encode(vdata.data[vdx][idx])+"',";
			
		tempClause=tempClause.substring(0,tempClause.length-1);
		whereClause[whereClause.length]=tempClause+")";
	}
  //appendFileText(serverPath+"/log/mohini.txt","\n where in clause: "+whereClause.join(' and '));  	
	if(whereClause.length>0) return " and "+whereClause.join(' and ');
	else return "";;
}

function getLovRefresh()
{
	var tablename=iwebz.getParameter("tablename");
	var colVals=iwebz.getParameter("colVals");
 	var JString = iwebz.getParameter("JString");
 	var lovSQL=iwebz.getParameter("sql");
  var filter=iwebz.getParameter('filter');
 	var isSQL=iwebz.getParameter('isSQL')||0;
	var sort_by=iwebz.getParameter('sort')||"";
	var sort_by_dir=iwebz.getParameter('dir')||"";
	var start=iwebz.getParameter('start')||"0";
 	var limit=iwebz.getParameter('limit')||"0";;

  try
  {
    filter=eval('(' + filter+ ')');
  }
  catch(e)
  {filter=[];}
  filter=getFwkWhereClause(filter);
 	var vSQL="";
  var paramdata = eval('(' + JString + ')');
	if(start!=0)
	{
	   start=parseInt(start)+1;
	   limit=parseInt(limit)-1;
	}
	var order_by=getTabSortColumn({"sort_by":sort_by,"sort_by_dir":sort_by_dir}); 		
	var vValues = new Array();
	// create the where clause
	if(colVals)
	{
		var colValsList=colVals.split(',');
		for(var v=0;v<colValsList.length;v++)
			vValues[vValues.length]=" upper("+_encode(colValsList[v])+") like upper('%"+_encode(paramdata.val)+"%') ";
	}
	// check if sql is passed or not
	if(!lovSQL || lovSQL =="")	vSQL="select "+colVals+" from "+_encode(tablename)+" a where "+vValues.join(' or ')+"  "+order_by;
	else vSQL="select * from ("+lovSQL+") a where "+vValues.join(' or ');
	
	vSQL= "Select * from ("+vSQL+") where 1=1 "+filter+" "+order_by;
	if(isSQL=="1")
	 return vSQL;
	vSQL=getPageWiseQuery(vSQL,parseInt(start),parseInt(start)+parseInt(limit));
	vSQL=SQLResultset(vSQL);
			
	if(vSQL.recordcount==0)	vSQL.totalcount=0;
	else vSQL.totalcount=parseInt(vSQL.fieldbyname('rc_internal')||'0');
	return JSON.stringify(vSQL);	
}

function getLovData()
{
	var tablename= _encode(iwebz.getParameter("tablename"));
	var namefield= _encode(iwebz.getParameter("namefield"));
	var codefield= _encode(iwebz.getParameter("codefield"));
 	var lovSQL=iwebz.getParameter("sql");
 	var val=_encode(iwebz.getParameter("val"));

 	var action=iwebz.getParameter("action");
 	var vSQL="";
 	if(!action)action='add';
 	if(action=='add') 	
 	{
	if(!lovSQL || lovSQL =="" )
	{
		if(namefield=="" || codefield=="" || tablename=="")
			return '{"status":"unsuccess","msg":"","error":"",recordcount:0}';
		else  
        vSQL="select "+namefield+","+codefield+" from "+tablename+" a where upper(a."+codefield+") = '"+val+"' or upper(a."+namefield+")like '"+val+"%'";
    }	
  	else vSQL="select * from ("+lovSQL+") a where upper(a."+codefield+") = '"+val+"' or upper(a."+namefield+")like '"+val+"%'";
	}
	else 
	{
  	if(!lovSQL || lovSQL =="" )
    {
      if(namefield=="" || codefield=="" || tablename=="")
        return '{"status":"unsuccess","msg":"","error":"",recordcount:0}';
      else  
       vSQL="select "+namefield+","+codefield+" from "+tablename+" a where  upper(a."+codefield+") = '"+val+"' or upper(a."+namefield+")like '"+val+"%'";
    }	
  	else vSQL="select * from ("+lovSQL+") a where upper(a."+codefield+") = '"+val+"' or upper(a."+namefield+")like '"+val+"%'";  
	}

	vSQL=SQL(vSQL);
	return vSQL;
}

function getArrayDropDown(vArray,vVal,blank) { 	
	var resultStr = "";
	var vVal=vVal||"";
	if(blank == "yes")
 	   resultStr = resultStr + '<OPTION value="" selected>ALL</OPTION>';
	for( var vCnt = 0 ; vCnt < vArray.length ; vCnt++) {
	if (vVal==vArray[vCnt][0] )
     	resultStr = resultStr + '<OPTION selected value="'+vArray[vCnt][0]+'" >' + vArray[vCnt][1] +'</OPTION>';
    else
     	resultStr = resultStr + '<OPTION value="'+vArray[vCnt][0]+'" >' + vArray[vCnt][1] +'</OPTION>';
	}
 	return resultStr;
}


function getUserObj()
{
	//appendFileText(serverPath+"/user.txt","\ncheck it:");		
	return JSON.stringify(userObj);
}

function helloVikas(JString)
{	
	var str= eval('('+JString+')');
// 	var vSQL=SQLResultset("select * from tab",true);
	var vSQL="UPDATE wm_transaction set trans_status='CON' WHERE security_code='IFLEXSOLUT'"; 
	var vSQL=execSQLResultset(vSQL,true)
	///appendFileText(serverPath+"/ABCDEF.txt","\ncheck it:");		
	return vSQL.recordcount;

}



function getParamValueByName(vName)
{
	for(var i=0;i<vParamData.recordcount;i++)
	{	vParamData.recordno=i;
		if(vParamData.fieldbyname('paramname')==vName.toLowerCase()) return vParamData.fieldbyname('paramvalue');
	}
	return "";
}


function getTabQry(vObj,vRefFunc)
{
// 	if(iwebz.isLog=="true") appendFileText(serverPath+"/log/iWebZLog.txt","\n Inside Get tab qry");
	if(!vRefFunc || vRefFunc=="")
	{
		vRefFunc="getTabQrySTD";
	}
	var vSQL=eval(''+vRefFunc+'('+vObj+');');
// 	vSQL= "select * from ("+vSQL+") where "+vWhr;
	return vSQL;
}

//this is a std query creator to be called in case of no refresh function is specified.
/// this accepts object as parameter of type {tablename:"",paramdata:{}}
function getTabQrySTD(vObj)
{
	var vSQL = "";
	var vValues = getTabWhereClause(vObj.paramdata);
	var order_by=getTabSortColumn(vObj);
  var filter=getFwkWhereClause(vObj.filter);

  if(vObj.tablename)
	var vSQL="Select * from "+vObj.tablename+" a where 1=1 "+vValues+" and 1=1 "+filter+" "+order_by;
  else
   var vSQL="Select * from dual";
    
// 	appendFileText(serverPath+"/Vikas78.txt","\n Master Query: "+vSQL);
	if(vObj.isSQL=="1")return vSQL; 
	if(vObj.start!=-1 && vObj.limit!=-1)	
	vSQL=getPageWiseQuery(vSQL,parseInt(vObj.start),parseInt(vObj.start)+parseInt(vObj.limit));
	return SQL(vSQL);	
}
/*
{"type":"string","value":"vikas","field":"client_id"},
{"type":"date","comparison":"eq","value":"03/20/2010","field":"dob"},
{"type":"date","comparison":"lt","value":"03/20/2010","field":"dob"},
{"type":"date","comparison":"gt","value":"03/20/2010","field":"dob"},
{"type":"numeric","comparison":"eq","value":10,"field":"annual_income"},
{"type":"numeric","comparison":"lt","value":150,"field":"net_worth"},
{"type":"numeric","comparison":"gt","value":100,"field":"net_worth"}
*/
function getTabRefresh()
{
	var tablename=iwebz.getParameter('tablename')||"";
	var paramdata=iwebz.getParameter('JString')||'{"fieldnames":[],datefieldnames:[]}';
	var start=iwebz.getParameter('start')||"0";
	var filter=iwebz.getParameter('filter')||'[]';
	var isSQL=iwebz.getParameter('isSQL')||0;
 	var limit=iwebz.getParameter('limit')||"0" ;
	var sort_by=iwebz.getParameter('sort')||"";
	var sort_by_dir=iwebz.getParameter('dir')||"";
	var order_by="";
  var refreshfunc=iwebz.getParameter('refreshfunc');
	if(start!=0)
	{
	   start=parseInt(start)+1;
	   limit=parseInt(limit)-1;
	}
 	var vObj='{tablename:"'+tablename+'",paramdata:'+paramdata+',start:'+start+',limit:'+limit+',sort_by:"'+sort_by+'",sort_by_dir:"'+sort_by_dir+'",isSQL:"'+isSQL+'",filter:'+filter+'}';
 	//if(iwebz.isLog=="true") // appendFileText(serverPath+"/log/iWebZLog.txt","\nObject while grid refresh: "+vObj);
 	return   getTabQry(vObj,refreshfunc);
}




function deCompressFile(vSrc,vDest)
{
	return zipUtilObj.unZipFile(vSrc,vDest);
}

function removeFile(vFilePath)
{
	 var objFileWrite = new java.io.File(vFilePath);
     if(!objFileWrite.exists())	
        {
	         return "{status:'success',msg:'File Not Found: "+vFilePath+"'}";   
	     }
	return rmFile.deleteFile(vFilePath);
}

function removeFolder(vFilePath)
{
	return rmFile.deleteFolder(vFilePath);
}

function getFileAttributes(filePath)
{
return fileAttr.getMdfDate(filePath);
}

function listFiles(appPath)
{
	//return appPath;
   return getAppFiles.listFiles(appPath);
}

function getUserID()
{	return userid;
}

/**
 *@name       uploadFileToServer.
 *@desc       Uploads the file to the server at the specified path
 *@param      
              * vFolder{String} - path where the file is to be store 
 *@return     * {Object} This object with status as success and unsuccess
 **/
function uploadFileToServer(vFolder,isOW)
{
	
  if(isOW==null || isOW == undefined)
    isOW=true;
  else  
    isOW=isOW||false;
  isOW=!isOW;
  try
  {       
	  
	  		var objMkFolder = new java.io.File(vFolder);
	        if(!objMkFolder.isDirectory()){objMkFolder.mkdir();}
	        var fileUpload='';
		      var fileItems ='';
			    fileUpload = new Packages.org.apache.commons.fileupload.DiskFileUpload();   
			    fileUpload.setSizeMax(-1);
	          
	        var v_NewStringList2='';
			var fileItems = new java.util.LinkedList(fileUpload.parseRequest(request));
// 	 		appendFileText(serverPath+"/log/harshit.txt","\n fileItems : "+fileItems);
	        var vSize = fileItems.size();
	                 
	        for(var vCnt = 0 ; vCnt < vSize ; vCnt++)
	          {  
// 		         appendFileText(serverPath+"/log/harshit.txt","\n inside for loop "); 
		         var FileItem = new Packages.org.apache.commons.fileupload.FileItem(fileItems.get(vCnt));
	             if(!FileItem.isFormField())
	               {
// 		            appendFileText(serverPath+"/log/harshit.txt","\n inside first IF ");   
		            var vFileName = FileItem.getName()+"";
                    if(vFileName)
	                  { 
                      var vInd = vFileName.lastIndexOf("\\");
                   		if(vInd != -1)
		               		  vFileName = vFileName.substring(vInd+1,vFileName.length); 
                      var objFileWrite = new java.io.File(vFolder + vFileName);
	                    if(objFileWrite.exists() && isOW)
					            { 
									       return {"status":"unsuccess","error":"File "+(vFolder + vFileName)+" already exist"};   
		                  }
		                  else
		                  {
					    				 FileItem.write(objFileWrite);
						            return {"status":"success","msg":"File Uploaded Successfully"};
						          }
	                  }
	               }
	          }
	          return {"status":"unsuccess","error":"Form does not Contain File Input"};
	
    }
    catch(e)
    { return {"status":"unsuccess","error":"Error while Uploading File.<BR>Error Occured:'"+e+"'"}; }	          
}

function uploadFileToServerMultiple(vFolder,isOW,vvProcess)
{
	var vFolder
	var objMkFolder =""
	var fileUpload='';
	var fileItems ='';
	var v_NewStringList2='';
	var fileItems =""
	var vSize =""
	var SuccessObj=[];
	var UnsuccessObj=[];
	var FileItem =""
	var vFileName =""
	var vInd =""
	var objFileWrite =""
	
  if(isOW==null || isOW == undefined)
    isOW=true;
  else  
    isOW=isOW||false;
  isOW=!isOW;
  try
  {       
	  
			vFolder=vFolder+getServerDate()+"/"
			objMkFolder = new java.io.File(vFolder);
			
			if(!objMkFolder.isDirectory()){objMkFolder.mkdir();}
			fileUpload='';
			fileItems ='';
			fileUpload = new Packages.org.apache.commons.fileupload.DiskFileUpload();   
			fileUpload.setSizeMax(-1);
	          
	        v_NewStringList2='';
			fileItems = new java.util.LinkedList(fileUpload.parseRequest(request));
	        vSize = fileItems.size();
	                 
	        SuccessObj=[];
	        UnsuccessObj=[];
	        for(var vCnt = 0 ; vCnt < vSize ; vCnt++)
	          {  
				
				FileItem = new Packages.org.apache.commons.fileupload.FileItem(fileItems.get(vCnt));
				if(!FileItem.isFormField())
				{
				
					vFileName = FileItem.getName()+"";
					if(vFileName)
					{ 
						vInd = vFileName.lastIndexOf("/");
						if(vInd != -1)
							vFileName = vFileName.substring(vInd+1,vFileName.length); 
						objFileWrite = new java.io.File(vFolder + vFileName);
						if(isOW)
						{
							FileItem.write(objFileWrite);
							SuccessObj[SuccessObj.length]={"file_name":vFileName,"status":"success","msg":"File '"+vFileName+"' uploaded successfully"}
							incrProcessParam(vvProcess,'SUCCESS',1);
							logProcessDetail(vvProcess,vCnt,"File '"+vFileName+"' uploaded successfully");
							continue;
						}
						else
						{
							if(objFileWrite.exists())
							{
								UnsuccessObj[UnsuccessObj.length]={"file_name":vFileName,"status":"unsuccess","msg":"File '"+vFileName+"' could not be uploaded as it already exists"}
								incrProcessParam(vvProcess,'ERRORS',1);
								logProcessDetail(vvProcess,vCnt,"File '"+vFileName+"' could not be uploaded");
								continue;
							}
							else
							{
								FileItem.write(objFileWrite);
								SuccessObj[SuccessObj.length]={"file_name":vFileName,"status":"success","msg":"File '"+vFileName+"' uploaded successfully"}
								incrProcessParam(vvProcess,'SUCCESS',1);
								logProcessDetail(vvProcess,vCnt,"File '"+vFileName+"' uploaded successfully");
								continue;
							}
						}
					}
				}
	          }
	          return {"status":"success","successDet":SuccessObj,"unsuccessDet":UnsuccessObj,"file_path":vFolder,"msg":""};
    }
    catch(e)
    { return {"status":"unsuccess","msg":"Error while Uploading File.<BR>Error Occured:'"+e+"'"}; }	          
}




/**
 *@name       modToDatabase.
 *@desc       Modifies the set of
 *@param      * Paramdata{Array} - Array of param data object 
 *@return     Return Data Desc
 **/
function modToDatabase(paramdata)
{
	var rowcount = paramdata.data.length;
	var tablename =paramdata.tablename;
	var vSQL = "";
	var sqlArray= new Array(); 
	var errorArray=new Array();
	for (var jdx=0;jdx<rowcount; jdx++ )
  {
      vSQL=modifyRecord(tablename,paramdata.data[jdx],'modify',true);
       sqlArray[sqlArray.length] = vSQL;
  }
  	var resStr=execExplicitCommitSQL(sqlArray);
  	resStr=eval("("+resStr+")");
  	if(resStr.status=="success")
      return '{"status":"success","msg":"'+resStr.recordcount+'(s) Uploaded Successfully!","error":""}';
    else
      return '{"status":"unsuccess","msg":"","error":"Error Occurred '+resStr.error+'"}';
}


/**
 *@name       makeVerAudit.
 *@desc       Function that posts the Audit entries
 *@author     Naresh  
 *@dated      10-03-2009
 *@param      
              * vObj{Object} - Audit Object contianing following cfg options
                * @cfg
                    * tab - Tablename
                    * opr - Operation name -- [add/modify/delete]
                    * res - Audit reason to be set if any                    
                    * user - userid of the person who is performing the operation
                    * sqlwhr - where clause to be set to perform audit for
                    * issql - whether to return sql or to execute and return                                                                                                                 
 *@return     Return Data Desc
 **/
function makeVerAudit(vObj)
{
	var vSQL = "insert into audit_"+vObj.tab+" select "+vObj.tab+".*,'"+vObj.res+"','" +vObj.user+"' ,sysdate,'"+vObj.opr+ "',(select nvl(Max(To_Number(sys_audit_id))+1,0) from Audit_"+vObj.tab+") from "+vObj.tab+" where "+vObj.sqlwhr;
	//appendFileText(serverPath+"/log/Append.txt","\n Audit Query : "+vSQL);
	if(vObj.issql)
	 return vSQL;
  else
    return execSQLResultset(vSQL);
}
/** END Version control functions **/

/**
 *@name       uploadToDatabase.
 *@desc       Uploads the paramdata to the database 
 *@param      
              * Param1{String} - param Description 
 *@return     Return Data Desc
 **/
function uploadToDatabase(paramdata)
{
	var rowcount = paramdata.data.length;
	var tablename =paramdata.tablename;
	var vSQL = "";
	var sqlArray= new Array(); 
	var errorArray=new Array();
	for (var jdx=0;jdx<rowcount; jdx++ )
  {
      vSQL=getInsertData(paramdata.data[jdx],tablename,true);
//      appendFileText(serverPath+"/log/mohini.txt","\n vSQL : "+vSQL);
      vSQL=eval("("+vSQL+")");
      if(vSQL.status=="success")   
	       sqlArray[sqlArray.length] = vSQL.msg;
	    else
	     errorArray[errorArray.length]="<B>Record No("+(jdx+1)+"):</B>"+vSQL.error;
  }
  if(errorArray.length==0)
  {
  	var resStr=execExplicitCommitSQL(sqlArray);
//   	appendFileText(serverPath+"/log/batchno.txt","\n resStr : "+sqlArray);
  	resStr=eval("("+resStr+")");
  	if(resStr.status=="success")
      return '{"status":"success","msg":"'+resStr.recordcount+'(s) Uploaded Successfully!","error":""}';
    else
      return '{"status":"unsuccess","msg":"","error":"Error Occurred '+resStr.error+'"}';
  }
  else
    return '{"status":"unsuccess","msg":"","error":"'+errorArray.join("<BR>")+'"}';
}


/**
 *@event      getUpLookupData.
 *@desc       Gets the data for the lookuplist
 *@author     vikas 
 *@dated      17-03-2009
**/
function getUpLookupData()
{
  var res = getLookUpList(iwebz.getParameter('id'),iwebz.getParameter('tablename'),iwebz.getParameter('namefld'),iwebz.getParameter('codefld'),iwebz.getParameter('SQL'),true);
  return res;
}

/**
 *@event      getSystemDate.
 *@desc       Returns the System Date for the field passed 
 *@author     vikas 
 *@dated      04-04-2009
 *@param      fldname{String} - Field name
 *@return     Return Data Desc
 **/
function getSystemDate(fldname)
{
	if (action == "modify" || action == "delete" ) 
	{
		return masterdata.fieldbyname(fldname);
	}
	return getServerDate();	
}







/**
 *@event      uploadMulFileToServer.
 *@dated      21-11-2009
 *@author    naresh
 *@desc       Uploads the file to the server at the specified path
 *@param      * vFolder{String} - path where the file is to be store 
 *@return     * {Object} This object with status as success and unsuccess
 **/
function uploadMulFileToServer(vFolder,isOW)
{
  if(isOW==null || isOW == undefined)
    isOW=true;
  else  
    isOW=isOW||false;
  isOW=!isOW;
  try
  {       var objMkFolder = new java.io.File(vFolder);
	        if(!objMkFolder.isDirectory()){objMkFolder.mkdir();}
	        var fileUpload='';
		      var fileItems ='';
			    fileUpload = new Packages.org.apache.commons.fileupload.DiskFileUpload();   
			    fileUpload.setSizeMax(-1);
	          
	        var v_NewStringList2='';
	        
	        
	 		    var fileItems = new java.util.LinkedList(fileUpload.parseRequest(request));
	 		
	        var vSize = fileItems.size();
	        
	                 
	        for(var vCnt = 0 ; vCnt < vSize ; vCnt++)
	          {  var FileItem = new Packages.org.apache.commons.fileupload.FileItem(fileItems.get(vCnt));
	         
	             if(!FileItem.isFormField())
	               {  var vFileName = FileItem.getName()+"";
                    if(vFileName)
	                  { 
                      var vInd = vFileName.lastIndexOf("\\");
             
                   		if(vInd != -1)
		               		  vFileName = vFileName.substring(vInd+1,vFileName.length); 
		     
                      var objFileWrite = new java.io.File(vFolder + vFileName);
             
	                    if(objFileWrite.exists() && isOW)
					            { 
						            //appendFileText(serverPath+"/Append.txt","\n 6 : "+vSize);
									       return {"status":"unsuccess","error":"File "+(vFolder + vFileName)+" already exist"};   
		                  		}
		                  else
		                  {
					    				 FileItem.write(objFileWrite);
						            
						    }
						    //appendFileText(serverPath+"/Append.txt","\n 7 : "+vSize);
	                  }
	               }
	          }
	           return {"status":"success","msg":"File Uploaded Successfully"};   
	
    }
    catch(e)
    { return {"status":"unsuccess","error":"Error while Uploading File.<BR>Error Occurred:'"+e+"'"}; }	 
        
}

/**
 *@event      setParamList.
 *@dated      03 MAR 2010
 *@author     naresh
 *@desc       retrivies parameters against selected report
**/
function setParamList(srno)
{ 
 var cond=" 1=2 ";
 if(reportObj.dataset.fieldbyname('parameter'))
    cond=" srno in ("+reportObj.dataset.fieldbyname('parameter')+") ";

//    appendFileText(serverPath+"/Append_dur.txt","\n cond &&&&&&&&&&&: "+cond); 
	var vSQL= "select paramname,paramvalue from "+iwebz.prod_param_table+" where "+cond+" ";
// 	appendFileText(serverPath+"/Append_dur.txt","\n vSQL &&&&&&&&&&&: "+vSQL);
	jsp_ParamData.paramlist = SQLResultset(vSQL);	
} 
	

/**
 *@event      roundDown
 *@desc       Round down decimal spaces to specified no of digits
 *@author     naresh
 *@dated      04 JUNE 2010
 *@param      num - number for which decimal to be round
 			  dec -  number of decimal spaces required
 *@return     number - with round down decimal places
 **/
function roundDown(num,dec)
{
	var digit=1;
	for(var i=1;i<=dec;i++)  
	{
    digit=digit*10
		num=(num*100)/10;
	}
	num=Math.floor(num)/digit;
	return num;
}


/**
 *@event      sysRound
 *@desc       Returns number according to rounding configuration
 *@author     naresh
 *@dated      05 JUNE 2010
 *@param      num - number for which decimal to be round
 			  rconf - rounding configuration 
 			  		0 - round down decimal places
 			  		1 - round decimal places
 			  		2 - no rounding		 
 			  dec -  number of decimal spaces required
 *@return     resultant number
 **/
function sysRound(num,rconf,digit)
{
	var vNum=parseFloat(num);
  if(isNaN(vNum))
    return num;
    
  var temp=0;
   // 2 clear fields based on the param sent   
   switch (rconf) {
          case 0:
          	temp = truncNum(Math.abs(vNum),digit);
          break;
          case 1:
         	  temp = c_round(Math.abs(vNum),digit);
            break;
          case 2:
         	  temp = truncNum(Math.abs(vNum),digit);
          break;
          default:
                  temp=Math.abs(vNum);      
          break;
   }
  
  if(vNum<0)
  {
    temp = parseFloat(temp);
    return (temp *(-1))
  }
  else
    return temp;  
}

/**
 *@event      truncNum.
 *@desc       Truncs number to specified decimal places
 *@author     vikas
 *@dated      13/09/2012 16:13:23
 *@param      anynum{number} - 
 *@param      dec{number} - 
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function truncNum(anynum, dec) {
    var numStr = anynum.toString();
    var decPos = numStr.indexOf(".");
    if (decPos === -1) {
        return anynum;
    }
    else if (dec === 0) {
        return parseFloat(numStr.substr(0, decPos));
    }
    else {
        return parseFloat(numStr.substr(0, decPos + parseInt(dec) + 1));
    }
}

/**
 *@event      postAlerts.
 *@dated      28 JUNE 2010
 *@author     naresh
 *@desc       retrivies parameters against selected report
 *@param      alertids - ids of alert which are to be displayed
 						  dataset - dataset of data from where function is called
 *@return		  Returns operation status message						  
**/
function postAlerts(alertids,dataset)
{
 	var msg;
 	var vErr=new Array();
 	var vMsg=new Array();
 	
 	//alertids=alertids.join("','");
 	if(alertids=="")return {status:"success",msg:"No Alertids passed"};
 	  
 	var alerts="SELECT alertid,alertdata,roleids,userids,frmuser FROM iwz_alert_config where alertid in ("+alertids+")";
 	alerts=SQLResultset(alerts); 	
 	for(var i=0;i<alerts.recordcount;i++)
 	{
	 
	 		alerts.recordno=i;	
	   	msg=evalAlertMsgExp(alerts.fieldbyname("alertdata"),dataset); 	
// 	   	appendFileText(serverPath+"/chat.txt","\n 11. "+msg);
 	  	vres=broadcastAlert({bd_message:msg,vData:alerts},dataset); 	  
 	  	if(vres.status=="unsuccess")	
 	  		vErr[vErr.length]="Error occurred: "+vres.error;
 	  	else
 	  		vMsg[vMsg.length]=" "+vres.msg;		  			
 	}	 	
 	 
  if(vErr.length>0)
  	return {status:"unsuccess",error:"Errors : "+vErr.join("<br>")};
  return {status:"success",msg:""+vMsg.join("<br>")};	
  
}


/**
 *@event      broadcastAlert.
 *@dated      28 JUNE 2010
 *@author     naresh
 *@desc       broadcasts parameters against selected report
 *@param      paramdata - object 
 *@return		  Returns operation status message						  
**/
function broadcastAlert(paramdata,dataset)
{	 
	var profile_condition="";	 
	var tmp;
	var roles=new Array();
	var ids=new Array();
	var brCastSQL;
	var profile_condition="";
	var user_condition="";
    var frmUser;
  
  	// get msg from user name
  	frmUser=paramdata.vData.fieldbyname("frmuser")||userObj.userid;
  
	// get role ids from alertconfig table	
	tmp=paramdata.vData.fieldbyname("roleids");
	if(tmp){
	roles=tmp.split(",");
	profile_condition = prof_cond(roles);
	}
	else
	 	profile_condition=" and 1=2";
	
	// get user ids from alertconfig table	
	tmp=paramdata.vData.fieldbyname("userids");	
	if(tmp){		
	tmp=evalAlertMsgExp(paramdata.vData.fieldbyname("userids"),dataset);
	ids=tmp.split(",");
	user_condition=user_cond(ids);
 	}
  else
	  user_condition=" or 1=2";	
	
	// prepare query for broadcast user list
 	brCastSQL = "insert into iwz_chat_message_log (id,to_userid,from_userid,to_groupid,type,text,senttime,topic,status,group_status) select iwz_chat_message_id.nextval,user_id,from_userid,to_groupid,type,text,senttime,topic,status,group_status FROM (select DISTINCT user_id,'"+_encode(frmUser)+"' from_userid,'' to_groupid,'Chat' type,'"+_encode(paramdata.bd_message)+"' text,SYSDATE senttime,'' topic,'0' status,'' group_status from iwz_user_role_master WHERE roleid in (SELECT roleid FROM iwz_role_master where 1=1 "+profile_condition+" )   "+user_condition+") WHERE 1=1 and  user_id<>'"+_encode(userObj.userid)+"'";
 	
//  	appendFileText(serverPath+"/chat.txt","\n 4 "+brCastSQL);	
 	
 	brCastSQL = execSQLResultset(brCastSQL);
//  	appendFileText(serverPath+"/chat.txt","\n 4brCastSQL "+brCastSQL.status);	
 	
 	if(brCastSQL.status=="unsuccess")
 		return {status:"unsuccess",error:"Failed to send the Broadcast msg"};					
 	else
 		return {status:"success",msg:"Successfully sent the Broadcast msg"};			
}


/**
 *@event      prof_cond.
 *@dated      28 JUNE 2010
 *@author     naresh
 *@desc       Returns where clause for role id field in query
 *@param      paramdata - object 
 *@return		  Returns operation status message						  
**/
function prof_cond(roles_array)
{
	var profile_condition =new Array();
	for(var i=0;i<roles_array.length;i++)
	{
		if(roles_array[i]=='ALL')
			return "";
		else
			profile_condition[profile_condition.length]= "'"+_encode(roles_array[i])+"'";
	}
	
	profile_condition=profile_condition.join(",");
	profile_condition="  and roleid in ("+profile_condition+") ";
	
	return profile_condition;
}



function user_cond(roles_array)
{	
	var profile_condition = new Array();
	
	for(var i=0;i<roles_array.length;i++)
	{
		if(roles_array[i]=='ALL')
			return " ";
		else
			profile_condition[profile_condition.length]= "'"+_encode(roles_array[i])+"'";
	}	
	profile_condition=profile_condition.join(",");
	return " or user_id in ("+profile_condition+")";
}


function evalAlertMsgExp(aStr,ds)
{
	
	var regExp = new RegExp("{([^}]*)}","gi");
	 //ibm.log("Eval Expression"+aStr);
	var result = aStr.match(regExp);
  var expression="";
  var exprStr="";
  var exprVal="";
  if (result==null) return aStr;
  for (idx=0;idx<result.length;idx++)
  {
    exprStr =result[idx];
    expression =exprStr.replace("{","").replace("}","");    
    if(ds) exprVal=ds.fieldbyname(expression);
    else
    {
      try
      {
        exprVal=eval(expression);
      }
      catch(e)
      {
        //appendFileText(serverPath+"/Eval Log.txt","\n expression failed: "+expression+"  -  "+e);
        LogError(e);
        exprVal='';
      }
    }
    aStr = aStr.replace(exprStr,exprVal);
  }
  return aStr;
}  

/**
 *@event      fileDataUpload.
 *@dated      01 SEPT 2010
 *@author     naresh
 *@desc       Uploads data from specified file to database
 *@param      paramdata - object 
 *@return	  Returns operation status message						  
**/
function fileDataUpload(jndi,uplfile,upltable,uplid,datefmt,userid)
{
// appendFileText(serverPath+"/log/UploadLog","\n ::::::::::::::::::::::: fileDataUpload:::::::::::: "+jndi+" - "+uplfile+" - "+upltable+" - "+uplid+" - "+datefmt+" - "+userid);	
	if(!uplfile ||!upltable ||!uplid)
    return '{"status":"unsuccess","msg":"","error":"Upload File/Table/ID cannot can be blank."}';
  var con=null;  
  try
  {
  	con = getConnection();
	var fresult=fupl.csvFileUpload(con,uplfile,upltable,uplid,datefmt,userid);	
	return fresult;
}
  catch(error)
  {
    return '{"status":"unsuccess","msg":"","error":"'+error+'"}';
  }
  finally
  {
   if(con!=null)
   {
    con.close();
    con=null;    
   } 
  }        
}

/**
 *@event      delimitedFileWithOutHeaders.
 *@dated      15-08-2012
 *@author     Kruti
 *@desc       Uploads Fixed Length File
 *@param      paramdata - object 
 *@return	  Returns upload status 
**/
//(jndiname,fname,tname,uid,datefmt,userid,xmlFile,uplFile,delimiter,qualifier);
function delimitedFileWithOutHeaders(upltable,uplid,datefmt,userid,xmlFile,uplfile,delimiter,qualifier)
{
	if(!uplfile ||!upltable ||!uplid)
    return '{"status":"unsuccess","msg":"","error":"Upload File/Table/ID cannot can be blank."}';
  
  var con =null;  
  try
  {
  	con = getConnection();
  	var fresult=fupl.uploadDelimitedFileWithOutHeaders(con,uplfile,upltable,uplid,datefmt,userid,xmlFile,uplfile,delimiter,qualifier);	
  	//appendFileText(serverPath+"/Kruti.txt","\n resObject::"+fresult);
  	return fresult;
  }
  catch(error)
  {
    return '{"status":"unsuccess","msg":"","error":"Exception occurred.'+error+'"}';    
  }
  finally
  {
    if(con!=null)
    {
      con.close();
      con=null;
    }
  }
}
/**
 *@event      fixedLengthFileUpload.
 *@dated      15-08-2012
 *@author     Kruti
 *@desc       Uploads Fixed Length File
 *@param      paramdata - object 
 *@return	  Returns upload status 
**/

function fixedLengthFileUpload(	upltable,uplid,datefmt,userid,xmlFile,uplfile)
{
	if(!uplfile ||!upltable ||!uplid)
    return '{"status":"unsuccess","msg":"","error":"Upload File/Table/ID cannot can be blank."}';

  var con =null;
  try
  {
  	con = getConnection();
  	//appendFileText(serverPath+"/log/bonds.txt","\n fresult "+con+" * "+uplfile+" * "+upltable+" * "+uplid+" * "+datefmt+" * "+userid+" * "+xmlFile+" * "+uplfile);
  	var fresult=fupl.uploadFixedLengthFile(con,uplfile,upltable,uplid,datefmt,userid,xmlFile,uplfile);	
  	//appendFileText(serverPath+"/log/bonds.txt","\n fresult "+fresult);
  	return fresult;
  }
  catch(error)
  {
    return '{"status":"unsuccess","msg":"","error":"Exception occurred.'+error+'"}';
  }
  finally
  {
    if(con!=null)
    {
      con.close()
      con=null;
    }
  }
}



/**
 *@event      irpt.setParamList.
 *@dated      14 MAR 2011
 *@author     naresh
 *@desc       retrivies parameters against selected report from the configured parameter table
**/
irpt.setParamList = function(srno)
{ 
 var cond=" 1=2 ";
 
 var vParamTab = "iwz_parameter";
 var vSQL = "select * from iwz_parameter where paramname = 'Product Parameter Table' ";
 vSQL = SQLResultset(vSQL);
 if(vSQL.recordcount >0 )
    vParamTab = vSQL.fieldbyname("paramvalue"); 
 
 if(reportObj.dataset.fieldbyname('parameter'))
    cond=" srno in ("+reportObj.dataset.fieldbyname('parameter')+") ";
 
	var vSQL= "select paramname,paramvalue from "+vParamTab+" where "+cond+" ";
	jsp_ParamData.paramlist = SQLResultset(vSQL);	
}

irpt.getReportsParam = function(paramObj)
{
  v_whereClause = getTabWhereClause(paramObj);
  return v_whereClause;
}


function updatePass()
{
  var JString = iwebz.getParameter("JString");
//   appendFileText(serverPath+"/ChangePassword.txt","\n JString ::::::: "+JString);
	JString = decodeEscapeCharacters(JString);
// 	appendFileText(serverPath+"/ChangePassword.txt","\n JString ::::::: "+JString);
	var paramdata = eval('(' + JString + ')');  
// 	appendFileText(serverPath+"/ChangePassword.txt","\n paramdata ::::::: "+paramdata);
	return updatePassword();
	
}
function getPasswordParameters1()
{ 
	var vObj={};
	var myPasswordParameters="select paramname,paramvalue from iwz_parameter where paramname in ('bshouldalphanumeric','bshouldcapitalize','minpasswordlength','maxpasswordlength','allowsspecialchr','matchpassworduserid','limitlength','checkpasswordhistory','passwordhistorycount','expiry_days','checkdateexist','checkconsecutivechar','shouldcontain1lowcaselet') ";
	myPasswordParameters=SQLResultset(myPasswordParameters);
	for(i=0;i<myPasswordParameters.recordcount;i++)
	{
		vObj[myPasswordParameters.data[i][0]]=myPasswordParameters.data[i][1];
	}
	  var myObject={};
		for (key in vObj)
		{
  		iwebz.PasswordParameters[key]=vObj[key];
		}	
 	return JSON.stringify(iwebz.PasswordParameters);
}

function checkOldPasswords()
{
    var passwordhistorycount=iwebz.getParameter("passwordhistorycount");	
    var userid=iwebz.getParameter("userid");
    var npassword=iwebz.getParameter("npassword");
    var vSQL="SELECT * FROM (SELECT * FROM (SELECT password FROM audit_iwz_user_master u WHERE user_id='"+_encode(userid)+"' AND lower(SYS_AUDITREASON)='password change' ORDER BY SYS_AUDITDATE DESC) WHERE ROWNUM<='"+_encode(passwordhistorycount)+"') WHERE password='"+npassword+"'";
//     appendFileText(serverPath+"/log/LoginTrace.txt","\n vSQL: "+vSQL);		
    vSQL=SQL(vSQL);
    return vSQL;
}

function getPasswordConfigurations()
{
myPasswordParameters=getPasswordParameters1();
// appendFileText(serverPath+"/log/pass_param.txt","\n myPasswordParameters : "+myPasswordParameters);
iwebz.PasswordParameters=eval('('+myPasswordParameters+')');
	var Str=""	;
	
	if(iwebz.PasswordParameters.allowsspecialchr.toLowerCase()=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password must have atleast 1 special character.</li>";
	if(iwebz.PasswordParameters.matchpassworduserid=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password must not contain your user id.</li>	";
 	
	if(iwebz.PasswordParameters.bshouldcapitalize.toLowerCase()=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password must have atleast 1 capital alphabet.</li>	";

 	if(iwebz.PasswordParameters.shouldcontain1lowcaselet.toLowerCase()=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password must have atleast 1 lower case alphabet.</li>	";

 	if(iwebz.PasswordParameters.checkdateexist.toLowerCase()=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password shouldn't  contain date aspect.</li>	";

 	if(iwebz.PasswordParameters.checkconsecutivechar.toLowerCase()=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password shouldn't  contain consecutive character.</li>	";
 
	if(iwebz.PasswordParameters.bshouldalphanumeric.toLowerCase()=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password must be alphanumeric.</li>	";
 
	if(iwebz.PasswordParameters.checkpasswordhistory.toLowerCase()=="true")
 		Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password must not match with your "+iwebz.PasswordParameters.passwordhistorycount+" old passwords .</li>	";
 
	if(iwebz.PasswordParameters.limitlength.toLowerCase()=="true")
	 	Str=Str+"<li class='dynamicform1' style='margin-left:30px;font-size:12px;font-weight:normal;text-align:left' type=disc > Password should be greater than "+iwebz.PasswordParameters.minpasswordlength+"  characters <br>and less than "+iwebz.PasswordParameters.maxpasswordlength+" characters.</li>	";
		
  if(Str.trim()=="")
    return ""
  else  	
	 return "<ul>"+Str+"</ul>";
}

function CallFunc(entryid)
{
	entryid = parseInt(entryid);
	entryid = entryid%2;
	if(CallFunc==0)
		return "success";
	return "unsuccess";	
}


function isEmptyObject(vObj)
{
	var pObj = vObj;
	for(var i in pObj)
	{return false;}
	return true;
}


/**
 *@event      iWebZ.onValidateDBParam
 *@desc       validates database tables
 *@author     Mohini
 *@dated      09-11-2011
 *@return     
**/
iwebz.onValidateDBParam=function()
{
	var dbuser="";
	var vSQL="SELECT sys_context('USERENV','CURRENT_SCHEMA') schema_name FROM DUAL";
	vSQL=SQLResultset(vSQL);
	if(vSQL.recordcount==0)
		return '{status:"unsuccess",msg:"Schema name not found"}'; 
	else
		dbuser=vSQL.fieldbyname('schema_name');	

	if(dbuser=="")
		return '{status:"unsuccess",msg:"Schema name not found"}'; 		
		
	var proc_obj = new Object();
	var status=''; 
	var status_obj={};
  	proc_obj.proc_name="IWZ_PROC_CHK_FRMWRK_DB";
  	proc_obj.proc_params = new Array();
 	proc_obj.proc_params[0] =getServerDate();
 	proc_obj.proc_params[1] = dbuser;
	proc_obj.proc_outparams=2;
	
 	status = execProc(proc_obj);
 	//appendFileText(serverPath+"/log/mohini.txt","\n end time : "+status);		
 	status_obj = eval("(" +status+")");
	if(status_obj.status == "success")
	{ 
		if(status_obj.OUT1=="SUCCESS")
			return '{status:"success",msg:"Validation completed.Please check the log details"}'; 
		else 
			return '{status:"unsuccess",msg:"","error":"'+status_obj.OUT2+'"}'; 	
	}
	else
		return '{status:"unsuccess",error:"'+status_obj.error+'"}';    
			
}

function renameFile(vsrcfile,vdestfile)
{
	 var objFileWrite = new java.io.File(vsrcfile);
     if(!objFileWrite.exists())	
        {
	         return "{status:'success',msg:'File Not Found: "+vFilePath+"'}";   
	     }
        
	return rmFile.renameFile(vsrcfile,vdestfile);
}


/**
 *@event      startProcess_old.
 *@desc       server side function to start a process and for monitoring it's progress
 *@author     Durgesh
 *@param	  Process Name
 *@dated      24 Jan 2012
**/
function startProcess_old(process,subprocesscount)
{
	if(!process)
		return {"status":"unsuccess","error":"Invalid parameters in function iwebz.startProcess","msg":""};
    
  subprocesscount=subprocesscount||1;  
	var vSQL = new Array();
	//removeFile(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".txt")
  //Changes done by vikas as remove takes longer time
  // appendFileText(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".txt","",true)
	//vSQL[vSQL.length] = " delete from iwz_process_progress where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' and trunc(startdate) = to_date('"+getServerDate()+"','"+iwebz.globalDateFormat+"') ; ";
  vSQL[vSQL.length] = " delete from iwz_process_progress where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"'; ";
	vSQL[vSQL.length] = " insert into iwz_process_progress (total, SUCCESS, ERRORS,SESSIONID,PROCESS,STARTDATE,STARTEDBY ) values ('0','0','0','"+_encode(userObj.sessionid)+"' ,'"+_encode(process)+"',sysdate,'"+_encode(userObj.userid)+"'); " ;
	//vSQL[vSQL.length] = " delete from iwz_process_log where sessionid = '"+_encode(userObj.sessionid)+"' and process = '"+_encode(process)+"'  and trunc(logdate) = to_date('"+getServerDate()+"','"+iwebz.globalDateFormat+"') ; ";
  vSQL[vSQL.length] = " delete from iwz_process_log where sessionid = '"+_encode(userObj.sessionid)+"' and process = '"+_encode(process)+"' ; ";
	vSQL = "Begin "+vSQL.join(" ")+" End ;";
	vSQL =execSQLResultset(vSQL);
	// appendFileText(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".htm","",true);	
	//appendFileText(serverPath+"/Process.txt","\n vSQL  :::: "+JSON.stringify(vSQL)); 
	return ;
}

/**
 *@event      startSubProcess.
 *@desc       Start sub process
 *@author     Mohini
 *@dated      10-11-2012 5:26:21 PM
 *@param      processname{String} - Process Name
 *@param      desc{String} - Sub Process Description
 *@param      totalcount{number} - Total record count
 *@return     Return Data Desc
 **/
function startSubProcess(processname,desc,totalcount)
{
  if(!processname)
    return {"status":"unsuccess","error":"Process name not found.","msg":""};
  var logmsg=""
  totalcount=totalcount||"0";
  
  var vSQL="SELECT sub_process,to_char(subprocess_starttime,'"+iwebz.globalDateTimeFormat+"') subprocess_starttime ,total,success,errors FROM iwz_process_progress WHERE SESSIONID='"+ userObj.sessionid+"' and PROCESS='"+ _encode(processname)+"' and startedby ='"+userObj.userid+"'";
  vSQL=SQLResultset(vSQL);
  if(vSQL.recordcount!=0)
  {
    //logmsg= desc +" started at "+vSQL.data[0][1]+" with total count : "+vSQL.data[0][2]+" , error count : "+vSQL.data[0][4]+" , success count : "+vSQL.data[0][3]+".";
    logmsg= "<b>"+vSQL.data[0][1]+"</b> [Start "+desc+"] :  <b>Total</b> : "+totalcount;    
    logProcessDetail(processname,1,logmsg);
  }
  var updQry="update iwz_process_progress set total= '"+totalcount+"' ,SUCCESS='0',ERRORS='0',sub_process='"+desc+"',subprocess_starttime=sysdate where SESSIONID='"+ userObj.sessionid+"' and PROCESS='"+ _encode(processname)+"' and startedby ='"+userObj.userid+"'";
  updQry=execSQLResultset(updQry);
  return;
}


/**
 *@event      endSubProcess.
 *@desc       End the sub process
 *@author     Mohini
 *@dated      12-11-2012 12:44:33 PM
 *@param      process{String} - Process Name 
 *@param      subprocess{String} - Sub Process Name
 *@return     Return Data Desc
**/
function endSubProcess(process)
{ 
  var vSQL="SELECT sub_process,total,success,errors FROM iwz_process_progress WHERE SESSIONID='"+ userObj.sessionid+"' and PROCESS='"+ _encode(process)+"' and startedby ='"+userObj.userid+"'";
  vSQL=SQLResultset(vSQL);
  if(vSQL.recordcount!=0 && vSQL.data[0][0]!="")
  {
//    var logmsg=vSQL.data[0][0]+" ended at "+getServerDateTime()+" with total count : "+vSQL.data[0][1]+" , error count : "+vSQL.data[0][3]+" , success count : "+vSQL.data[0][2]+".";
      var logmsg="<b>"+getServerDateTime()+"</b> [End "+vSQL.data[0][0]+"]: <b>Error</b> : "+vSQL.data[0][3]+" , <b>Success</b> : "+vSQL.data[0][2]+".<br>";
    logProcessDetail(process,1,logmsg);
  }
  vSQL="update iwz_process_progress set subprocess_completed=(nvl(subprocess_completed,0)+1) where SESSIONID='"+ userObj.sessionid+"' and PROCESS='"+ _encode(process)+"' and startedby ='"+userObj.userid+"'"
//  appendFileText(serverPath+"/log/mohini.txt","\n vSQL : "+vSQL);
  vSQL=execSQLResultset(vSQL);
  return;
}


/**
 *@event      incrProcessParam.
 *@desc       server side function to increment a process parameter
 *@author     Durgesh
 *@param	  ProcessName,paramname,increment by (number)
 *@dated      24 Jan 2012
**/
function incrProcessParam(process,paramname,incrby)
{
	//appendFileText(serverPath+"/Process.txt","\n Inside incrProcessParam :::: ");	
	if(!process || !paramname || !incrby)
		return {"status":"unsuccess","error":"Invalid parameters in function iwebz.incrProcessParam","msg":""};
	var vSQL = " update  iwz_process_progress set "+paramname+" = nvl("+_encode(paramname)+",0) + "+incrby+"  where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+ _encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' ";
	
	vSQL = execSQLResultset(vSQL);
	return ;
		
}

/**
 *@event      logProcessDetail.
 *@desc       server side function to log process details in process log table
 *@author     Durgesh
 *@param	  ProcessName,srno,error descr
 *@dated      24 Jan 2012
**/
function logProcessDetail(process,srno,descr)
{
	//appendFileText(serverPath+"/Process.txt","\n Inside logProcessDetail :::: ");
	//appendFileText(serverPath+"/Process.txt","\n process :::: "+process);	
	//appendFileText(serverPath+"/Process.txt","\n srno :::: "+srno);	
	//appendFileText(serverPath+"/Process.txt","\n descr :::: "+descr);	
// 	if(!process || !srno || !descr)	
// 		return {"status":"unsuccess","error":"Invalid parameters in function iwebz.logProcessDetail"};
		
	var vSQL = " insert into iwz_process_log(sessionid,srno ,description,PROCESS ) values ('"+_encode(userObj.sessionid)+"','"+_encode(srno)+"','"+_encode(descr)+"','"+_encode(process)+"') ";	
	//appendFileText(serverPath+"/log/Process"+userObj.userid+".txt","\n before vSQL  qry :::: "+process + "   " +vSQL);	
	 appendFileText(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".htm","<br>"+descr);	
	vSQL = execSQL(vSQL);
	//appendFileText(serverPath+"/log/Process"+userObj.userid+".txt","\n  after vSQL :::: "+process + "   " +vSQL);	
	//appendFileText(serverPath+"/Process.txt","\n vSQL  :::: "+JSON.stringify(vSQL)); 
	return ;	
}

/**
 *@event      endProcess.
 *@desc       server side function to end the ongoing process
 *@author     Durgesh
 *@param	  ProcessName
 *@dated      24 Jan 2012
**/
function endProcess_old(process)
{
  //Changed by vikas - removed start date where clause as if the processs runs over nite it wont work	
	if(!process)
		return {"status":"unsuccess","error":"Invalid parameters in function iwebz.endProcess","msg":""};
	var vSQL = " update  iwz_process_progress set ENDDATE= sysdate where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' ";	
	vSQL = execSQLResultset(vSQL);
	var setBData = setBlobText('iwz_process_progress','process_details',getFileText(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".htm") ," and SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' ")
	
	//setBData = getBlobData('iwz_process_progress','process_details',(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".htm") ," and SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"'")
	return ;
}


/**
 *@event      getProcessStatus.
 *@desc       server side function get the status of the ongoing process
 *@author     Durgesh
 *@param	  ProcessName
 *@dated      24 Jan 2012
**/
function getProcessStatus()
{
	var vProcess = "";
	vProcess = iwebz.getParameter("process");
//	appendFileText(serverPath+"/Process.txt","\n Inside getProcessStatus :::: "+vProcess);	

//	var vSQL = "SELECT sessionid, process, total, success, errors, startdate, enddate, startedby, decode(ENDDATE,null,'R','C') stat,Decode(floor((nvl(enddate,sysdate)-startdate)*24),0,'',(floor((nvl(enddate,sysdate)-startdate)*24)||' hrs ')) || mod(floor((nvl(enddate,sysdate)-startdate)*24*60),60) || ' min ' || mod(floor((nvl(enddate,sysdate)-startdate)*24*60*60),60) || ' secs ' time_ellapsed FROM iwz_process_progress where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(vProcess)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' and trunc(startdate) = to_date('"+getServerDate()+"','"+iwebz.globalDateFormat+"') "
	var vSQL = "SELECT sessionid, process, total, success, errors, startdate, enddate, startedby, decode(ENDDATE,null,'R','C') stat,Decode(floor((nvl(enddate,sysdate)-startdate)*24),0,'',(floor((nvl(enddate,sysdate)-startdate)*24)||' hrs ')) || mod(floor((nvl(enddate,sysdate)-startdate)*24*60),60) || ' min ' || mod(floor((nvl(enddate,sysdate)-startdate)*24*60*60),60) || ' secs ' time_ellapsed,sub_process,Decode(floor((nvl(enddate,sysdate)-subprocess_starttime)*24),0,'',(floor((nvl(enddate,sysdate)-subprocess_starttime)*24)||' hrs ')) || mod(floor((nvl(enddate,sysdate)-subprocess_starttime)*24*60),60) || ' min ' || mod(floor((nvl(enddate,sysdate)-subprocess_starttime)*24*60*60),60) || ' secs ' sp_time_ellapsed,total_no_of_subprocess,subprocess_completed FROM iwz_process_progress where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(vProcess)+"' and STARTEDBY = '"+_encode(userObj.userid)+"'"
	vSQL = SQLResultset(vSQL);
 	if(vSQL.recordcount==0)
 		return '{"status":"unsuccess","error":"Records are not updated.","msg":"Records are not updated."}'
 	var retObj= {};	
 	retObj.out={}
 	vSQL.recordno=0;
	retObj.out[vProcess+"_FAIL_COUNT"]=vSQL.fieldbyname("errors")
	retObj.out[vProcess+"_SUCCESS_COUNT"]=vSQL.fieldbyname("success")
	retObj.out[vProcess+"_TOTAL_COUNT"]=vSQL.fieldbyname("total")
	retObj.out[vProcess+"_STAT"]=vSQL.fieldbyname("stat")
  retObj.out[vProcess+"_ELAPSED_TIME"]=vSQL.fieldbyname("time_ellapsed")
  retObj.out[vProcess+"_SUB_PROCESS"]=vSQL.fieldbyname("sub_process")
  retObj.out[vProcess+"_TOTAL_NO_OF_SUBPROCESS"]=vSQL.fieldbyname("total_no_of_subprocess")
  retObj.out[vProcess+"_SUBPROCESS_COMPLETED"]=vSQL.fieldbyname("subprocess_completed")
  retObj.out[vProcess+"_SUBPROCESS_ELAPSED_TIME"]=vSQL.fieldbyname("sp_time_ellapsed")
	retObj.status="success"
	retObj.msg="success"
	retObj.error="success"
  if(vSQL.fieldbyname("stat")=="C")
  {
    vSQL = "Delete from iwz_process_progress where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(vProcess)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' ";
    vSQL=execSQLResultset(vSQL);
  }
	//appendFileText(serverPath+"/Process.txt","\n JSON.stringify(retObj) :::: "+JSON.stringify(retObj));	
	return JSON.stringify(retObj);
}



/**
 *@event      showProcessDetails.
 *@desc       server side function get details logged for the ongoing process
 *@author     Durgesh
 *@param	  ProcessName
 *@dated      24 Jan 2012
**/
function showProcessDetails()
{
	//appendFileText(serverPath+"/Process.txt","\n Inside showProcessDetails :::: ");	
 var vProcess = "";	
 vProcess = iwebz.getParameter("process");
 var msg = []
 var vSQL=" SELECT description FROM iwz_process_log WHERE sessionid='"+_encode(userObj.sessionid)+"' and process='"+_encode(vProcess)+"'  and trunc(logdate) = '"+getServerDate()+"' ORDER BY srno "
 //appendFileText(serverPath+"/Process.txt","\n vSQL :::: "+vSQL);	
 vSQL=SQLResultset(vSQL)
 for ( var indx = 0 ; indx<vSQL.recordcount;indx++)
		msg[msg.length]=vSQL.data[indx][0]
//appendFileText(serverPath+"/Process.txt","\n msg :::: "+msg.join("<br>"));			
 return '{"status":"unsuccess",msg:"'+msg.join("<br>")+'",error:""}'
}

/**
 *@event      ifwk.checkScrValid.
 *@desc       execute the validaions
 *@author     Mohini
 *@dated      02/03/2012 19:05:41
 *@return     status
**/
iwebz.isScrValid=function()
{
	JString= iwebz.getParameter("JString");		
	try
	{
// 		appendFileText(serverPath+"/log/custom_validation.txt","\nJString" +JString);
		JString=eval('('+JString+')');
		var response=iwebz.checkScrValid(JString);  
// 		appendFileText(serverPath+"/log/custom_validation.txt","\nAfter validation " +response);
		return response;
	}
	catch(error)
	{
		//appendFileText(serverPath+"/log/custom_validation.txt","\nIn catch" +error);
		LogError(e);
		return '{"status":"unsuccess","msg":"","error":"'+error+'"}'
	}
}

/**
 *@event      ifwk.checkScrValid.
 *@desc       Execute all the screen validations
 *@author     Mohini
 *@dated      02/03/2012 19:06:37
 *@param      JString{Object} -{scr_ref:"client.htm",action:"beforesave:add",paramdata:{}}
 *@validation 
              *execute each function one by one and store the error msg if unsuccess
 *@return     status(String)
 **/
iwebz.checkScrValid=function(JString)
{
	var val_qry="";
	var response="";
	var err_msg=[];
	JString.scr_ref=JString.scr_ref||"";
	JString.action=JString.action||"";
	JString.paramdata=JString.paramdata||{};
	if(JString.scr_ref=="" || JString.action=="" || !JString.paramdata)
		return '{"status":"unsuccess","msg":"","error":"Parameters not found."}'
		
	val_qry="SELECT * FROM iwz_scrvalidations WHERE scr_ref='"+_encode(JString.scr_ref)+"' AND event='"+_encode(JString.action)+"'";
// 	appendFileText(serverPath+"/log/custom_validation.txt","\nval_qry" +val_qry);
	
	val_qry=SQLResultset(val_qry);
// 	appendFileText(serverPath+"/log/custom_validation.txt","\nval_qry response" +JSON.stringify(val_qry));
	if(val_qry.recordcount==0)
		return '{"status":"success","msg":""}'		
	else
	{
		var temp=JSON.stringify(JString.paramdata);
		for(var i=0,len=val_qry.recordcount;i<len;i++)
		{
			val_qry.recordno=i;
			try
			{
// 				appendFileText(serverPath+"/log/custom_validation.txt","\nretrive function name"+val_qry.fieldbyname('func'));
				response=eval(val_qry.fieldbyname('func')+"("+temp+")");
				if(response.status=="unsuccess")
					err_msg[err_msg.length]=""+response.error;	
			}
			catch(error)
			{
				err_msg[err_msg.length]=""+error;	
			}
		}
// 		appendFileText(serverPath+"/log/custom_validation.txt","\nerr_msg" +err_msg.join("\n"));
		if(err_msg.length==0)
			return '{"status":"success","msg":"","error":""}'
		else	
			return '{"status":"unsuccess","msg":"","error":"'+err_msg.join("<br>")+'"}'		
	}		
}

/**
 *@event      iwebz.getDescriptionDetls.
 *@desc       get the detailed description 
 *@author     Mohini
 *@dated      12/03/2012 18:02:39
 *@return     status(String) -- 
 **/
iwebz.getDescriptionDetls=function()
{
  try
  {
    var JString = iwebz.getParameter("JString");
    JString=eval('('+JString+')')
    JString.desc_type=JString.desc_type||'';
    JString.paramdata=JString.paramdata||{};
    var vSQL="SELECT * FROM iwz_description_details where lower(desc_type) ='"+_encode(JString.desc_type.toLowerCase())+"'";
	vSQL=SQLResultset(vSQL);
    if(vSQL.recordcount==0)
      return "Detail type not configured.";
    else
    {
      if(vSQL.fieldbyname('datafunc')=="")
          return "Unable to retrieve datafunc."
      if(vSQL.fieldbyname('html_path')=="")
        return "Data template not configured."
        //appendFileText(serverPath+"/screenconfig.txt","\n 1 "+JSON.stringify(JString.paramdata));
      //data function from which values ll be taken to set in the html file
      iwebz.det_data=eval(vSQL.fieldbyname('datafunc')+"("+JSON.stringify(JString.paramdata)+")");
      //appendFileText(serverPath+"/screenconfig.txt","\n 2 "+iwebz.det_data);
	  if(!iwebz.det_data)
        return "No data found."
      if(iwebz.det_data.recordcount==0)
        return "No data found."
      else 
     	  return getFileText(serverPath+"/"+vSQL.fieldbyname('html_path'));
    }
  }
  catch(error)
  {
	 LogError(error);
    return "Error in evaluating datafunc.";
  }    
}

/**
 *@event      getDescFieldData.
 *@desc       get the data from resultset
 *@author     Mohini
 *@dated      12/03/2012 18:40:04
 *@param      fldname{String} - name of the field to be retrived
 *@return     return data of the field 
 **/
function getDescFieldData(fldname)
{	
  	return ""+iwebz.det_data.fieldbyname(fldname);
}

/**
 *@event      iWebZ.lookupArray
 *@desc       Function Description
 *@author      
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description  
 *@return     Return Data Desc
 **/
iwebz.lookupArray=function(v,a)
{
  if(!a)
  {return v;}
  for(var i = 0 ; i < a.length; i++)
  {
    if(a[i][0]==v)
    {
      return a[i][1];
    }
  }
  return 
    v;
}


/**
 *@event      iwebz.wipeObjectProp
 *@desc       function to delete all the properties of an object
 *@author     Durgesh 
 *@param      Object (o)
 *@dated      29-03-2012
 *@return     Empty object
 **/
iwebz.wipeObjectProp=function(o)
{
	if(!o)
		return {"status":"unsuccess","error":"Invalid parameters in function iwebz.wipeObjectProp","msg":""};
		
	for (var key in o)
	{
		if (o.hasOwnProperty(key))
			delete o[key];
	}	
	return {"status":"success","error":"","msg":o};
}
/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     Mohini
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function getQrtzJNDIName()
{
  var ind1=jndiName.indexOf("/");
  var qrtz_jndi_name=(jndiName.substring(ind1+1)+"").trim();
  return qrtz_jndi_name;
}

function addQrtzJob(exeClass,dsXName,jobName,jobGroup,trgName,tgrGroup,cronExpr,funcName,funcParams)
{
  try
  {
      var QJNDIName=getQrtzJNDIName()
    	var hm = new java.util.HashMap();
//     	appendFileText(serverPath+"/log/Job.txt","\n Add data to hashmap");
    	hm.put("exeClass",new String(exeClass));
    	hm.put("dsXName",QJNDIName);
    	hm.put("jobName",new String(jobName));
    	hm.put("jobGroup",new String(jobGroup));
    	hm.put("trgName",new String(trgName));
    	hm.put("tgrGroup",new String(tgrGroup));
    	hm.put("cronExpr",new String(cronExpr));
    	hm.put("funcName",new String(funcName));
    	hm.put("funcParams",new String(funcParams));
    	hm.put("ignore_misfire",new String("true"));
    	
//     	appendFileText(serverPath+"/log/Job.txt","\n before calling addQrtzCronJob");
    	var response = qrtz.addQrtzCronJob(hm);
//     	appendFileText(serverPath+"/log/Job.txt","\n before callIng addQrtzCronJob");
//     	appendFileText(serverPath+"/log/Job.txt","\n Add Job Response: "+response );
    	return response.toString()
  }
  catch(error)
  {
	LogError(error);
    return error;  
  }
  
}
function  reShedQrtzJob(exeClass,dsXName,jobName,jobGroup,trgName,tgrGroup,cronExpr)
{
	var hm = new java.util.HashMap();
	var QJNDIName=getQrtzJNDIName()	
	hm.put("exeClass",new String(exeClass));
	hm.put("dsXName",QJNDIName);
	hm.put("jobName",new String(jobName));
	hm.put("jobGroup",new String(jobGroup));
	hm.put("trgName",new String(trgName));
	hm.put("tgrGroup",new String(tgrGroup));
	hm.put("cronExpr",new String(cronExpr));
  hm.put("ignore_misfire",new String("true"));		
	return qrtz.reScheduleQrtzCronJob(hm);
}
function  removeQrtzJob(dsXName,jobName,jobGroup)
{
  var QJNDIName=getQrtzJNDIName();
	return  qrtz.deleteQrtzCronJob(QJNDIName,jobName,jobGroup);
}


/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.onAddJob=function()
{
  try
  {
    var QJNDIName=getQrtzJNDIName();
   	var job_response = addQrtzJob("custom.classes.Executor",QJNDIName,"impljob2","implgroup2","impltrigger2","impltriggergroup2","0 0 21 1/1 * ? *","rep_sch.executeJob","J002");
   	return job_response; 
  }
  catch(error)
  {
	  LogError(error);
//     appendFileText(serverPath+"/log/Job.txt","\n Error: "+error);
    return error.toString();
  }
}
/**
 *@event      iwebz.onJobModify.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.onJobModify=function()
{
  var action = iwebz.getParameter("action");
  var JString = iwebz.getParameter("JString");
  var QJNDIName=getQrtzJNDIName();
  var job_name=''
  var job_group=''
  var job_response=''
  try
  {
    JString =eval('('+JString +')');
    job_name=JString.data[0][0];
    job_group=JString.data[0][1];
    
    if(action=="pause")
       job_response = qrtz.pauseQrtzCronJob(QJNDIName,job_name,job_group);
    else if(action=="resume")
	     job_response = qrtz.resumeQrtzCronJob(QJNDIName,job_name,job_group);
    else if(action=="remove")
       job_response=iwebz.deleteJob(JString);
       
   return job_response ;    
  }
  catch(error)
  {
    return '{"status":"unsuccess","error":"'+error+'","msg":""}'    
  }
}

/**
 *@event      iwebz.deleteJob.
 *@desc       Delete the job 
 *@author     Mohini
 *@dated      03/05/2012
 *@param      JString{String} - param Description
 *@return     return status
 **/
iwebz.deleteJob=function(JString)
{
  var vSQL=""
  if(JString.data[0][2]=="A")
  {
    var QJNDIName=getQrtzJNDIName();
    var job_response = removeQrtzJob(QJNDIName,JString.data[0][0],JString.data[0][1]);
  job_response=eval('('+job_response +')')
  if(job_response.status=="success")
      return iwebz.deleteJobDetails(JString.data[0][0]);
    else
      return '{"status":"unsuccess","msg":"","error":"'+job_response.error+'"}'    
  }
  else
    return iwebz.deleteJobDetails(JString.data[0][0]);
}

/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     Mohini
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.deleteJobDetails=function(jobcode)
  {
  vSQL="begin DELETE FROM iwz_job_details WHERE jobcode='"+_encode(jobcode)+"';Delete from iwz_job_seq_table where jobcode='"+_encode(jobcode)+"';end;";
    vSQL=execSQLResultset(vSQL);
    if(vSQL.status=="success")
      return '{"status":"success","msg":"Job deleted successfully.","error":""}'    
    else
      return '{"status":"unsuccess","msg":"","error":"'+vSQL.error+'"}'    
  }

/**
 *@event      iwebz.onRescheduleJob.
 *@desc       Reschedule jobs 
 *@author     Mohini
 *@dated      26/04/2012
 *@return     status (String)
 **/
iwebz.onRescheduleJob=function()
{
  var QJNDIName=getQrtzJNDIName();
  var cronExpression = iwebz.getParameter("cronExpression");
  var JString = iwebz.getParameter("JString");
  var job_response='';
  try
  {
    job_response=iCron.isCronExpValid(cronExpression)
    if(job_response.status=="unsuccess")
      return '{"status":"unsuccess","error":"'+job_response.error+'","msg":""}'    
 
    JString =eval('('+JString +')');
  	job_response = reShedQrtzJob("custom.classes.Executor",QJNDIName,JString.data[0][0],JString.data[0][1],JString.data[0][2],JString.data[0][3],cronExpression);
//   	appendFileText(serverPath+"/log/reports.txt","\n job_response : "+job_response );
  	return job_response; 
  }
  catch(error)
  {
    return '{"status":"unsuccess","error":"'+error+'","msg":""}'    
  }
}

/**
 *@event      iwebz.onStartScheduler.
 *@desc       Function Description
 *@author     Mohini
 *@dated      26/04/2012
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.onStartScheduler=function()
{
  try
  {
      var QJNDIName=getQrtzJNDIName();
      var sch_response=qrtz.startQrtzSchedular(QJNDIName);
      return sch_response;
  }
  catch(error)
  {
    return '{"status":"unsuccess","error":"'+error+'","msg":""}'
  }
}

/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.onStopScheduler=function()
{
  try
  {
      var QJNDIName=getQrtzJNDIName();
      var sch_response=qrtz.standbyQrtzSchedular(QJNDIName)
      return sch_response;
  }
  catch(error)
  {
    return '{"status":"unsuccess","error":"'+error+'","msg":""}'
  }
}

/**
 *@event      iwebz.chkFileExists.
 *@desc       Check if file exists
 *@author     Mohini
 *@dated      02/04/2012
 *@file path   file path to check  
 *@return     boolean value
**/
iwebz.chkFileExists=function(vFilePath)
{
  try
  {
    var filepath = new java.io.File(vFilePath);
    if(!filepath.exists())	
    {
      return {status:'unsuccess',error:'File Not Found:',path:vFilePath};   
    }
    else
      return {status:'success',msg:'File present:',path:vFilePath};   
  }
  catch(error)
  {
      return {status:'unsuccess',error:'File not present:',path:vFilePath};   
  }
}

/**
 *@event      $rmht.
 *@desc       This Function removes all the HTML tag for a given string
 *@author     Hitesh H.Bhupta
 *@dated      29-09-2009
 *@param      colname(String) - column name string                  
 *@return     column name after elimating htm tags
 **/
function $rmht(colname)
{
 		var strInputCode = colname;
 		strInputCode = strInputCode.replace(/&(lt|gt);/g, function (strMatch, p1){
 		 	return (p1 == "lt")? "<" : ">";
 		});
 		var strTagStrippedText = strInputCode.replace(/<\/?[^>]+(>|$)/g, "");		
 		return strTagStrippedText; 
}

/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.getNextServerDate=function()
{
	var vSQL="select to_date('"+getServerDate()+"','"+iwebz.globalDateFormat+"') +1  next_date FROM dual"
	vSQL=SQLResultset(vSQL);
	if(vSQL.recordcount==0)
		return ""
	else
		return vSQL.fieldbyname('next_date');		
}


/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.getPrevServerDate=function()
{
	var vSQL="select to_date('"+getServerDate()+"','"+iwebz.globalDateFormat+"') -1  prev_date FROM dual"
	vSQL=SQLResultset(vSQL);
	if(vSQL.recordcount==0)
		return ""
	else
		return vSQL.fieldbyname('prev_date');		
}


/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.getToday=function()
{
	return getServerDate();	
}

/**
 *@event      iwebz.getAutocompleteDataset.
 *@desc       get the dataset
 *@author     Mohini
 *@dated      23/05/2012
 *@return     SQL Store String
 **/
iwebz.getAutocompleteDataset=function()
{
  var JString=iwebz.getParameter("JString");
  var source=iwebz.getParameter("source");
  var SearchValue = iwebz.getParameter("q");
     
  try
  {
    JString=eval('('+JString+')');
    var mastertable=JString.mastertable||"";
    var codefield=JString.codefield||"";
    var namefield=JString.namefield||"";
    var maxitems=JString.maxitems||"30";
    var values=JString.field_val||""
    var s_event=JString.s_event||""
    var returntype=JString.returntype||"";

    JString.paramdata=iwebz.getParameter("paramdata");
    JString.searchValue=SearchValue;
    var obj=""

    var val_encode=[];
    var vSQL="";
    
    if(namefield==""||codefield=="")
      return "";
      
    if(s_event!="")
    {
    
	    if(returntype=="dataset")
	    {
			try
		    {
			    s_event="{handler:function(JString){return "+s_event+"(JString);}}";			    
			    s_event=eval('('+s_event+')');			    
				respObj=s_event.handler(JString);				
				return respObj;
		    }
		    catch(err)
		    {
			    //appendFileText(serverPath+"/log/webservice.txt","\n Error :: "+err);
			    return "[]";
		    }
	    }      
      else
      {
        try
        {
            JString.paramdata=eval('('+JString.paramdata+')');
            JString.paramdata._datalist=JString._datalist;
            JString.paramdata._source=source;
  					obj="{'handler':function(o){return "+s_event+"(o)}}";
  					obj= eval('('+obj+')');
  					s_event=obj.handler(JString.paramdata);
            vSQL="select distinct  "+ _encode(codefield)+" id,"+ _encode(namefield)+" name from( "+s_event+" ) where 1=1";
         
        }
        catch(error)
        {
  	      LogError(error);          
          vSQL="select distinct  "+ _encode(codefield)+" id,"+ _encode(namefield)+" name from "+ _encode(mastertable)+" where 1=1";
        }
      }
    }
    else
    {
       if(mastertable=="")
         return ""     
       vSQL="select distinct  "+codefield+" id,"+namefield+" name from "+mastertable+" where 1=1"; 
    }
    
    if(values!="")
    {
      //execute in case of modify to get the default values
      values=values.split(',')
      for(var i=0,len=values.length;i<len;i++)
        val_encode[val_encode.length]=_encode(values[i]);           
    
      val_encode=val_encode.join("','");
      val_encode="'"+val_encode+"'";
      
      vSQL="select distinct  id, name from ("+vSQL+") where id in ("+val_encode+")";
    }
    else
      vSQL="select distinct   id, name from ("+vSQL+") where lower(name) like lower('"+_encode(SearchValue)+"%') and rownum<='"+_encode(maxitems)+"'";                         
//     appendFileText(serverPath+"/log/autocomplete.txt","\n vSQL: "+vSQL); 
    vSQL=SQLStore(vSQL);
    vSQL=eval('('+vSQL+')');
    return JSON.stringify(vSQL.data);
  }
  catch(error)
  {
	  LogError(error);
//     appendFileText(serverPath+"/log/autocomplete.txt","\n [Autocomplete Exception] : "+error);      
    return "";
  }
}

/**
 *@event      _encode.
 *@desc       Encode the string (escape the special characters) 
 *@author     Mohini
 *@dated      26/05/2012
 *@param      str{String} - String to encode 
 *@return     Return Data Desc
 **/
function _encode(str)
{
  try
  {
    str=str+"";
    str=dcode(str)
	var _esapiutils = Java.type('custom.classes.EsapiUtils');
	var es = new _esapiutils();
	return es.encodeString(str);
	
  }
  catch(error)
  {
	  log.info("Exception :: "+error.toString());
	  LogError(error);
    	//appendFileText(serverPath+"/log/Encode_log.txt","\n  Encode Error : "+error);
    return "";   
  }
}  


/**
 *@event      _encodeJS.
 *@desc       Encode the string (escape the special characters) 
 *@author     Mohini
 *@dated      26/05/2012
 *@param      str{String} - String to encode 
 *@return     Return Data Desc
 **/
function _encodeJS(str)
{
  //appendFileText(serverPath+"/log/LoginTrace.txt","\n str: "+str);
  try
  {
    str=str||"";
    return org.owasp.esapi.ESAPI.encoder().encodeForJavaScript(str);  
  }
  catch(error)
  {
	  LogError(error);
//    	appendFileText(serverPath+"/log/Encode.txt","\n  Encode JS Error : "+error);
    return "";   
  }
}


/**
 *@event      dcode.
 *@desc       Decodes these four character !][!	// + --> ]!][	// - --> ![]! --> @ / + - @ --> ]![	// / 
 *@author     vikas
 *@dated      27--10-2009
 *@param      vString{String} - String to be decoded
 *@param      Param1{String} - param Description
 *@return     Return Data Desc
 **/
function dcode(vString)
{	
	var vTemp = (vString+"").replace("''","'","\g");
	return vTemp;
}

/**
 *@event      ecode.
 *@desc       encodes these four character @ / + - @ --> ]![	// / --> !][!	// + --> ]!][	// - --> ![]!
 *@author     vikas
 *@dated      27--10-2009
 *@param      vString{String} - String to be encoded
 *@param      Param1{String} - param Description
 *@return     Return Data Desc
 **/
function ecode(vString)
{	//Escape function does not encode these four character @ / + - @ --> ]![	// / --> !][!	// + --> ]!][	// - --> ![]!
	var vTemp = (vString+"").replace(/\'/gi,"''");
	return vTemp;
}

/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function updatePassword(paramdata)
{
	var resultStr="";
	var vuserid = paramdata.quserid;
	var vold = paramdata.qold;
	var vnew1 = paramdata.qnew1;
	
   var vSQL = "select * from iwz_user_master where user_id ='" + _encode(vuserid) + "' and password= '" + vold + "' and active='Y'";
   var userdata = SQLResultset(vSQL);
   var obj = {};
   if (userdata.recordcount != 0)
	{	
		var pSQL="UPDATE iwz_user_master SET password='"+vnew1+"',lastpwd_updated=sysdate,password_expire='N' WHERE user_id='"+_encode(vuserid)+"'";
		pSQL = execSQL(pSQL);
		var vSQL = "insert into iwz_login_log (user_id,login_date,IP,failed) values('" + _encode(vuserid) + "',sysdate,'"+_encode(request.getRemoteAddr())+"','')";
 	    var adataset = execSQLResultset(vSQL);
 	    obj.tab="iwz_user_master";
 	    obj.opr="modify";
 	    obj.res="password change"; 
 	    obj.user=vuserid;
 	    obj.sqlwhr="user_id='"+vuserid+"'";
 	    obj.issql=false;
 	     makeAudit(obj);
		resultStr = "{passval:1}";
		return resultStr;
	}
	resultStr = "{passval:2}";
	return resultStr;
}


/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function changeUserPassword()
{
  var JString = iwebz.getParameter("JString");
  var response='';
  try
  {
       
      JString=eval('('+JString+')');
      response=validateOldNewPass(JString)
      if(response.status=="unsuccess")
        return '{passval:"'+response.passval+'",error:"'+response.error+'"}'
      else
      {
        // response=validatePwdComposition(JString.qnew1,userObj.user_id)
        // if(response.status=="unsuccess")
          // return '{passval:"'+response.passval+'",error:"'+response.error+'"}'
        // else
        // {
           return updatePassword(JString);
        //}    
      }          
  }
  catch(error)
  {
      return '{passval:3,msg:"",error:"'+error+'"}'
  } 
}

/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function validateOldNewPass(JString)
{
  try
  {
    var vSQL = "select * from iwz_user_master where user_id ='" + _encode(userObj.user_id) + "' and password= '" + JString.qold + "' and active='Y'";
	// appendFileText(serverPath+"/log/changePass.txt","\n vSQL : "+vSQL);	
    var vSQL = SQLResultset(vSQL);
	//appendFileText(serverPath+"/log/changePass.txt","\n vSQL.recordcount : "+vSQL.recordcount);
    if(vSQL.recordcount==0)
    {
    		return {status:"unsuccess",error:"Please Check Old Password",passval:"2"};
    }       
  	// Ensuring that old and new Password are not same 
  	if(JString.qold==JString.qnew1)
  		return {status:"unsuccess",error:"New password should not be same as old password",passval:"3"};
  	
  	// 	Ensuring that new and confirm Password match 
  	if(JString.qnew1!=JString.qconfirm)
  		return {status:"unsuccess",error:"New Password doesnt match",passval:"3"};
  		
  	return {status:"success","msg":""}	
  }
  catch(error)
  {
    return {status:"unsuccess",msg:"",error:error,passval:"3"}
  } 
}

function getJobProgressData(vObj)
{
	var vSQL=[];
	var vValues = getTabWhereClause(vObj.paramdata);
	vValues = vValues + getFwkWhereClause(vObj.filter);
	var order_by=getTabSortColumn(vObj);
	vSQL[vSQL.length]="select * from (SELECT job.sched_name,job.JOB_NAME, job_det.paramvalue,job.JOB_GROUP, job.DESCRIPTION,IS_DURABLE,REQUESTS_RECOVERY, TRIGGER_NAME, TRIGGER_GROUP,";
  vSQL[vSQL.length]=" PREV_FIRE_TIME,NEXT_FIRE_TIME,  PRIORITY, TRIGGER_STATE, TRIGGER_TYPE, START_TIME, END_TIME, MISFIRE_INSTR,'A' Job_type,process_type,param_list,jdm.paramvalue delivery_method";
  vSQL[vSQL.length]="FROM qrtz_job_details job,qrtz_triggers trig,(SELECT jobcode,paramvalue FROM iwz_job_details WHERE paramname='_jobname') job_det";
  vSQL[vSQL.length]=",(SELECT jobcode,paramvalue FROM iwz_job_details WHERE paramname='_process') jp,iwz_process_details pd";
  vSQL[vSQL.length]=",(SELECT jobcode,paramvalue FROM iwz_job_details WHERE paramname='_dm') jdm";
  vSQL[vSQL.length]="WHERE job.JOB_NAME=trig.JOB_NAME AND job_det.jobcode=job.job_name AND jp.paramvalue=pd.process_name AND jp.jobcode=job_det.jobcode AND jdm.jobcode=job_det.jobcode) where 1=1 "+vValues ;
  vSQL[vSQL.length]="UNION ALL SELECT '"+getQrtzJNDIName()+"' sched_name, jd.jobcode, jd.paramvalue, '', ''description, '1' is_durable,'1' requests_recovery,'' trigger_name,'' trigger_group,0 prev_fire_time,0 next_fire_time,-1 priority,'' trigger_state,'Manual' trigger_type,0 start_time,0 end_time,0 misfire_instr,'M' Job_type,process_type,param_list,jdm.paramvalue delivery_method"; 
  vSQL[vSQL.length]="FROM iwz_job_details jd";
  vSQL[vSQL.length]=",(SELECT jobcode,paramvalue FROM iwz_job_details WHERE paramname='_process') jp,iwz_process_details pd";
  vSQL[vSQL.length]=",(SELECT jobcode,paramvalue FROM iwz_job_details WHERE paramname='_dm') jdm";
  vSQL[vSQL.length]="WHERE jd.paramname='_jobname'  AND jp.paramvalue=pd.process_name AND jp.jobcode=jd.jobcode AND jdm.jobcode=jd.jobcode AND jd.jobcode IN (SELECT jobcode FROM iwz_job_details WHERE paramname='_maunal_schedule' AND  PARAMVALUE='Y')";
  vSQL=vSQL.join("\n");
  //appendFileText(serverPath+"/log/job.txt","\n vSQL : "+vSQL);	
  if(vObj.isSQL=="1")
		return vSQL;
  if(vObj.start!=-1 && vObj.limit!=-1)	
	vSQL=getPageWiseQuery(vSQL,parseInt(vObj.start),parseInt(vObj.start)+parseInt(vObj.limit));
	vSQL=SQLResultset(vSQL);
	if(vSQL.recordcount==0) vSQL.totalcount;
	else vSQL.totalcount=parseInt(vSQL.fieldbyname('rc_internal'));
	return JSON.stringify(vSQL);	
}

/**
 *@event      startProcess.
 *@desc       server side function to start a process and for monitoring it's progress
 *@author     Durgesh
 *@param	  Process Name
 *@dated      24 Jan 2012
**/
function startProcess(process,subprocesscount)
{
	if(!process)
		return {"status":"unsuccess","error":"Invalid parameters in function iwebz.startProcess","msg":""};
    
  subprocesscount=subprocesscount||"1";  
	var vSQL = new Array();
	//removeFile(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".txt")
  //Changes done by vikas as remove takes longer time
  // appendFileText(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".txt","",true)
	//vSQL[vSQL.length] = " delete from iwz_process_progress where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' and trunc(startdate) = to_date('"+getServerDate()+"','"+iwebz.globalDateFormat+"') ; ";
  vSQL[vSQL.length] = " delete from iwz_process_progress where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"'; ";
	vSQL[vSQL.length] = " insert into iwz_process_progress (total, SUCCESS, ERRORS,SESSIONID,PROCESS,STARTDATE,STARTEDBY,subprocess_starttime, total_no_of_subprocess) values ('0','0','0','"+_encode(userObj.sessionid)+"' ,'"+_encode(process)+"',sysdate,'"+_encode(userObj.userid)+"',sysdate,'"+subprocesscount+"'); " ;
	//vSQL[vSQL.length] = " delete from iwz_process_log where sessionid = '"+_encode(userObj.sessionid)+"' and process = '"+_encode(process)+"'  and trunc(logdate) = to_date('"+getServerDate()+"','"+iwebz.globalDateFormat+"') ; ";
  vSQL[vSQL.length] = " delete from iwz_process_log where sessionid = '"+_encode(userObj.sessionid)+"' and process = '"+_encode(process)+"' ; ";
	vSQL = "Begin "+vSQL.join(" ")+" End ;";
	vSQL =execSQLResultset(vSQL);
	// appendFileText(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".htm","",true);	
	//appendFileText(serverPath+"/Process.txt","\n vSQL  :::: "+JSON.stringify(vSQL)); 
	return ;
}

/**
 *@event      endProcess.
 *@desc       server side function to end the ongoing process
 *@author     Durgesh
 *@param	  ProcessName
 *@dated      24 Jan 2012
**/
function endProcess(process)
{
  //Changed by vikas - removed start date where clause as if the processs runs over nite it wont work	
	if(!process)
		return {"status":"unsuccess","error":"Invalid parameters in function iwebz.endProcess","msg":""};
	var vSQL = " update  iwz_process_progress set ENDDATE= sysdate,subprocess_completed=Nvl(subprocess_completed,1) where SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' ";	
	vSQL = execSQLResultset(vSQL);
	var setBData = setBlobText('iwz_process_progress','process_details',getFileText(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".htm") ," and SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"' ")
	
	//setBData = getBlobData('iwz_process_progress','process_details',(serverPath+"/log/process/Process-"+process+"-"+userObj.sessionid+".htm") ," and SESSIONID='"+_encode(userObj.sessionid)+"' and   PROCESS = '"+_encode(process)+"' and STARTEDBY = '"+_encode(userObj.userid)+"'")
	return ;
}
/**
 *@event      $rmht.
 *@desc       This Function removes all the HTML tag for a given string
 *@author     Hitesh H.Bhupta
 *@dated      29-09-2009
 *@param      colname(String) - column name string                  
 *@return     column name after elimating htm tags
 **/
function rmht(colname)
{
 		var strInputCode = colname;
 		strInputCode = strInputCode.replace(/&(lt|gt);/g, function (strMatch, p1){
 		 	return (p1 == "lt")? "<" : ">";
 		});
 		var strTagStrippedText = strInputCode.replace(/<\/?[^>]+(>|$)/g, "");		
 		return strTagStrippedText; 
}

/**
 *@event      iWebZ.initCapColumnHeader.
 *@desc       Capitalise the first charater of the word and replace the underscore with capital charater
 *@author     Mohini
 *@dated      29-08-2011
 *@return     formatted header
**/
iwebz.initCapColumnHeader=function(header)
{
	if(!header)
		return;
	var final_header='';
	v_header=(header+"").replace(/_/g," ");
	v_header=v_header.split(" ");
	//capitalises the first charater in array
	for(var i=0;i<v_header.length;i++)
		final_header+=" "+v_header[i].substring(0,1).toUpperCase() + v_header[i].substring(1,v_header[i].length).toLowerCase();
	return (final_header+"").trim();
}


/**
 *@event      iwebz.toWords
 *@desc       Converts number to words
 *@author     Vikas Prabhu
 *@dated      16/09/2012 11:53:21
 *@return     Returns word format of the number
 **/
iwebz.toWords=function() {
var th = ['', 'Thousand', 'Million', 'Billion', 'Trillion'];
// uncomment this line for English Number System
// var th = ['','thousand','million', 'milliard','billion'];
var dg = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
var tn = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
var tw = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    s = this.toString();
    s = s.replace(/[\, ]/g, '');
    if (s != parseFloat(s)) return '';
    var x = s.indexOf('.');
    if (x == -1) x = s.length;
    if (x > 15) return 'too big!';
    var n = s.split('');
    var str = '';
    var sk = 0;
    for (var i = 0; i < x; i++) {
        if ((x - i) % 3 == 2) {
            if (n[i] == '1') {
                str += tn[Number(n[i + 1])] + ' ';
                i++;
                sk = 1;
            } else if (n[i] != 0) {
                str += tw[n[i] - 2] + ' ';
                sk = 1;
            }
        } else if (n[i] != 0) {
            str += dg[n[i]] + ' ';
            if ((x - i) % 3 == 0) str += 'Hundred ';
            sk = 1;
        }
        if ((x - i) % 3 == 1) {
            if (sk) str += th[(x - i - 1) / 3] + ' ';
            sk = 0;
        }
    }
    if (x != s.length) {
        var y = s.length;
        str += 'point ';
        for (var i = x + 1; i < y; i++) str += dg[n[i]] + ' ';
    }
    return str.replace(/\s+/g, ' ');
}


/**
 *@event      iwebz.getParameter.
 *@desc       Check if the parameter name exist and return the same 
 *@author     Mohini
 *@dated      05-03-2013 11:16:06 AM
 *@param      reqKey{String} - request key
 *@return     request parameter data
 **/
iwebz.getParameter=function(reqKey)
{
  try
  { 
    return (request.getParameterMap().containsKey(reqKey))? request.getParameter(reqKey):"";
  }
  catch(error)
  {
    return "";
  }
}

/**
 *@event      iwebz.getProcessID.
 *@desc       Generate process id
 *@author     Mohini
 *@dated      02-08-2013 6:19:01 PM
 *@return     status
**/
iwebz.getProcessID=function()
{
    var vSQL="SELECT process_id.nextval FROM dual"
    try
    {
      vSQL=SQLResultset(vSQL);
      if(vSQL.recordcount==0)
        return '{"status":"unsuccess","msg":"","error":"Unable to generate the process id."}';
      
      return '{"status":"success","msg":"","error":"",pid:"'+vSQL.data[0][0]+'"}';  
    }
    catch(error)
    {
      return '{"status":"unsuccess","msg":"","error":"Error while generating process id."}';
    }
}
iwebz.generateBirtReport=function(Obj,typelist)
{
	var flist=new Array();
  var report_config=new java.util.HashMap();
  var parameters = new java.util.HashMap();
  var datasetQuery="" 
  var vSQL=""
  var con=null;
  var response;
  var respEncPass=null;
  try
  {
    report_config.put('report_path',Obj.rep_path);
    // appendFileText(serverPath+"/Append.txt","\n Obj.rep_path: "+Obj.rep_path);
    report_config.put("repid",Obj.rep_id);
    report_config.put("onload",Obj.onload);
    report_config.put("refreshfunc","");
    report_config.put("searchparam",JSON.stringify(Obj.searchparams));
    report_config.put('repxml',Obj.repxml);
    report_config.put('report_name',Obj.rep_name);
    report_config.put('rep_filename',Obj.rep_filename);
    report_config.put('multi_data_set',Obj.multi_data_set);
//    appendFileText(serverPath+"/Append.txt","\n Obj: "+JSON.stringify(Obj));
        
    response=iwebz.chkFileExists(serverPath+""+Obj.repxml)
    if(response.status=="unsuccess")
    {
      return {"status":"unsuccess","msg":"","error":"Report configuration file does not exists"};
    }
	   
    datasetQuery=Obj.onload;
    // appendFileText(serverPath+"/log/Reports.txt","\n userObj.user_name"+userObj.user_name);
    parameters.put("printed_by",userObj.user_name);
    parameters.put("created_by",iwebz.applicationtitle);
		parameters.put("client_name",iwebz.client_name);
		parameters.put("client_address",iwebz.client_address);
		parameters.put("client_address1",iwebz.client_address1);
		parameters.put("client_address2",iwebz.client_address2);
		parameters.put("client_address3",iwebz.client_address3);
		parameters.put("client_image","file:///"+serverPath+"/"+iwebz.client_image);

		parameters.put("report_name",Obj.rep_name);
		parameters.put("numberFormat","###,##.00");
		parameters.put("jndiname","java:"+jndiName);
		parameters.put("driverclass","");
		parameters.put("driverurl","");
		parameters.put("noRecords","No Records Found");
    parameters.put("globaldateformat",iwebz.globalDateFormat);
    parameters.put("globaldatetimeformat",iwebz.globalDateTimeFormat);		

    // appendFileText(serverPath+"/Append.txt","\n Put the parameters");
		if(Obj.parameter!="")
		{
      Obj.parameter=Obj.parameter||'null'
			paramList= "select paramname,paramvalue from wm_parameter where srno in ("+Obj.parameter+")";
      // appendFileText(serverPath+"/Append.txt","\n paramname : "+paramList);
			paramlist = SQLResultset(paramList);
      	// appendFileText(serverPath+"/Append.txt","\n paramlist.recordcount: "+paramlist.recordcount);
			for(var prm=0;prm<paramlist.recordcount;prm++)
			{
        // appendFileText(serverPath+"/Append.txt","\n paramname : "+paramlist.fieldbyname("paramname")+" paramvalue : "+paramlist.fieldbyname("paramvalue"));
				paramlist.recordno=prm;			
				parameters.put(paramlist.fieldbyname("paramname"),paramlist.fieldbyname("paramvalue"));			
			}
		}
    
    Obj.searchparams.fieldnames=Obj.searchparams.fieldnames||[]
    
    //add dynamic parameters
    for(var i=0,len=Obj.searchparams.fieldnames.length;i<len;i++)
			parameters.put(Obj.searchparams.fieldnames[i],Obj.searchparams.fieldnames[Obj.searchparams.fieldnames[i]]);			

		// check for fdate & tdate params
		Obj.searchparams.fdate =Obj.searchparams.fdate ||""
		Obj.searchparams.tdate =Obj.searchparams.tdate ||""

			 if(Obj.searchparams.fdate=="")
					parameters.put("fdate",""+getServerDate());
			else			
				parameters.put("fdate",""+Obj.searchparams.fdate);

		if(Obj.searchparams.tdate=="")
			parameters.put("tdate",""+getServerDate());			
		else			
			parameters.put("tdate",""+Obj.searchparams.tdate);
    
    typelist=typelist.split(",");
    for(var i=0,len=typelist.length;i<len;i++)
    {
     report_config.put('reptype',typelist[i]);
     // appendFileText(serverPath+"/Append.txt","\n report type: "+typelist[i]);
     try
     {
      var response=utlObj.generateBirtReport(parameters,report_config,jsEngine,jndiName);
      // appendFileText(serverPath+"/Append.txt","\n response: "+response); 
      response=eval('('+response+')')
      if(response.status=='success')
      {
        if(typelist[i]=="pdf" && Obj._pp_rep_pass_check=="Y")
        {
          pp_fname=Obj.rep_path+"/"+Obj.rep_filename+"_pp.pdf";
          respEncPass=encryptPDFFile(response.fname,pp_fname,Obj.password,Obj.password)
          // appendFileText(serverPath+"/Append.txt","\n respEncPass: "+respEncPass);
          respEncPass=eval('('+respEncPass+')');
          if(respEncPass.status=="success")
          {
            removeFile(response.fname);
            flist[flist.length]=pp_fname;
          }
          else
            return {"status":"unsuccess","msg":"","error":"Error while generating password protect report "+response.fname}; 
        }
        else
          flist[flist.length]=response.fname;                    
      }
      else
      {
        return {"status":"unsuccess","msg":"","error":"Error while generating report "+response.fname};
      }
     }
     catch(error)
     {
        appendFileText(serverPath+"/Append.txt","\n error : "+error);
        return {"status":"unsuccess","msg":"","error":"Error while generating report "+response.fname};
     }
    }
    return {"status":"success","msg":"","error":"","filelist":{filenames:flist}};
  } 
  catch(error)
  {
    return {"status":"unsuccess","msg":"","error":"Error while generating report "};           
  }
}
/**
 *@event      iwebz.LogoutTimeoutUser.
 *@desc       Logout user whose sessoin is time out
 *@author     Mohini
 *@dated      21-11-2013 6:34:37 PM
 *@return     Return Data Desc
**/
iwebz.LogoutTimeoutUser=function()
{
  var status;
  var status_obj;
  var proc_obj = new Object();
  proc_obj.proc_name="LogoutTimeoutUser";
  proc_obj.proc_params = new Array();
  proc_obj.proc_outparams = 2;
  status = execProc(proc_obj);	
  
  status_obj = eval("(" +status+")");
  if(status_obj.status == "success")
  {
		if(status_obj.OUT1=="1")
			return {status:"success",msg:status_obj.OUT2}; 
		else 
			return {status:"unsuccess",msg:"","error":status_obj.OUT2}; 	
  }
  else
    return {status:"unsuccess",msg:"",error:"Error occurred logging out user."};    		
}
/**
 *@event      ifwk.chkUserPwdExpire.
 *@desc       Check if user password expired
 *@author     Mohini Memnae
 *@dated      12-08-2013 12:33:58 PM
 *@return     status
**/
iwebz.chkUserPwdExpire=function()
{
  try
  {
    var vSQL="select * from (SELECT user_id,expiry_days-(Trunc(SYSDATE)-Trunc(LASTPWD_UPDATED)) daystoexpire FROM iwz_user_master WHERE active='Y' and password_expire='N') WHERE DAYSTOEXPIRE<=0"
//    appendFileText(serverPath+"/log/pwd.txt","\n vSQL : "+vSQL);
    vSQL=SQLResultset(vSQL);
    if(vSQL.recordcount==0)
      return {"status":"success","msg":"","error":"No user found whose password is expired."};
      
    vSQL="UPDATE iwz_useR_master SET password_expire='Y' WHERE active='Y' AND (expiry_days-(Trunc(SYSDATE)-Trunc(LASTPWD_UPDATED)))<=0 and password_expire='N';"
    vSQL+= makeAudit(
      {
        issql:true
        ,tab:"iwz_user_master"
        ,opr:"modify"
        ,res:"Expire user password"
        ,user:iwebz.jobUserid
        ,sqlwhr:"active='Y' AND (expiry_days-(Trunc(SYSDATE)-Trunc(LASTPWD_UPDATED)))<=0 and password_expire='Y'"
      })+";";
//    appendFileText(serverPath+"/log/pwd.txt","\n vSQL : "+vSQL);
    vSQL=execSQLResultset("Begin "+vSQL+" End;");
    if(vSQL.status=="success")
      return {"status":"success","msg":"User password expire process completed.","error":""};
    else
      return {"status":"unsuccess","msg":"","error":"Error while executing process."+vSQL.error};  
  }
  catch(error)
  {
    return {"status":"unsuccess","msg":"","error":"Expection occurred while password expiry of user"};
  }
}
/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     Mohini
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function getJobUserDetails()
{
  var userJobObj='';
  var v_user=""
  var vSQL="SELECT paramvalue FROM iwz_parameter WHERE PARAMNAME='job_userid'";
  vSQL=SQLResultset(vSQL);
  if(vSQL.recordcount==0)
    return {"status":"unsuccess","msg":"","error":"Please set the userid for job scheduler."};
  
  v_user=vSQL.data[0][0];
  if((v_user+"").trim()=="")
    return {"status":"unsuccess","msg":"","error":"Please set the userid for job scheduler."};
  
   var vSQL="SELECT * from iwz_user_master u where user_id='"+ _encode(v_user) +"' and active='Y'"
  vSQL=SQLResultset(vSQL);
  if(vSQL.recordcount==0)
    return {"status":"unsuccess","msg":"","error":"Please create a user for job scheduler"};
   
   userJobObj+="{" 
  for(var i = 0 ; i < vSQL.fields.length ;i++)
    userJobObj+='"'+vSQL.fields[i]+'":"'+vSQL.fieldbyname(vSQL.fields[i])+'",'; 			

  userJobObj+='"profileid":"'+vSQL.fieldbyname("profile_id")+'",';
  userJobObj+='"userid":"'+vSQL.fieldbyname("user_id")+'",';
  userJobObj+='"branchcode":"'+vSQL.fieldbyname("branch_code")+'",';

  var vSQL="SELECT um.roleid ,rm.visibility,rm.rolename FROM iwz_user_role_master um,iwz_role_master rm WHERE user_id='"+_encode(v_user)+"' AND  um.roleid=rm.roleid"
  vSQL=SQLResultset(vSQL);
  userJobObj+="roles:["
  for(var k = 0 ; k < vSQL.recordcount; k++)
  {
    vSQL.recordno = k;
    if(k>0)
      userJobObj+=","
    userJobObj+='{"roleid":"'+vSQL.fieldbyname('roleid')+'","rolename":"'+vSQL.fieldbyname('rolename')+'","visibility":"'+vSQL.fieldbyname('visibility')+'"}'
  }
  userJobObj+="]}"
  try
  {
    userJobObj=eval('('+userJobObj+')')
  }
  catch(error)
  {
    return {"status":"unsuccess","msg":"","error":"error while evaluating"};
  }
//  appendFileText(serverPath+"/log/reports.txt","\n user id: "+userJobObj.user_id);
  return {"status":"success","msg":"","userObj":userJobObj};
}

iwebz.getHtmlText=function(vPath)
{
  if(vPath=="") return "";
  try 
  {
    //canonical path of server
    var spath=new java.io.File(serverPath);
    spath=spath.getCanonicalPath();
    spath=spath.replace("\\","/");
    
    //file path
    var filepath= new java.io.File(spath+""+vPath);
    filepath=filepath.getCanonicalPath();
    filepath=filepath.replace("\\","/");
    
    var indx=filepath.indexOf(spath);
    if(indx==-1)
      return ""
    else
		  return getFileText(serverPath+""+vPath);
	}
	catch(e) 
  {
    return "";
  }
}

/**
 *@event      iwebz.moveWARLogfiles.
 *@desc       take the backup and delete the log files
 *@author     Mohini
 *@dated      11-09-2013 11:00:16 AM
 *@return     Status
**/
iwebz.moveWARLogfiles=function(vObj)
{
  var serverdate=getServerDateTime().replace("-","_","\g").replace(":","_","\g").replace(" ","","\g");
  var response=""
  var warbackuppath=vObj.backup_logpath;
  appendFileText(serverPath+"/Append.txt","\n warbackuppath: "+warbackuppath);
//   var vSQL="SELECT paramvalue FROM iwz_parameter WHERE PARAMNAME ='war_backup_path' AND DELETEd ='N'";
//   vSQL=SQLResultset(vSQL);
//   if(vSQL.recordcount==0)
//     return {"status":"unsuccess","msg":"","error":"Please specify the path to be moved."};
     
  if((warbackuppath).trim()=="")
    return {"status":"unsuccess","msg":"","error":"Please specify the path to be moved"};
  
  response=utlObj.zipFile(serverPath+"/log",warbackuppath+"/log_"+serverdate+".zip",false);
  response=eval('('+response+')')
  if(response.status=="success")
  {
    response=utlObj.deleteFile(new java.io.File(serverPath+"/log"));
    return {"status":"success","msg":"Files moved successfully","error":""};
  }
  
  return {"status":"unsuccess","msg":"","error":response.error};
}

/**
 *@event      iwebz.moveWARBackup.
 *@desc       take the backup of war
 *@author     Mohini
 *@dated      11-09-2013 11:00:16 AM
 *@return     Status
**/
iwebz.moveWARBackup=function()
{
  var serverdate=getServerDateTime().replace("-","_","\g").replace(":","_","\g").replace(" ","","\g");
  var warbackuppath=""
  var response=""
  var vSQL="SELECT paramvalue FROM iwz_parameter WHERE PARAMNAME ='war_backup_path' AND DELETEd ='N'";
  vSQL=SQLResultset(vSQL);
  if(vSQL.recordcount==0)
    return {"status":"unsuccess","msg":"","error":"Please specify the path to be moved."};
    
  if((vSQL.data[0][0]+"").trim()=="")
    return {"status":"unsuccess","msg":"","error":"Please specify the path to be moved"};
  
  warbackuppath=vSQL.data[0][0];
  response=utlObj.zipFile(serverPath,warbackuppath+"/"+jndiName+"_"+serverdate+".zip",false);
  response=eval('('+response+')')
  if(response.status=="success")
    return {"status":"success","msg":"Files moved successfully","error":""};
  
  return {"status":"unsuccess","msg":"","error":response.error};
}

function evalhtmlText(aStr)
{ 
  regExp = new RegExp("\\{\\{([^\\}]*)\\}\\}","gi");
  var result = aStr.match(regExp);
  var expression="";
  var exprStr="";
  if (result==null) return aStr;
  for (idx=0;idx<result.length;idx++)
  {
    exprStr =result[idx];
    expression =exprStr.replace("{","").replace("}","");
    try
    { 
  //    appendFileText(serverPath+"/log/mohini.txt","\n expression: "+expression);
      replaceStr = eval(expression);
//      appendFileText(serverPath+"/log/mohini.txt","\n after evaling expression: "+replaceStr );
    }
    catch (e)
    { 
      replaceStr = 'Error evaluating expression : '+ expression + '-'+e;
    }
    aStr = aStr.replace(exprStr,replaceStr);
  }
  return aStr;
}

iwebz.formatPrice=function(val,comma, period) {
    comma = comma || ',';
    period = period || '.';
    var split = val.toString().split('.');
    var numeric = split[0];
    var decimal = split.length > 1 ? period + split[1] : '';
    numeric = numeric.replace(/\,/g, '');
    var reg = /(\d+)(\d{3})/;
    while (reg.test(numeric)) {
        numeric = numeric.replace(reg, '$1' + comma + '$2');
    }
    return numeric + decimal;
}

iwebz.joblog=function(m,f)
{
  var f=f||"ManualJobLog";
  if(!m) return;
  appendFileText(serverPath+"/log/"+f+"-"+getServerDate()+".txt","\n"+getMiliseconds()+" : "+m);  
}

iwebz.unformatPrice=function(val) 
{
  var numeric = val.toString();
  numeric = numeric.replace(/\,/g, '');
  return numeric;
}

/**
 *@event      iwebz.getManualTypeList.
 *@desc       Create a html template
 *@author     Mohini
 *@dated      08-11-2013 3:05:57 PM
**/
iwebz.getManualTypeList=function()
{
  var template=[];
  var Obj={}
  Obj.data=iwebz.MANUAL_JOB_TYPE;
  template[template.length]="<table class='table' style='width:40%;'>{{#data}}";
  template[template.length]="<tr><td><input class='newinput' type='radio' id='chk_{{0}}' name='chk_manual_type' value='{{0}}'></td>"
  template[template.length]="<td><label for='chk_{{0}}'>{{1}}</label></td></tr>"
  template[template.length]="{{/data}}</table>"
  template=template.join(" ");  
  var htmltem = Mustache.to_html(template,Obj);
  return htmltem;  
}

/**
 *@event      iwebz.executeManualJob.
 *@desc       Execute manual job
 *@author     Mohini
 *@dated      12-11-2013 7:31:07 PM
 *@validation 
              * Val Desc                   
 *@return     status
 **/
iwebz.executeManualJob=function()
{
  var manual_type = request.getParameter("manual_type")||"";
  var vProcessName = request.getParameter("vProcessName");
  iwebz.joblog("Manual Type : "+manual_type);
  startProcess(vProcessName)
  if(manual_type=="")
  {
    logProcessDetail(vProcessName,1,"Insufficient data.");
    endProcess(vProcessName);    
    return '{"status":"unsuccess","msg":"","error":"Insufficient data."}';
  }
  
  iwebz.joblog("Start manual job execution");
  var response = iwebz.executeManualJobSeq(manual_type,vProcessName);
  iwebz.joblog("Manual job execution completed.Status : "+response.status+",Msg:"+response.msg+",Error"+response.error);
  if(response.status=="success")
  {
    logProcessDetail(vProcessName,1,response.msg);
    endProcess(vProcessName);    
    return '{"status":"success","msg":"'+response.msg+'","error":""}';
  }
  else
  {
    logProcessDetail(vProcessName,1,response.error);
    endProcess(vProcessName);
    return '{"status":"unsuccess","msg":"","error":"'+response.error+'"}';  
  }
  endProcess(vProcessName);
}

/**
 *@event      iwebz.executeManualJobSeq.
 *@desc       execute manual job sequentially
 *@author     Mohini
 *@dated      12-11-2013 7:35:48 PM
 *@param      manual_type{String}
 *@return     Return Data Desc
**/
iwebz.executeManualJobSeq=function(manual_type,vProcessName)
{
 var mType;
 var totalCnt=0;
 var response;
 var funcresp;
 var Obj={}
// var vSQL="SELECT * FROM iwz_job_seq_table WHERE job_tag='"+ _encode(manual_type)+"' ORDER BY JOB_SEQ";
 var vSQL="SELECT js.*,paramvalue FROM iwz_job_seq_table js,(select jobcode,paramvalue from iwz_job_details where paramname='_process') jd WHERE job_tag='"+ _encode(manual_type)+"' AND jd.jobcode=js.jobcode ORDER BY JOB_SEQ"
 vSQL=SQLResultset(vSQL);
 iwebz.joblog("Process count : "+vSQL.recordcount)
 if(vSQL.recordcount==0)
 {
  logProcessDetail(vProcessName,1,"No job configured for "+manual_type+".");
  endProcess(vProcessName);    
  iwebz.joblog("Process count : No job configured for "+manual_type+".");
  return {"status":"unsuccess","msg":"","error":"No job configured for "+manual_type+"."};
 }
 
  incrProcessParam(vProcessName,'TOTAL',vSQL.recordcount);  
  for(var i=0;i<vSQL.recordcount;i++)
  {
    vSQL.recordno=i;
    iwebz.joblog("Execute Job : "+vSQL.data[vSQL.recordno][vSQL.jobcode]+" : "+vSQL.data[vSQL.recordno][vSQL.paramvalue]);
    response=rep_sch.executeJob(vSQL.data[vSQL.recordno][vSQL.jobcode]);
    iwebz.joblog("Job Response ("+vSQL.data[vSQL.recordno][vSQL.jobcode]+") : "+response.status + ".Msg :"+response.msg+" Error : "+response.error);
    if(response.status=="unsuccess")
    {
      Obj.manual_type=manual_type
      Obj.seqno=(vSQL.data[vSQL.recordno][vSQL.job_seq]-1)
      logProcessDetail(vProcessName,1,vSQL.data[vSQL.recordno][vSQL.jobcode] + "("+vSQL.data[vSQL.recordno][vSQL.paramvalue]+") : Error :"+response.error+"<br>Reverting process...");
      iwebz.joblog("Process executed with some errors. Error :"+response.error+"\nCall reverse function.");
      funcresp=iwebz.revertManualProcess(Obj);
      if(funcresp.status=="success")
        logProcessDetail(vProcessName,1,vSQL.data[vSQL.recordno][vSQL.jobcode] +"("+vSQL.data[vSQL.recordno][vSQL.paramvalue]+"):"+funcresp.msg);
      else
        logProcessDetail(vProcessName,1,vSQL.data[vSQL.recordno][vSQL.jobcode] +" ("+vSQL.data[vSQL.recordno][vSQL.paramvalue]+"): Error while reverting process."+funcresp.error);
      incrProcessParam(vProcessName,'ERRORS',(vSQL.recordcount-i));
      iwebz.joblog("Manual process reversed :"+funcresp.msg);
      break;                        
    }
    else
    {
      logProcessDetail(vProcessName,1,vSQL.data[vSQL.recordno][vSQL.jobcode] +"("+vSQL.data[vSQL.recordno][vSQL.paramvalue]+") :  Process executed successfully.");
      incrProcessParam(vProcessName,'SUCCESS',1);
    }
  }
  return {"status":"success","msg":"","error":"Manual Job Completed"};
}

/**
 *@event      iwebz.revertManualProcess.
 *@desc       REvert Manual Process
 *@author     Mohini
 *@dated      13-11-2013 7:21:49 PM
 *@param      vObj{Object} - {jobid:job id ,seq:process sequence}
 *@return     status
**/
iwebz.revertManualProcess=function(vObj)
{
  var response;
   if(vObj.manual_type=="" || vObj.seqno=="")
    return {"status":"unsuccess","msg":"","error":"Unable to revert the process.Insufficient data."};
   
   var vSQL="SELECT pd.*,job_seq  FROM iwz_job_seq_table js,iwz_job_details jd,iwz_process_details pd,iwz_job_details jd1 WHERE JOB_TAG='"+ _encode(vObj.manual_type)+"' AND jd.paramname='_process' AND js.jobcode=jd.jobcode AND pd.process_name=jd.paramvalue and JOB_SEQ <='"+ _encode(vObj.seqno)+"' AND jd1.paramname='_job_batch_revert' AND jd1.paramvalue ='Y' AND jd1.jobcode=js.jobcode ORDER BY job_seq DESC"
   vSQL=SQLResultset(vSQL);
   if(vSQL.recordcount==0)
      return {"status":"success","msg":"No process to revert","error":""};             
   
   for(var k=0;k<vSQL.recordcount;k++)
   {
    vSQL.recordno=k;
    iwebz.joblog("Revert Process : "+vSQL.data[vSQL.recordno][vSQL.reversalprocess]);
    response=iwebz.callManualJobReversal(vSQL);
    if(response.status=="success")
      iwebz.joblog(vSQL.data[vSQL.recordno][vSQL.reversalprocess]+" Process reverted ");
    else
      iwebz.joblog(vSQL.data[vSQL.recordno][vSQL.reversalprocess]+" Process reverted with errors.Error:"+response.error);  
   }
   return {"status":"success","msg":"Reversal process completed","error":""}; 
}

/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     Mohini
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
iwebz.callManualJobReversal=function(vObj)
{
   try
   {
    var response;
    if(vObj.data[vObj.recordno][vObj.reversalprocess])
    {
      response=eval(vObj.data[vObj.recordno][vObj.reversalprocess]+"()");
      return  response;  
    }
    return {"status":"success","msg":"","error":"Reversal process not present"};
   }
   catch(error)
   {
    return {"status":"unsuccess","msg":"","error":error};   
   }
}
/**
 *@event      ifwk.getManualProcessList.
 *@desc       Get the manual process list
 *@author     Mohini
 *@dated      15-11-2013 3:08:12 PM
 *@return     Return Data Desc
**/
iwebz.getManualProcessList=function()
{
  var vSQL=[]
  var job_type= request.getParameter("job_type");
  if(job_type=="")
    return '{"status":"unsuccess","msg":"","error":"Job type not found."}';
    
  vSQL[vSQL.length]="SELECT jd2.jobcode,jd2.paramvalue";
  vSQL[vSQL.length]="FROM iwz_job_details jd1,iwz_job_details jd2,iwz_job_seq_table js ";
  vSQL[vSQL.length]="WHERE jd1.paramname='_maunal_schedule' AND jd1.paramvalue='Y' ";
  vSQL[vSQL.length]="AND jd2.paramname='_process' AND job_tag='"+ _encode(job_type)+"' AND jd1.jobcode=jd2.jobcode AND jd2.jobcode=js.jobcode order by job_seq";
  vSQL=vSQL.join(" ");
  vSQL=SQLStore(vSQL);
  return '{"status":"success","msg":"","error":"","vdata":'+vSQL+'}';
}
/**
 *@event      iwebz.saveJobSequence.
 *@desc       Update job squence
 *@author     Mohini
 *@dated      15-11-2013 3:52:07 PM
 *@return     status
**/
iwebz.saveJobSequence=function()
{
  var updqry=[];
  var JString = request.getParameter("JString");
  JString=eval('('+JString+')');
  if(JString.tempParam.length==0)
    return '{"status":"unsuccess","msg":"","error":"No process found."}';

  for(var i=0;i<JString.tempParam.length;i++)
  {
    updqry[updqry.length]="update iwz_job_seq_table set job_seq='"+JString.tempParam[i].job_seq+"' where jobcode='"+JString.tempParam[i].jobcode+"';"
  }
  
  if(updqry.length==0) return '{"status":"unsuccess","msg":"","error":"Unable to update the sequence."}';  
  
  updqry="Begin "+updqry.join(" ") +"End;";
  // appendFileText(serverPath+"/Append.txt","\n updqry: "+updqry);
  updqry=execSQL(updqry);
  
  return updqry; 
}





/**
 *@event      getInsertTableData.
 *@desc       isnerts records in multiple tables
 *@author     vikas
 *@dated      07/11/2012 19:30:48
 *@param      paramdata{String} - multi table paramdata
 *@param      tablename{String} - parent table name
 *@param      issql{String} - true to return sql 
 **/
function getInsertTableData(vParam,vTablename,isSQL)
{
	try
	{
// 	appendFileText(serverPath+"/Multitable.txt","\n inside getInsertTableData vTablename "+vTablename);
	var vObj={};
	var vDecObj={};
	var vSQL = [];
	var vValues = [];
	var vPkey="";
	var outPkey=[];
	var child_outPkey=[];
	var pKeyList="";
	var fieldcount;
	var vParamdata;
	var valMsg;
	var finalSQL=[];
	var sqlWhr=[]; 
	var execQuery;
	var vFkey="";
	var fkey_ind="";
	var PTmkey="";
	var ref_DecObj="";
	var chk_audit_exist="";
	
// 	appendFileText(serverPath+"/Multitable.txt","\n vParam: "+JSON.stringify(vParam));
  //check the parent table name in the paramdata list
//   if(!vParam[vTablename])return '{"status":"unsuccess","msg":"","error":"Please set primary key for the table '+vTablename+'"}';
// 	appendFileText(serverPath+"/Multitable.txt","\n after Primary Key check");
	//*** Start for Parent insert data
  // Check is Primary Key is set or not

	var vTmpPK=DBSchema.getprimarykey(vTablename);
	PTmkey=vTmpPK;
// 	appendFileText(serverPath+"/Multitable.txt","\n Parent Primary Key vTmpPK: "+vTmpPK);
	if(!vTmpPK) return '{"status":"unsuccess","msg":"","error":"Please set primary key for the table '+vTablename+'"}';
	vDecObj[vTablename]={"fieldlist":[]};
	pKeyList=(DBSchema.primarykey[vTablename]).split(",");
//    	appendFileText(serverPath+"/Multitable.txt","\n pKeyList "+pKeyList);
  	if(vParam[vTablename]["data"].length==0)
  	   return '{"status":"unsuccess","msg":"","error":"No data available for processing"}';
  	vParamdata=vParam[vTablename]["data"][0];
//   	appendFileText(serverPath+"/Multitable.txt","\n vParamdata primary table : "+JSON.stringify(vParamdata));
  	fieldcount = vParamdata.fieldnames.length;
  	
//   	appendFileText(serverPath+"/Multitable.txt","\n data length : "+vParam[vTablename]["data"].length);
	
  	for(var i=0;i<vParam[vTablename]["data"].length;i++)
  	{ 
	  	
// 	 appendFileText(serverPath+"/Multitable.txt","\n i "+i);
	 vParamdata=vParam[vTablename]["data"][i]; 	
  	 vSQL=[]
  	 vValues=[]	 
  	 outPkey=[]
  	 
  	 vDecObj[vTablename]={"fieldlist":[]};
  	// make the primary key
//   	appendFileText(serverPath+"/Multitable.txt","\n fieldcount "+fieldcount);
  	
	for (var idx=0;idx<fieldcount; idx++)
	{
// 		appendFileText(serverPath+"/Multitable.txt","\n fieldnames : "+vParamdata.fieldnames[idx]);
//  		appendFileText(serverPath+"/Multitable.txt","\n fieldnames pKeyList : "+pKeyList.indexOf(vParamdata.fieldnames[idx]));

		vPkey="";
		vSQL[vSQL.length]= vParamdata.fieldnames[idx];
		if(pKeyList.indexOf(vParamdata.fieldnames[idx])>=0 )
		{		
// 			appendFileText(serverPath+"/Multitable.txt","\n vParamdata : "+vParamdata[vParamdata.fieldnames[idx]]);
			if(vParamdata[vParamdata.fieldnames[idx]]!="" )			
			{
				vPkey=vParamdata[vParamdata.fieldnames[idx]];
  			}
			else
			{
// 				appendFileText(serverPath+"/Multitable.txt","\n vPkey 12 : "+vParamdata.fieldnames[idx]);
// 				appendFileText(serverPath+"/Multitable.txt","\n vParamdata : "+JSON.stringify(vParamdata));
								
				vPkey=DBSchema.getSystemkey(vTablename,vParamdata.fieldnames[idx],vParamdata);   
// 				appendFileText(serverPath+"/Multitable.txt","\n vPkey : "+vPkey);
				vParamdata[vParamdata.fieldnames[idx]]=vPkey;
				if(vPkey=="") return '{"status":"unsuccess","msg":"","error":"Error in Generating Primary Key of :'+vTablename+'"}';
			}
			vValues[vValues.length]= "'" + _encode(vPkey)+"'";
			outPkey[outPkey.length]='p_'+vParamdata.fieldnames[idx];
// // 			appendFileText(serverPath+"/Multitable.txt","\n Adding to declare object");
			vDecObj[vTablename][vParamdata.fieldnames[idx]]='p_'+vParamdata.fieldnames[idx];
			vDecObj[vTablename]["fieldlist"][vDecObj[vTablename]["fieldlist"].length]=vParamdata.fieldnames[idx];
			vDecObj[vTablename][vParamdata.fieldnames[idx]+"_dec"]='p_'+vParamdata.fieldnames[idx]+" "+vTablename+"."+vParamdata.fieldnames[idx]+"%TYPE;";
		}
		else 
		{
// 			appendFileText(serverPath+"/Multitable.txt","\n i "+i);
			
			vValues[vValues.length]= "'" + _encode(vParamdata[vParamdata.fieldnames[idx]])+"'";
		}
	  vValues[vValues.length-1]=DBSchema.transform(vTablename,vParamdata.fieldnames[idx],vValues[vValues.length-1]);
	}
	
// 	appendFileText(serverPath+"/Multitable.txt","\n After Primary Key generation");
// 	appendFileText(serverPath+"/Multitable.txt","\n vTablename :"+vTablename);
// 	appendFileText(serverPath+"/Multitable.txt","\n new vParamdata : "+JSON.stringify(vDecObj[vTablename]));
	
  //Validate the Data based on the validations set in dbschema
	valMsg=DBSchema.transValidate(vTablename,'add',vParamdata);
// 	appendFileText(serverPath+"/Multitable.txt","\n Validations msg: "+valMsg);
	if(valMsg!="") return '{"status":"unsuccess","msg":"","error":"'+valMsg+'"}';
	
  	finalSQL[finalSQL.length] = "insert into " + vTablename + "("+vSQL.join(',')+") values ("+ vValues.join(',') +") returning "+vTmpPK+" into "+outPkey.join(',')+";";
// 	appendFileText(serverPath+"/Multitable.txt","\n fieldlist : "+JSON.stringify(vDecObj));
	sqlWhr=[];
	decClause=[];
	for(var p = 0 ; p < vDecObj[vTablename]["fieldlist"].length; p++)
	{
		sqlWhr[sqlWhr.length]=vDecObj[vTablename]["fieldlist"][p]+"="+vDecObj[vTablename][vDecObj[vTablename]["fieldlist"][p]];
	    decClause[decClause.length]=vDecObj[vTablename][vDecObj[vTablename]["fieldlist"][p]+"_dec"];
	}

// 	if (chk_audit_exist!=0)
// 	{
		finalSQL[finalSQL.length] = makeAudit(
		  {
		    issql:true
		    ,tab:vTablename
		    ,opr:'add'
		    ,res:'add'
		    ,user:userObj.user_id
		    ,sqlwhr:sqlWhr.join(" and ")
		  })+";";
// 	}	  

		//Added by Harshit - 26032014 - For Custom Fields in Master of Multitable
		//CUSTOM FIELDS FOR MULTI TABLE BEGINS HERE

		var CustomSQL_Master=""
		var CustomSQL_Log=""
		var pkeyobj={};
		var primarykeylist=""
		
		
		var vTmpPK_cust=DBSchema.getprimarykey(vTablename);
// 		appendFileText(serverPath+"/log/harshit.txt","\n vTmpPK_cust "+vTmpPK_cust);

		PTmkey_cust=vTmpPK_cust;
		if(!vTmpPK_cust) return '{"status":"unsuccess","msg":"","error":"Please set primary key for the table '+vTablename+'"}';

// 		appendFileText(serverPath+"/log/harshit.txt","\n vTablename "+vTablename);
		primarykeylist=(DBSchema.primarykey[vTablename]).split(",");
// 		appendFileText(serverPath+"/log/harshit.txt","\n primarykeylist "+primarykeylist);

		for(var p=0;p<primarykeylist.length;p++)
		{
// 			appendFileText(serverPath+"/log/harshit.txt","\n primarykeylist[p] "+primarykeylist[p]);
// 			appendFileText(serverPath+"/log/harshit.txt","\n vTablename "+vTablename);
// 			appendFileText(serverPath+"/log/harshit.txt","\n vParamdata[vTablename] "+JSON.stringify(vParamdata));
// 			appendFileText(serverPath+"/log/harshit.txt","\n vParam[vTablename].fieldnames : "+vParamdata.fieldnames);
			
			var cust_key=primarykeylist[p];
// 			appendFileText(serverPath+"/log/harshit.txt","\n cust_key : "+cust_key);

			var pkeyvalue=vParamdata[cust_key]
// 			appendFileText(serverPath+"/log/harshit.txt","\n pkeyvalue "+pkeyvalue);
			pkeyobj[primarykeylist[p]]=pkeyvalue;

		}

// 		appendFileText(serverPath+"/log/harshit.txt","\n pkeyobj "+JSON.stringify(pkeyobj));


	var vSQLMeta_cust="SELECT * FROM iwz_cust_metadata WHERE upper(cust_table_name) = upper('"+_encode(vTablename)+"')";
//	appendFileText(serverPath+"/log/harshit.txt","\n vSQLMeta_cust : "+vSQLMeta_cust);
	vSQLMeta_cust=SQLResultset(vSQLMeta_cust);

	
// 	appendFileText(serverPath+"/log/harshit.txt","\n old vParam "+JSON.stringify(vParam));
// 	appendFileText(serverPath+"/log/harshit.txt","\n vSQLMeta_cust.recordcount "+vSQLMeta_cust.recordcount);
// 	appendFileText(serverPath+"/log/harshit.txt","\n vParamdata['_custparams'] "+vParam['_custparams']);
// 	appendFileText(serverPath+"/log/harshit.txt","\n vParamdata['_custparams']['fieldnames'] "+vParam['_custparams']['fieldnames']);

	if(vSQLMeta_cust.recordcount!=0 && vParam["_custparams"] && vParam["_custparams"]["fieldnames"].length>0)
    {
// 		appendFileText(serverPath+"/log/harshit.txt","\n inside if ");
		for(var key in pkeyobj)
		{

			//Changed by Harshit - 26032014 - For saving custom fields in masters
			vParam["_custparams"]["fieldnames"][vParam["_custparams"]["fieldnames"].length]="cust_"+key;
			vParam["_custparams"]["cust_"+key]=pkeyobj[key];
		}

// 		appendFileText(serverPath+"/log/harshit.txt","\n new vParamdata after loops vParam['_custparams'] : "+JSON.stringify(vParam["_custparams"]));
// 		appendFileText(serverPath+"/log/harshit.txt","\n vTablename : "+vTablename);
// 		appendFileText(serverPath+"/log/harshit.txt","\n vSQLMeta_cust 123: "+JSON.stringify(vSQLMeta_cust));

		var vTmpPK_cust=DBSchema.getprimarykey("custom_"+vTablename);
		if(!vTmpPK_cust) 
		{
			return '{"status":"unsuccess","msg":"","error":"<B>Please set primary key for the table custom_'+vTablename+' </B>"}';
		}

		var issql_cust=true;
		var custtemp=getCustInsertData(
			{
				paramdatacust:vParam["_custparams"]
				,tablename:vTablename
				,metadataset:vSQLMeta_cust
				,issql:issql_cust
			}
		);
		
//		appendFileText(serverPath+"/log/harshit.txt","\n Result of getCustInsertData : "+JSON.stringify(custtemp));

		if(issql_cust)
			finalSQL[finalSQL.length]=custtemp;
		else if(custtemp.status!="success")
		{
			return '{"status":"unsuccess","msg":"Error While Inserting Custom data","error":"Error While Inserting Custom data"}'; 
		}
    }
	// CUSTOM FIELDS FOR MULTI TABLE ENDS HERE
	
		
	chk_audit_exist="";	  
 	for(key in vParam)
 	{
// 		appendFileText(serverPath+"/log/harshit.txt","\n key : "+key+" ,vTablename : "+vTablename);
		//Added by Harshit - 27032014 - To not create insert for Custom table here.
   		if(key==vTablename || key=="_custparams")
   		{
      		continue;
   		}
		child_outPkey=[];
 		child_outPkey[child_outPkey.length]=outPkey.join(',');

   		vTmpPK=DBSchema.getprimarykey(key);
 	 	if(!vTmpPK) return '{"status":"unsuccess","msg":"","error":"Please set primary key for the table '+key+'"}';
//  	 	appendFileText(serverPath+"/Multitable.txt","\n after fetching Child table primary key");
 	 	vDecObj[key]={"fieldlist":[]};
 	 	pKeyList=(DBSchema.primarykey[key]).split(",");
//  	 	appendFileText(serverPath+"/Multitable.txt","\n pKeyList: "+pKeyList);
 	 	if(vParam[key]["data"].length==0)
 	 	{
//     		return '{"status":"unsuccess","msg":"","error":"No data available for processing"}';
			continue;
		}	
//     	appendFileText(serverPath+"/Multitable.txt","\n before traversing Child table data");
    	for(var k = 0 ; k < vParam[key]["data"].length; k++)
    	{
			vParamdata=vParam[key]["data"][k];
			fieldcount = vParamdata.fieldnames.length;
			vSQL=[];
			vValues=[];
// 			appendFileText(serverPath+"/Multitable.txt","\n Child table vParamdata 1 : "+JSON.stringify(vParamdata));
// 			appendFileText(serverPath+"/Multitable.txt","\n Child table fieldcount : "+fieldcount);
  	  		for (var idx=0;idx<fieldcount; idx++)
    		{
    			vPkey="";
    			vSQL[vSQL.length]= vParamdata.fieldnames[idx];
//     			appendFileText(serverPath+"/Multitable.txt","\n indexof : "+(pKeyList.indexOf(vParamdata.fieldnames[idx])));
//     			appendFileText(serverPath+"/Multitable.txt","\n vParamdata.fieldnames[idx] : "+(vParamdata.fieldnames[idx]));
    			if(pKeyList.indexOf(vParamdata.fieldnames[idx])>=0 )
    			{		
    				if(vParamdata[vParamdata.fieldnames[idx]]!="" )			
    				{
// 	    				appendFileText(serverPath+"/Multitable.txt","\n inside if of indexof ");
    					vPkey=vParamdata[vParamdata.fieldnames[idx]];
      				}
    				else
    				{
// 	    				appendFileText(serverPath+"/Multitable.txt","\n inside else of indexof ");
	    				vPkey=DBSchema.getSystemkey(key,vParamdata.fieldnames[idx],vParamdata);  
	    				if(!vPkey) vPkey=vTmpPK;
	    				vParamdata[vParamdata.fieldnames[idx]]=vPkey;
	    				if(!vPkey) 
	    					return '{"status":"unsuccess","msg":"","error":"Error in Generating Primary Key of table '+key+'"}';
	    			}
// 	    			appendFileText(serverPath+"/Multitable.txt","\n Child table vPkey : "+vPkey);
// 	    			appendFileText(serverPath+"/Multitable.txt","\n Child table vParamdata2 : "+JSON.stringify(vParamdata));
	    			vValues[vValues.length]= "'" + _encode(vPkey)+"'";
// 	    			appendFileText(serverPath+"/Multitable.txt","\n Child table vValues : "+vValues.join(" and "));
	    			
					ref_DecObj=JSON.stringify(vDecObj[key]["fieldlist"]);
// 					appendFileText(serverPath+"/Multitable.txt","\n ref_DecObj : "+ref_DecObj);
// 	    			appendFileText(serverPath+"/Multitable.txt","\n Check Duplicate vDecObj[key] : "+(ref_DecObj.indexOf(vParamdata.fieldnames[idx])>0));
	    			if((ref_DecObj.indexOf(vParamdata.fieldnames[idx])==-1))
	    			{
		    			
// 		    			outPkey[outPkey.length]='c_'+vParamdata.fieldnames[idx];
		    			child_outPkey[child_outPkey.length]='c_'+vParamdata.fieldnames[idx];
		    			vDecObj[key][vParamdata.fieldnames[idx]]='c_'+vParamdata.fieldnames[idx];
		    			vDecObj[key]["fieldlist"][vDecObj[key]["fieldlist"].length]=vParamdata.fieldnames[idx];
		    			vDecObj[key][vParamdata.fieldnames[idx]+"_dec"]='c_'+vParamdata.fieldnames[idx]+" "+key+"."+vParamdata.fieldnames[idx]+"%TYPE;";
	    			}
// 	    			appendFileText(serverPath+"/Multitable.txt","\n outPkey : "+outPkey.join(','));
// 	    			appendFileText(serverPath+"/Multitable.txt","\n child_outPkey : "+child_outPkey.join(','));
// 	    			appendFileText(serverPath+"/Multitable.txt","\n vDecObj[key][fieldlist]: "+JSON.stringify(vDecObj[key]["fieldlist"]));
	    		}
    			else 
    			{
// 	    			if(vDecObj[key]["fieldlist"].indexOf(pKeyList)==-1)
// 	    			{
// 	    				vDecObj[key]["fieldlist"][vDecObj[key]["fieldlist"].length]=pKeyList;
// 	    				vDecObj[key][vDecObj[key]["fieldlist"][idx]]="p_"+vDecObj[vTablename]["fieldlist"][idx];
//     				}
    				vValues[vValues.length]= "'" + _encode(vParamdata[vParamdata.fieldnames[idx]])+"'";
// //     				appendFileText(serverPath+"/Multitable.txt","\n outPkey 2 : "+outPkey.join(','));
// 	    			appendFileText(serverPath+"/Multitable.txt","\n child_outPkey 2 : "+child_outPkey.join(','));
// 	    			appendFileText(serverPath+"/Multitable.txt","\n vDecObj[key][fieldlist] 2 : "+JSON.stringify(vDecObj[key]["fieldlist"]));
//     				appendFileText(serverPath+"/Multitable.txt","\n Child table vValues 2 : "+vValues.join(" and "));
    			}
    	  		vValues[vValues.length-1]=DBSchema.transform(key,vParamdata.fieldnames[idx],vValues[vValues.length-1]);
    		}

//     		appendFileText(serverPath+"/Multitable.txt","\n Child table vDecObj object: "+JSON.stringify(vDecObj));
//     		appendFileText(serverPath+"/Multitable.txt","\n Child table data vValues: "+vValues);
//     		appendFileText(serverPath+"/Multitable.txt","\n vTablename : "+vTablename);
//     		appendFileText(serverPath+"/Multitable.txt","\n Key : "+key);
    		
      		sqlWhr=[];
// 	    	decClause=[];
    		vFkey=DBSchema.getforiegnkey(vTablename,key)
//     		appendFileText(serverPath+"/Multitable.txt","\n Child table foreign key: "+vFkey);
    		if(!vFkey) 
    		{
// 	    		appendFileText(serverPath+"/Multitable.txt","\n vFkey is null ");
	    		vSQL[vSQL.length]=PTmkey;
	    		vValues[vValues.length]= vDecObj[vTablename][PTmkey];
	    	}
	    	else
	    	{
// 		    	appendFileText(serverPath+"/Multitable.txt","\n vFkey is not null ");
	      		for(var vfindx = 0 ; vfindx < vFkey.length; vfindx++)
	      		{
	      			fkey_ind=vFkey[vfindx].split("=")
			    	//check if key pair defined properly
			    	if(fkey_ind.length<2)continue;
			    	vSQL[vSQL.length]=fkey_ind[1];
			    	vValues[vValues.length]= vDecObj[vTablename][fkey_ind[0]];
	        		//vDecObj[key][fkey_ind[0]]='c_'+vParamdata.fieldnames[idx];
	    			//vDecObj[key][fkey_ind[0]+"_dec"]='c_'+vParamdata.fieldnames[idx]+" "+key+"."+vParamdata.fieldnames[idx]+"%TYPE;";
// 	    			appendFileText(serverPath+"/Multitable.txt","\n fkey_ind[0]: "+fkey_ind[0]);
  					sqlWhr[sqlWhr.length]=fkey_ind[1]+"=p_"+fkey_ind[0];
// 					appendFileText(serverPath+"/Multitable.txt","\n temp where clause: "+fkey_ind[1]+'=p_'+fkey_ind[1]);
	      		}
  			}

// 			appendFileText(serverPath+"/Multitable.txt","\n Child table vSQL: "+vSQL.join(","));
//     		appendFileText(serverPath+"/Multitable.txt","\n Child table vValues: "+vValues.join(","));
    		valMsg=DBSchema.transValidate(key,'add',vParamdata);// JavaScript Document
//     		appendFileText(serverPath+"/Multitable.txt","\n Child table validations : "+valMsg);
	    	if(valMsg!="") 
	    		return '{"status":"unsuccess","msg":"","error":"'+valMsg+'"}';
      		finalSQL[finalSQL.length] = "insert into " + key + "("+vSQL.join(',')+") values ("+ vValues.join(',') +") returning "+vTmpPK+" into "+child_outPkey.join(',')+";";
// 			appendFileText(serverPath+"/Multitable.txt","\n Child table declare object : "+vDecObj[key]["fieldlist"]);
			
	    	for(var p = 0 ; p < vDecObj[key]["fieldlist"].length; p++)
	    	{
				sqlWhr[sqlWhr.length]=vDecObj[key]["fieldlist"][p]+"="+vDecObj[key][vDecObj[key]["fieldlist"][p]];
// 				appendFileText(serverPath+"/Multitable.txt","\n Child table decClause : "+decClause.join("\n"));
// 				appendFileText(serverPath+"/Multitable.txt","\n vDecObj[key]['fieldlist'][p] : "+vDecObj[key]['fieldlist'][p]);
// 				appendFileText(serverPath+"/Multitable.txt","\n indexOf Check : "+decClause.join("\n").indexOf(vDecObj[key]['fieldlist'][p]));
				if(decClause.join("\n").indexOf(vDecObj[key]['fieldlist'][p])==-1)
				{
					decClause[decClause.length]=vDecObj[key][vDecObj[key]["fieldlist"][p]+"_dec"];
				}
	    	}
// // 	    	appendFileText(serverPath+"/Multitable.txt","\n Child Audit making in progress...");
			chk_audit_exist=getCode("select count(*) from tab where upper(tname) like 'AUDIT_"+key.toUpperCase()+"'")
// 			appendFileText(serverPath+"/Multitable.txt","\n chk_audit_exist "+chk_audit_exist);
// 			appendFileText(serverPath+"/Multitable.txt","\n child  chk_audit_exist value "+(chk_audit_exist!=0));
			if (chk_audit_exist!=0)
			{
    			finalSQL[finalSQL.length] = makeAudit(
	    	  	{
		    	    issql:true
		    	    ,tab:key
		    	    ,opr:'add'
		    	    ,res:'add'
		    	    ,user:userObj.user_id
		    	    ,sqlwhr:sqlWhr.join(" and ")
	    	  	})+";";
    	 	}
// 	    	appendFileText(serverPath+"/Multitable.txt","\n Declare clause : "+decClause.join("\n")+"\n");
    	}
    	
	}
 

	}
	execQuery="declare "+decClause.join("\n")+"\n Begin \n"+finalSQL.join("\n")+"\n End;"
 	
	execQuery=execSQLResultset(execQuery);
	if (execQuery.status=="unsuccess")
		return '{"status":"unsuccess","msg":"","error":"Error while inserting data"}';
	else
		return '{"status":"success","msg":"","error":""}';
}
catch(e)
{
	appendFileText(serverPath+"/Multitable.txt","\n ERROR +++++++++++++++++ "+e);
}
}

/**
*@event      modifyMultipleRecord.
*@desc       Update records in to multiple tables
*@author     Mukesh Bhupta
*@dated      07/12/2012
**/
function modifyMultipleRecord(tablename,vparamdata,thisaction,isSQL)
{
	try
	{
	
	// appendFileText(serverPath+"/log/CustomFields.txt","\n tablename "+tablename)
	// appendFileText(serverPath+"/log/CustomFields.txt","\n vparamdata "+JSON.stringify(vparamdata))
	// appendFileText(serverPath+"/log/CustomFields.txt","\n thisaction "+thisaction)
	// appendFileText(serverPath+"/log/CustomFields.txt","\n isSQL "+isSQL)

	var valMsg=DBSchema.transValidate(tablename,thisaction,vparamdata);
	if(valMsg!="") return '{"status":"unsuccess","msg":"","error":"'+valMsg+'"}';
		
	var vtempDecObj={};
	
	var pTmpPK=DBSchema.getprimarykey(tablename);	
// 	appendFileText(serverPath+"/log/harshit.txt","\n pTmpPK parent "+pTmpPK)

	if(!pTmpPK) return '{"status":"unsuccess","msg":"","error":"Please set primary key for the table '+tablename+'"}';	
	
	vtempDecObj[tablename]={"fieldlist":[]};
// 	appendFileText(serverPath+"/log/mukesh.txt","\n vtempDecObj "+JSON.stringify(vtempDecObj))
	
	var pKeyList=(DBSchema.primarykey[tablename]).split(",");
// 	appendFileText(serverPath+"/log/mukesh.txt","\n pKeyList "+pKeyList)
	
	if(vparamdata[tablename]["data"].length==0)
  	   return '{"status":"unsuccess","msg":"","error":"No data available for processing"}';
  	
	var vtempParamdata=vparamdata[tablename]["data"][0];
// 	appendFileText(serverPath+"/log/mukesh.txt","\n vtempParamdata "+JSON.stringify(vtempParamdata))
	
	var vvParamdata=vtempParamdata
	
	var v=vtempParamdata.fieldnames.length;
// 	appendFileText(serverPath+"/log/mukesh.txt","\n length "+v)
 	
	
	var tempWhr=[];
	var tempupdateWhr=[];
	var updnewSql=[];
	var tableCols="";
	var vSQL=[];
	var vValues=[]
	var vPkey="";
	
	for (var idx=0;idx<vtempParamdata.fieldnames.length; idx++)
	{
		
// 		vSQL[vSQL.length]=vtempParamdata.fieldnames[idx];
// 		appendFileText(serverPath+"/log/mukesh.txt","\n vSQL "+vSQL)
// 		vValues[vValues.length]=vtempParamdata[vtempParamdata.fieldnames[idx]]
// 		appendFileText(serverPath+"/log/mukesh.txt","\n vValues "+vValues)
// 		appendFileText(serverPath+"/log/mukesh.txt","\n inside name of fieldname "+vtempParamdata.fieldnames[idx])
// 		appendFileText(serverPath+"/log/mukesh.txt","\n inside value of fieldname "+vtempParamdata[vtempParamdata.fieldnames[idx]])
// 		appendFileText(serverPath+"/log/mukesh.txt","\n pKeyList "+pKeyList)
// 		appendFileText(serverPath+"/log/mukesh.txt","\n vtempParamdata.fieldnames[idx] "+vtempParamdata.fieldnames[idx])
		
		if(pKeyList.indexOf(vtempParamdata.fieldnames[idx])>=0 )
		{
// 			appendFileText(serverPath+"/log/mukesh.txt","\n mukesh 12345 "+vtempParamdata.fieldnames[idx])		
			
			tempWhr[tempWhr.length]=vtempParamdata.fieldnames[idx]+" = '"+vtempParamdata[vtempParamdata.fieldnames[idx]]+"' "
			
			vSQL[vSQL.length]=vtempParamdata.fieldnames[idx];
// 			appendFileText(serverPath+"/log/mukesh.txt","\n vSQL 12345 "+vSQL)
			
			vValues[vValues.length]="'"+vtempParamdata[vtempParamdata.fieldnames[idx]]+"'"
// 			appendFileText(serverPath+"/log/mukesh.txt","\n vValues "+vValues)
		}
		else
		{
			tempupdateWhr[tempupdateWhr.length]=vtempParamdata.fieldnames[idx]+" = '"+vtempParamdata[vtempParamdata.fieldnames[idx]]+"' "
		}
	}
	
// 	appendFileText(serverPath+"/log/harshit.txt","\n tempWhr mukesh 1111 "+tempWhr.join())
// 	appendFileText(serverPath+"/log/harshit.txt","\n tempupdateWhr mukesh 1111 "+tempupdateWhr.join())
	
	if(thisaction=="modify")
	{
// 		appendFileText(serverPath+"/log/harshit.txt","\n inside modify mukesh 1111 ")
// 	 	var vTmpPK=DBSchema.getprimarykey(tablename);
		if(!pTmpPK) return '{"status":"unsuccess","msg":"","error":"Please Set Primary key for the Table"}';
		
		tableCols="select column_name from user_tab_columns where Upper(table_name)=Upper('"+tablename+"') and upper(column_name) in ('CREATED_BY','AUTHORIZATION_STATUS','AUTHORIZEDBY','AUTHORIZATIONDATETIME')";
		
// 		appendFileText(serverPath+"/log/harshit.txt","\n tableCols query "+tableCols) 	
		tableCols=SQLResultset(tableCols);
		

		var valMsg=DBSchema.transValidate(tablename,'modify',vtempParamdata);

//	 	appendFileText(serverPath+"/log/harshit.txt","\n Validations msg: "+valMsg);
		if(valMsg!="") return '{"status":"unsuccess","msg":"","error":"'+valMsg+'"}';
			
		if(tableCols.recordcount==4)
		{
			updnewSql[updnewSql.length]="update "+tablename+ "  set " +tempupdateWhr.join(',')+" ,AUTHORIZATION_STATUS='0',AUTHORIZEDBY='',AUTHORIZATIONDATETIME='',CREATED_BY='"+userObj.user_id+"' where "+tempWhr.join(" and ");
		}
		else
		{
			updnewSql[updnewSql.length]="update "+ tablename + "  set " +tempupdateWhr.join(',') + " where " + tempWhr.join(" and ");
		}	
		

 	}
 	else if (thisaction == "deleted" && !iwebz.soft_delete)
 	{
	 	updnewSql[updnewSql.length]=" DELETE FROM "+ tablename +" "+" where "+tempWhr.join(" and ");
	}
	else
	{
		updnewSql[updnewSql.length]= "update "+ tablename + "  set deleted='Y' where " +tempWhr.join(" and ");
   	}
 	
//	appendFileText(serverPath+"/log/harshit.txt","\n updnewSql "+updnewSql.join("<BR>")) 

	
	var audRespparent= makeAudit(
		{
			issql:true
			,tab:tablename
			,opr:thisaction
			,res:thisaction
			,user:userObj.user_id
			,sqlwhr:tempWhr.join(" and ")
		});
		

	// CUSTOM FIELDS MODIFICATION LOGIC STARTS - Added by Harshit - 27032014
		try{

		var CustomSQL_Master=""
		var CustomSQL_Log=""
		var pkeyobj={};
		var primarykeylist=""
		
		var vSQLMeta_cust="SELECT * FROM iwz_cust_metadata WHERE upper(cust_table_name) = upper('"+_encode(tablename)+"')";
		// appendFileText(serverPath+"/log/CustomFields.txt","\n vSQLMeta_cust 11111 : "+vSQLMeta_cust);
		vSQLMeta_cust=SQLResultset(vSQLMeta_cust);
		// appendFileText(serverPath+"/log/CustomFields.txt","\n vparamdata['_custparams'] : "+JSON.stringify(vparamdata["_custparams"]));
		// appendFileText(serverPath+"/log/CustomFields.txt","\n vparamdata['_custparams'] : "+JSON.stringify(vparamdata["_custparams"]));

		if(vSQLMeta_cust.recordcount!=0 && vparamdata["_custparams"] && vparamdata["_custparams"]["fieldnames"].length>0)
		{
		
			var vTmpPK_cust=DBSchema.getprimarykey(tablename);
			// appendFileText(serverPath+"/log/CustomFields.txt","\n vTmpPK_cust "+vTmpPK_cust);

			PTmkey_cust=vTmpPK_cust;
			if(!vTmpPK_cust) return '{"status":"unsuccess","msg":"","error":"Please set primary key for the table '+tablename+'"}';

			primarykeylist=(DBSchema.primarykey[tablename]).split(",");
			// appendFileText(serverPath+"/log/CustomFields.txt","\n primarykeylist  : "+primarykeylist);
			// appendFileText(serverPath+"/log/CustomFields.txt","\n WHERE CLAUSE  : "+tempWhr.join(" and "));

			var tempWhr_cust=[];
			var tempupdateWhr_cust=[];
			for (var idx=0;idx<vtempParamdata.fieldnames.length; idx++)
			{
				if(pKeyList.indexOf(vtempParamdata.fieldnames[idx])>=0 )
				{
					tempWhr_cust[tempWhr_cust.length]="cust_"+vtempParamdata.fieldnames[idx]+" = '"+vtempParamdata[vtempParamdata.fieldnames[idx]]+"' "
				}
			}
			
			var custobject=vparamdata["_custparams"];
			// appendFileText(serverPath+"/log/CustomFields.txt","\n custobject  : "+JSON.stringify(custobject));

			for (var idx=0;idx<custobject.fieldnames.length; idx++)
			{
				if(thisaction=="modify")
					tempupdateWhr_cust[tempupdateWhr_cust.length]=custobject.fieldnames[idx]+" = '"+custobject[custobject.fieldnames[idx]]+"' "
				else
					tempupdateWhr_cust[tempupdateWhr_cust.length]=custobject.fieldnames[idx]+" = '' "
			}
			
			// appendFileText(serverPath+"/log/CustomFields.txt","\n CUST WHR JOIN  : "+tempWhr_cust.join(" and "));
			// appendFileText(serverPath+"/log/CustomFields.txt","\n CUST SET JOIN  : "+tempupdateWhr_cust.join(" , "));
			// appendFileText(serverPath+"/log/CustomFields.txt","\n tablename  : "+tablename);
			
			var final_cust_update = "update ";
			final_cust_update += " custom_"+tablename+" ";
			final_cust_update += " set ";
			final_cust_update += tempupdateWhr_cust.join(" , ");
			final_cust_update += " where "
			final_cust_update += tempWhr_cust.join(" and ");
			final_cust_update += ";"

			var audResp_cust= makeLog( //Added by Harshit - 26032014 - For saving custom fields log in multi masters
			{
			  issql:true
			  ,tab:"custom_"+tablename  //Added by Harshit - 26032014 - For saving custom fields log in multi masters
			  ,opr:'modify'
			  ,res:'modify'
			  ,user:userObj.user_id
			  ,sqlwhr:tempWhr_cust.join(" and ")
			  
			});

			final_cust_update = final_cust_update + "\n" + audResp_cust;

			// appendFileText(serverPath+"/log/CustomFields.txt","\n CUSTOM AUDIT TABLE   : "+audResp_cust);
			// appendFileText(serverPath+"/log/CustomFields.txt","\n FINAL CUSTOM QUERY  : "+final_cust_update);

		}

	}
	catch(e)
	{
		appendFileText(serverPath+"/log/CustomFields.txt","\n Exception  : "+e);
		return '{"status":"unsuccess","msg":"","error":"Please Set Primary key for the Table"}';
	}

	

	// CUSTOM FIELDS MODIFICATION LOGIC ENDS


		
	updnewSql[updnewSql.length]=audRespparent
		      
 	var childtempupdateWhr=[]
 	var childtempWhr=[]
	var vSQLchild=[]
	var vValueschild=[]
	var fkey_ind=[]

	var deleteclause=[]
	var deletestatement=[]

// 	appendFileText(serverPath+"/log/harshit.txt","\n vparamdata data length mukesh1234 : "+JSON.stringify(vparamdata));

 	for(key in vparamdata)
 	{
	 	
	 	vValueschild=[]
	 	vSQLchild=[]
	 	childtempWhr=[]
	 	childtempupdateWhr=[]
	 		
		// appendFileText(serverPath+"/log/CustomFields.txt","\n modify chils KEY : "+key);

   		if(key==tablename || key=="_custparams") // Added by Harshit - 27032014 - To not make update statement for Custom fields
   		{
      		continue;
   		}

		// appendFileText(serverPath+"/log/CustomFields.txt","\n modify chils KEY AGAIN : "+key);
   		
   		vTmpPK=DBSchema.getprimarykey(key);
//    		appendFileText(serverPath+"/log/mukesh.txt","\n vTmpPK tablename child : "+vTmpPK);
   		
 	 	if(!vTmpPK) return '{"status":"unsuccess","msg":"","error":"Kindly set primary key for the table '+key+'"}';
 	 	
 	 	pKeyList="";
 	 	
//  	 	appendFileText(serverPath+"/log/mukesh.txt","\n key tablename child : "+key);
 	 	pKeyList=(DBSchema.getprimarykey(key)).split(",");
//  	 	appendFileText(serverPath+"/log/mukesh.txt","\n pKeyList child : "+pKeyList);
 	 	
 	 	if(vparamdata[key]["data"].length==0)
 	 	{
//     		return '{"status":"unsuccess","msg":"","error":"No data available for processing"}';
// 			continue;
		}	
		
// 		appendFileText(serverPath+"/log/mukesh.txt","\n vparamdata data length mukesh1234 : "+JSON.stringify(vparamdata));
		for(var k=0;k<vparamdata[key]["data"].length;k++)
    	{
	    	childtempWhr=[]
	    	childtempupdateWhr=[]
	    	deleteclause=[]
	    	vtempParamdata=vparamdata[key]["data"][k];
// 	    	appendFileText(serverPath+"/log/mukesh.txt","\n k child : "+k);
// 	    	appendFileText(serverPath+"/log/mukesh.txt","\n vtempParamdata child : "+JSON.stringify(vtempParamdata));
			
	    	fieldcount=vtempParamdata.fieldnames.length;
// 			appendFileText(serverPath+"/log/mukesh.txt","\n fieldcount child : "+fieldcount);
			
			for(var idx=0;idx<fieldcount;idx++)
    		{

				vSQLchild=[]				
				vValueschild=[]
// 				childtempupdateWhr=[]
// 				childtempWhr=[]
				
				vSQLchild[vSQLchild.length]=vtempParamdata.fieldnames[idx];
// 				appendFileText(serverPath+"/log/mukesh.txt","\n vSQLchild child "+vSQL)
				
				vValueschild[vValueschild.length]="'"+vtempParamdata[vtempParamdata.fieldnames[idx]]+"'"
// 				appendFileText(serverPath+"/log/mukesh.txt","\n vValueschild child "+vValues)
				
				
// 				appendFileText(serverPath+"/log/mukesh.txt","\n vSQL child : "+vtempParamdata[vtempParamdata.fieldnames[idx]]);
	    		
	    		if(pKeyList.indexOf(vtempParamdata.fieldnames[idx])>=0 )
				{
				
					childtempWhr[childtempWhr.length]=vtempParamdata.fieldnames[idx]+" = '"+vtempParamdata[vtempParamdata.fieldnames[idx]]+"' "
					
				}
				else
				{
					childtempupdateWhr[childtempupdateWhr.length]=vtempParamdata.fieldnames[idx]+" = '"+_encode(vtempParamdata[vtempParamdata.fieldnames[idx]])+"' "
					
					
				}  		
				
				
    		}	
//     		appendFileText(serverPath+"/log/mukesh.txt","\n vSQL child : "+vSQLchild);
//     		appendFileText(serverPath+"/log/mukesh.txt","\n vValues child : "+vValueschild);
//     		appendFileText(serverPath+"/log/mukesh.txt","\n childtempupdateWhr child 1111 : "+childtempupdateWhr);	
//     		appendFileText(serverPath+"/log/mukesh.txt","\n childtempWhr child 1111 : "+childtempWhr);			
//     		appendFileText(serverPath+"/log/mukesh.txt","\n key child : "+key);
				
			var vFkey=DBSchema.getforiegnkey(tablename,key)
				
// 			appendFileText(serverPath+"/log/mukesh.txt","\n vFkey child : "+vFkey);  
// 			appendFileText(serverPath+"/log/mukesh.txt","\n vvParamdata child : "+JSON.stringify(vvParamdata));  
// 			appendFileText(serverPath+"/log/mukesh.txt","\n vSQL 1111 "+vSQL);
// 			appendFileText(serverPath+"/log/mukesh.txt","\n vSQL key 1111 "+key);
			if(!vFkey) 
    		{
	    		vSQL=[]
// 	    		appendFileText(serverPath+"/log/mukesh.txt","\n vSQL 2222 "+vSQL);
// 	    		appendFileText(serverPath+"/log/mukesh.txt","\n vSQL key 1111 "+key);
// 	    		appendFileText(serverPath+"/log/mukesh.txt","\n if vFkey is null ");
// 	    		vSQL[vSQL.length]=PTmkey;
// 	    		vValues[vValues.length]= vDecObj[vTablename][PTmkey];
// 				appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr mukesh 12345 : "+tempWhr);  
				childtempWhr[childtempWhr.length]=tempWhr
				deleteclause[deleteclause.length]=tempWhr
// 				appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr length mukesh 12345 : "+tempWhr.length);  
		
				for(var i=0;i<tempWhr.length;i++)
				{
					var tempsql=tempWhr[i]
// 					appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr tempsql mukesh 12345 : "+tempsql);  
					tempsql=tempsql.split('=')
// 					appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr tempsql mukesh 123456 : "+tempsql);  
					
					vSQL[vSQL.length]=tempsql[0];
					
				}
	    	}
	    	
	    	else
	    	{
// 		    	appendFileText(serverPath+"/log/mukesh.txt","\n vSQL 3333 "+vSQL);
// 		    	appendFileText(serverPath+"/log/mukesh.txt","\n else vFkey is null ");
	      		for(var vfindx = 0 ; vfindx < vFkey.length; vfindx++)
	      		{
	      			fkey_ind=vFkey[vfindx].split("=")
			    	//check if key pair defined properly
			    	if(fkey_ind.length<2)continue;
// 			    	appendFileText(serverPath+"/log/mukesh.txt","\n vvParamdata parent 1 : "+JSON.stringify(vvParamdata));
// 			    	appendFileText(serverPath+"/log/mukesh.txt","\n vvParamdata delete_insert_flag parent 1 : "+vvParamdata.delete_insert_flag);
// 			    	
// 			    	appendFileText(serverPath+"/log/mukesh.txt","\n vvParamdata parent 3 : "+vvParamdata[fkey_ind[0]]);
// 			    	appendFileText(serverPath+"/log/mukesh.txt","\n fkey_ind[0] child 2 : "+fkey_ind[0]);
// 			    	appendFileText(serverPath+"/log/mukesh.txt","\n fkey_ind[1] child 2 : "+fkey_ind[1]);
// 			    	
// 			    	appendFileText(serverPath+"/log/mukesh.txt","\n childtempWhr before : "+childtempWhr);
			    	childtempWhr[childtempWhr.length]=fkey_ind[1]+" = '"+_encode(vvParamdata[fkey_ind[0]])+"'"
			    	deleteclause[deleteclause.length]=fkey_ind[1]+" = '"+vvParamdata[fkey_ind[0]]+"'"
// 			    	appendFileText(serverPath+"/log/mukesh.txt","\n childtempWhr after : "+childtempWhr);
			    	
			    	//temp changes
			    	
			    	vSQL=[]
			    	vSQL[vSQL.length]=fkey_ind[1];
			    	

	      		}
  			}
//   			appendFileText(serverPath+"/log/mukesh.txt","\n deleteclause after else mukesh 12345 : "+deleteclause);  
			
//   			appendFileText(serverPath+"/log/mukesh.txt","\n vSQL 4444 "+vSQL);
			if(thisaction=="modify")
			{
				var childexist=" select * from "+key+" where " + childtempWhr.join(" and ");
// 				appendFileText(serverPath+"/log/mukesh.txt","\n childexist : "+childexist);  
				
				childexist=SQLResultset(childexist);
				
// 				appendFileText(serverPath+"/log/mukesh.txt","\n childexist recordcount : "+childexist.recordcount);  
// 				appendFileText(serverPath+"/log/mukesh.txt","\n childexist : "+JSON.stringify(childexist));  
				
				var valMsg=DBSchema.transValidate(key,'modify',vtempParamdata);
				// 	appendFileText(serverPath+"/Multitable.txt","\n Validations msg: "+valMsg);
				if(valMsg!="") return '{"status":"unsuccess","msg":"","error":"'+valMsg+'"}';
				
// 				appendFileText(serverPath+"/log/mukesh.txt","\n vtempParamdata mukesh : "+JSON.stringify(vtempParamdata));  
// 				appendFileText(serverPath+"/log/mukesh.txt","\n vtempParamdata child delete_insert_flag parent 1 : "+vtempParamdata.delete_insert_flag);
								
				var insertfield=[];
				var insertvalues=[];
				var tempsql1
				for(var i=0;i<childtempupdateWhr.length;i++)
				{
// 					appendFileText(serverPath+"/log/mukesh.txt","\n childtempupdateWhr[i] : "+childtempupdateWhr[i]);  						
					tempsql1=childtempupdateWhr[i]+""
// 					appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr tempsql mukesh 12345 : "+tempsql);  
					tempsql1=tempsql1.split('=')
// 					appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr tempsql mukesh 123456 : "+tempsql);  
					
					insertfield[insertfield.length]=tempsql1[0];
					insertvalues[insertvalues.length]=tempsql1[1];
				
				}
				
// 				appendFileText(serverPath+"/log/mukesh.txt","\n insertfield 11 : "+insertfield);  
// 				appendFileText(serverPath+"/log/mukesh.txt","\n insertvalues 11 : "+insertvalues);
// 				appendFileText(serverPath+"/log/mukesh.txt","\n childtempWhr before for : "+childtempWhr);  												
				var temp_sql1="";
				var vtemp_sql="";
				for(var i=0;i<childtempWhr.length;i++)
				{
// 					appendFileText(serverPath+"/log/mukesh.txt","\n childtempWhr[i] : "+childtempWhr[i]);  						
					temp_sql1=childtempWhr[i]+""
// 					appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr tempsql mukesh new : "+typeof(temp_sql1));  
					temp_sql1=temp_sql1.split('=')
// 					appendFileText(serverPath+"/log/mukesh.txt","\n tempWhr tempsql mukesh new : "+temp_sql1);  
					
					insertfield[insertfield.length]=temp_sql1[0];
					insertvalues[insertvalues.length]=temp_sql1[1];
				
				}
				
// 				appendFileText(serverPath+"/log/mukesh.txt","\n insertfield 12345 : "+insertfield);  
// 				appendFileText(serverPath+"/log/mukesh.txt","\n insertvalues 12345 : "+insertvalues); 
				
				
				
				if(childexist.recordcount>0)
				{
					if(vtempParamdata.delete_insert_flag==undefined)
					{
// 						updnewSql[updnewSql.length]=" delete from "+key+" where "+childtempWhr.join(" and ");\\testing
// 						deletestatement[deletestatement.length]=" delete from "+key+" where "+deleteclause.join(" and ");
						updnewSql[updnewSql.length]=" insert into "+key+"("+insertfield.join(',')+") values ("+insertvalues.join(',')+") "						
					}
					else
					{
						updnewSql[updnewSql.length]="update "+key+ "  set " +childtempupdateWhr.join(',')+" where "+childtempWhr.join(" and ")
					}
				}
				else if(childexist.recordcount==0)
				{
// // 					updnewSql[updnewSql.length]=" delete from "+key+" where "+childtempWhr.join(" and ");
					
// 					appendFileText(serverPath+"/log/mukesh.txt","\n vSQLchild 12345 : "+vSQLchild);  
// 					appendFileText(serverPath+"/log/mukesh.txt","\n vSQL 12345 : "+vSQL);  
// 					appendFileText(serverPath+"/log/mukesh.txt","\n vValueschild 12345 : "+vValueschild);  
// 					appendFileText(serverPath+"/log/mukesh.txt","\n vValues 12345 : "+vValues);  
					
 
					
// 					updnewSql[updnewSql.length]=" insert into "+key+"("+vSQLchild.join(',')+" ,"+vSQL.join(',')+") values ("+vValueschild.join(',')+" ,"+vValues.join(',')+" ) "
					
					updnewSql[updnewSql.length]=" insert into "+key+"("+insertfield.join(',')+") values ("+insertvalues.join(',')+") "
					
				}
				

			}
			else if (thisaction == "deleted" && !iwebz.soft_delete)
		 	{
				 updnewSql[updnewSql.length]=" DELETE FROM "+ key +" "+" where "+childtempWhr.join(" and ");
			}
			else
			{
			   	updnewSql[updnewSql.length]= "update "+ key + "  set deleted='Y' where " +childtempWhr.join(" and ");
		   	}
			
// 	     	appendFileText(serverPath+"/log/mukesh.txt","\n updnewSql final query : "+updnewSql.join(';'));
			
	var chk_audit_exist=getCode("select count(*) from tab where upper(tname) like 'AUDIT_"+key.toUpperCase()+"'")
// 	appendFileText(serverPath+"/Multitable.txt","\n chk_audit_exist "+chk_audit_exist);
// 	appendFileText(serverPath+"/Multitable.txt","\n chk_audit_exist value "+(chk_audit_exist!=0));
			if (chk_audit_exist!=0)
			{
					var audRespchild= makeAudit(
					      {
					        issql:true
					        ,tab:key
					        ,opr:thisaction
					        ,res:thisaction
					        ,user:userObj.user_id
					        ,sqlwhr:childtempWhr.join(" and ")
					      });       
					      
		// 			      appendFileText(serverPath+"/log/mukesh.txt","\n audRespchild audit query "+audRespchild) 	
					      
					      updnewSql[updnewSql.length]=audRespchild	     	
			}	  	
    	}
    	
    	if(vtempParamdata.delete_insert_flag==undefined)
		{	
    	deletestatement[deletestatement.length]=" delete from "+key+" where "+deleteclause.join(" and ");
		}	

     	
// // // // 		if(deletestatement.length==0)
// // // // 		{
// // // // // 			var wherevalue='vtempParamdata.'+vTmpPK
// // // // // 			wherevalue=eval(wherevalue)
// // // // // 			appendFileText(serverPath+"/log/mukesh.txt","\n deletestatement wherevalue 111111111111 : "+wherevalue);		 	
// // // // 			
// // // // //  			deletestatement[deletestatement.length]=" delete from "+key+" where "+vTmpPK+" = '"+wherevalue+"'"
// // // // //  			appendFileText(serverPath+"/log/mukesh.txt","\n deletestatement vtempParamdata 111111111111 : "+JSON.stringify(vtempParamdata));
// // // // 		}
		
		
		
	}
	var finalquery=""
	if(thisaction=='deleted')
	{
		finalquery=" begin "+updnewSql.join(';')+" ; end;"  				
	}
	else
	{
		if(deletestatement.length>0)
		{
	 		finalquery=" begin "+deletestatement.join(';')+";"+updnewSql.join(';')+" ; end;"  				
		}
		else
		{
			finalquery=" begin "+deletestatement.join(';')+" "+updnewSql.join(';')+" ; end;"  				
		}
	}
	 // appendFileText(serverPath+"/multitable.txt","\n\n\n finalquery of update : "+finalquery);	
	 var finalresp=execSQL(finalquery)
	
	if(final_cust_update!=undefined && final_cust_update!=null && final_cust_update!="")
	{
		// appendFileText(serverPath+"/log/CustomFields.txt","\n final_cust_update : "+final_cust_update);	
		final_cust_update=execSQL("BEGIN \n "+final_cust_update+"\n END;");
//		appendFileText(serverPath+"/log/CustomFields.txt","\n finalresp status : "+finalresp.status);
	}

	 
// 	 appendFileText(serverPath+"/log/mukesh.txt","\n finalresp before : "+JSON.stringify(finalresp));	
// 	 appendFileText(serverPath+"/log/mukesh.txt","\n finalresp before : "+finalresp);	

	finalresp=encodeEscapeCharacters(finalresp);	 
// 	appendFileText(serverPath+"/log/mukesh.txt","\n finalresp after : "+JSON.stringify(finalresp));	
	return finalresp;
	}
	catch(e)
	{
		appendFileText(serverPath+"/log/mukesh.txt","\n error *********** : "+e);	
	}
}


// *********** Log4J functions ********* //
//var ApplicationLog=  new org.apache.log4j.Logger.getLogger("com.FUNDS_WEB");


var objErrLogger ;
var objDbLogger ;

//var fa1 =fa1|| new org.apache.log4j.FileAppender();
/**
 *@event      GetModuleLogger.
 *@desc       Configure new Loggger for module
 *@author     Shital P
 *@dated      06/12/2012 15:30:48
 *@flname      flname{String} - module name

 **/

function GetModuleLogger(flname)
{
	
	try{
		
		try
		{
			var logLevel= GetParameterByName("LogLevel","")|| 0;
		}
		catch(e)
		{
			logLevel= '0';
		}	
		
		// for Error Log file
		 objErrLogger=org.apache.log4j.Logger.getLogger(flname + "_Error");
		var fa= objErrLogger.getAppender(flname + "_Error");
		if (fa == null){
			var fa = new org.apache.log4j.FileAppender();
			fa.setName(flname + "_Error");
			fa.setFile(serverPath + "/log/" + flname + "_Error.log");
			
			//fa.setLayout(new org.apache.log4j.PatternLayout("<span style='font:12px Courier; color:blue;'>%t %d %X{client} %-5p [%c{1}] %m%n </span> <br/>"));

			fa.setLayout(new org.apache.log4j.PatternLayout("%t %d %X{client} %-5p [%c{1}] %m%n"));
			//fa.setLayout(new org.apache.log4j.HTMLLayout());
			//fa.layout=new org.apache.log4j.HTMLLayout();
		
			if(logLevel == '0')
				fa.setThreshold(org.apache.log4j.Level.ERROR);
			else
				fa.setThreshold(org.apache.log4j.Level.DEBUG);	
			// Logger.getLogger(MyClass.class).setLevel(Level.INFO);
		
			fa.setAppend(true);
			fa.activateOptions();
			//objErrLogger.removeAllAppenders();
			objErrLogger.addAppender(fa);
			objErrLogger.setAdditivity(false);
                	}
	
  		//setMaxFileSize
  		// for Debug Log file
		 objDbLogger=org.apache.log4j.Logger.getLogger(flname + "_Debug");
		
		var fa1= objDbLogger.getAppender(flname + "_Debug");
		
		if (fa1 == null)
		{
			var fa1 = new org.apache.log4j.FileAppender();
			fa1.setName(flname + "_Debug");
			fa1.setFile(serverPath + "/log/" + flname + "_Debug.log");
			
         		fa1.setLayout(new org.apache.log4j.PatternLayout("%t %d %X{client} %-5p [%c{1}] %m%n"));
//			fa1.setLayout(new org.apache.log4j.PatternLayout("<span style='font:12px Courier; color:blue;'>%t %d %X{client} %-5p [%c{1}] %m%n </span> <br/>"));

	
			if(logLevel == '0')
				fa1.setThreshold(org.apache.log4j.Level.ERROR);
			else
				fa1.setThreshold(org.apache.log4j.Level.DEBUG);	
		
			fa1.setAppend(true);
			fa1.activateOptions();
			//objDbLogger.removeAllAppenders();
			objDbLogger.addAppender(fa1);
			objDbLogger.setAdditivity(false);
  		}
 		

	   }
	catch(e)
			{
				LogError("\n FUNDS_WEB : " + e); 
			}	
	
}



/**
 *@event      LogError.
 *@desc       Log Error in Application Log
 *@author     Shital P
 *@dated      06/12/2012 15:30:48
 *@info      info{String} - information to log

 **/
 
function LogError(info)
{
	// %X{client}
	org.apache.log4j.MDC.put("client", userObj.user_name);
//	ApplicationLog.error(info);
	org.apache.log4j.MDC.remove("client");
	
}

/**
 *@event      LogDebug.
 *@desc       Log Debug info in Application Log
 *@author     Shital P
 *@dated      06/12/2012 15:30:48
 *@info      info{String} - information to log

 **/
function LogDebug(info)
{
	// %X{client}
	org.apache.log4j.MDC.put("client", userObj.user_name);
//	ApplicationLog.debug(info);
	org.apache.log4j.MDC.remove("client");
	
}

/**
 *@event      LogModuleError.
 *@desc       Log Error in Module log file
 *@author     Shital P
 *@dated      06/12/2012 15:30:48
 *@info      info{String} - information to log

 **/
 
function LogModuleError(info)
{
	// %X{client}
	org.apache.log4j.MDC.put("client", userObj.user_name);
	objErrLogger.error(info);
	org.apache.log4j.MDC.remove("client");
	
}

/**
 *@event      LogModuleDebug.
 *@desc       Log Debug info in Module log file
 *@author     Shital P
 *@dated      06/12/2012 15:30:48
 *@info      info{String} - information to log

 **/
function LogModuleDebug(info)
{
	// %X{client}
	org.apache.log4j.MDC.put("client", userObj.user_name);
	objDbLogger.debug(info);
	org.apache.log4j.MDC.remove("client");
	
}
// *********** Log4J functions ********* //





/**
 *@event      roleNameDupCheck
 *@desc       Checks if the role name already exist. 
 *@author     Mohini
 *@dated      19-09-2011
 *@param      rolename 
 **@return    Returns boolean value
**/
function roleNameDupCheck(roleObj)
{
  var vSQL;
  	if(roleObj.action=='add')
  	{
	vSQL = "select * FROM iwz_role_master where Lower(rolename)=trim(Lower('"+roleObj.rolename+"'))";
	}
	else if(roleObj.action=='modify')
	{
		vSQL = "select * FROM iwz_role_master where Lower(rolename)=trim(Lower('"+roleObj.rolename+"')) and roleid <>'"+roleObj.roleid+"'";
	}
//	appendFileText(serverPath+"/log/mohini.txt","\n vSQL : "+vSQL );
	vSQL=SQLResultset(vSQL);
  	if(vSQL.recordcount>0) return false;
  	return true;

}

// iwebz.execProcessValidation=function(JString)
// {
// 	var val_qry="";
// 	var conArr=[];
// 	var sucArr=[];
// 	var uscArr=[];
// 	try
// 	{
//     //appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\nJString.scr_ref" +JString.scr_ref);
// 		JString.scr_ref=JString.scr_ref||"";
// 		JString.action=JString.action||"";
// 		JString.paramdata=JString.paramdata||{};
// 		if(JString.scr_ref=="" || JString.action=="" || !JString.paramdata)
// 			return {"status":"unsuccess","msg":"","error":"Parameters not found."}
// 			
// 		val_qry="SELECT scr_ref, event, func, val_by FROM wm_processvalidations WHERE scr_ref='"+_encode(JString.scr_ref)+"' AND event='"+_encode(JString.action)+"'" 
// 		//appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\nval_qry " +val_qry);
// 		val_qry=SQLResultset(val_qry);
// 		if(val_qry.recordcount==0)
// 			return{"status":"success","msg":"","error":""}
// 		else
// 		{
// 			//appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n in else" );
// 			var temp=JString.paramdata;//JSON.stringify(JString.paramdata);
// //       appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n after temp " +JSON.stringify(temp));
// // 			if (typeof (temp) =='Object' || typeof (temp) =='object' )
// // 				temp = JSON.stringify(temp);
// 			for(var i=0;i<val_qry.recordcount;i++)
// 			{
// 				val_qry.recordno=i;
//  				try
//  				{
// 					response=null
//           obj=null
// 					//appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n val_qry.fieldbyname('func') " +val_qry.fieldbyname('func'));
// 					
// 					//response=eval(val_qry.fieldbyname('func')+"("+temp+")");
//            obj="{'handler':function(o){return "+val_qry.fieldbyname('func')+"(o)}}";
//            appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n eval expression " +obj);
//           obj= eval('('+obj+')')
//           response=obj.handler(JString.paramdata)
// 					//appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n response.status" +response.status);
// 					if (response.status =="unsuccess")
// 						uscArr[uscArr.length]=(response["msg"]||"") + " "+ (response["error"]||"")
// 					if ( (response.status).toLowerCase() =="confirm" && JString._ignore_prc_con!='y')
// 						conArr[conArr.length]=(response["msg"]||"") + " "+ (response["error"]||"")
// 					if ( (response.status).toLowerCase() =="success")
// 						sucArr[sucArr.length]=response.msg
// 				}
// 				catch(e)
// 				{
// 					appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n Error occurred in execProcessValidation " +e+" func: "+val_qry.fieldbyname('func'));
// 					uscArr[uscArr.length]="Error occurred while executing a process."
// 					return {"status":"unsuccess","error":"Error occurred while executing the process. ","msg":""}
// 				}
// 			}
// 			//return{"status":"success","confirm":conArr,"success":sucArr,"unsuccess":uscArr}

// 			if (uscArr.length>0)
// 				return {"status":"unsuccess","error":uscArr.join("<br>"),"msg":""}
// 			if (conArr.length>0)
// 				return {"status":"confirm","error":conArr.join("<br>"),"msg":""}
// 			
// 			return {"status":"success","error":"","msg":sucArr.join("<br>")}		
// 		}
// 	}
// 	catch(e)
// 	{
// 		uscArr[uscArr.length]="Error occurred in execution a process."
// 		appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n Error occurred in execProcessValidation " +e);
// 		return{"status":"unsuccess","error":"Error occurred while executing the configured processes.","msg":""}
// 	}
// } 


/*
Start of 
Custom Configuratuion Code
*/
ifwk.getScreenConfig = function(screen_name)
{
	var get_evt_config = "select a.*,to_char(sysdate,'"+iwebz.globalDateFormat+"') today,to_char(sysdate,'"+iwebz.globalTimeFormat+"') systime from iwz_evt_fld_config a where scr_ref = '"+screen_name+"' order by filter desc";
	get_evt_config = SQL(get_evt_config);
	return get_evt_config;
}

//Added by Harshit - 26032014 - To make log table for custom tables
function makeLog(vObj)
{
	var vSQL = "insert into log_"+vObj.tab+" select "+vObj.tab+".*,'"+vObj.res+"','" +vObj.user+"' ,sysdate,'"+vObj.opr+ "','1' from "+vObj.tab+" where "+vObj.sqlwhr+";";
	
	if(vObj.issql)
	 return vSQL;
  else
    return execSQLResultset(vSQL);
}


// added for custom validations on 06-05-2014

//15:27 08 August 2016
iwebz.execProcessValidation=function(JString)
{
	var val_qry="";
	var conArr=[];
	var sucArr=[];
	var uscArr=[];
	try
	{
		JString.scr_ref=JString.scr_ref||"";
		JString.action=JString.action||"";
		JString.paramdata=JString.paramdata||{};
		if(JString.scr_ref=="" || JString.action=="" || !JString.paramdata)
			return {"status":"unsuccess","msg":"","error":"Parameters not found."}
			
		val_qry="SELECT scr_ref, event, func, val_by FROM iwz_processvalidations WHERE scr_ref='"+_encode(JString.scr_ref)+"' AND event='"+_encode(JString.action)+"'" 
		val_qry=SQLResultset(val_qry);
		if(val_qry.recordcount==0)
			return{"status":"success","msg":"","error":""}
		else
		{
			//appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n in else" );
			var temp=JString.paramdata;//JSON.stringify(JString.paramdata);
			
//       appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n after temp " +JSON.stringify(temp));
// 			if (typeof (temp) =='Object' || typeof (temp) =='object' )
// 				temp = JSON.stringify(temp);
			for(var i=0;i<val_qry.recordcount;i++)
			{
				val_qry.recordno=i;
 				try
 				{
					response=null
					obj=null

					obj="{'handler':function(o){return "+val_qry.fieldbyname('func')+"(o)}}";
				
//					appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n eval expression " +obj);
					obj= eval('('+obj+')');
					response=obj.handler(JString.paramdata);
					
//					appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n response : "+JSON.stringify(response));

					if (response.status =="unsuccess")
						uscArr[uscArr.length]=(response["msg"]||"") + " "+ (response["error"]||"")
					if ( (response.status).toLowerCase() =="confirm" && JString._ignore_prc_con!='y')
						conArr[conArr.length]=(response["msg"]||"") + " "+ (response["error"]||"")
					if ( (response.status).toLowerCase() =="success")
						sucArr[sucArr.length]=response.msg
				}
				catch(e)
				{
					appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n Error occurred in execProcessValidation " +e+" func: "+val_qry.fieldbyname('func'));
					uscArr[uscArr.length]="Error occurred while executing a process."
					return {"status":"unsuccess","error":"Error occurred while executing the process. ","msg":""}
				}
			}
			//return{"status":"success","confirm":conArr,"success":sucArr,"unsuccess":uscArr}
			if (uscArr.length>0)
				return {"status":"unsuccess","error":uscArr.join("<br>"),"msg":""}
			if (conArr.length>0)
				return {"status":"confirm","error":conArr.join("<br>"),"msg":""}
			
			return {"status":"success","error":"","msg":sucArr.join("<br>")}		
		}
	}
	catch(e)
	{
		uscArr[uscArr.length]="Error occurred in execution a process."
		appendFileText(serverPath+"/log/custom_validation"+getServerDate()+".txt","\n Error occurred in execProcessValidation " +e);
		return{"status":"unsuccess","error":"Error occurred while executing the configured processes.","msg":""}
	}
}


/**
 *@event      isSystemCheck
 *@desc       Checks whether selected record has system value yes or not. 
 *@author     Shrinath 
 *@dated      06-07-2011
 *@param      roleid 
 **@return    Returns boolean value
**/
function roleDupCheck(roleid)
{
	
  var vSQL;
	vSQL = "select * FROM iwz_role_master where roleid='"+roleid+"'" ;
	vSQL=SQLResultset(vSQL);
  	if(vSQL.recordcount>0) return false;
  return true;
}


// Added by Harshit - 06082014 - EOD Jobs - Report Dataset
rep_dataset.fundfactsheet=" SELECT Trunc(SYSDATE) tdate, portcode, portname, fund_name  FROM tbl_portmast pm ";

//

//Added by Varsha on 1st Nov 2014
function getServerDateHH()
{ 
	return formatDate(new java.util.Date(),iwebz.globalDateFormat+" HH");
}


//Added by mohsin to get Insert statement with and withound begin end block for non master on : 15 Dec 2014 | 01:18:46 PM  (+5:30 IST)
function getInsertData_NonMaster(vParamdata,vTablename,begin_end_flag)
{  
	var begin_end_flag=begin_end_flag||"true";
	var insertArr=new Array();
// 	appendFileText(serverPath+"/log/mohsin.txt","\n final getInsertData_NonMaster begin_end_flag :"+begin_end_flag);
	if(!vParamdata || !vTablename )
		return '{"status":"unsuccess","error":"Invalid data","msg":""}'

//	var insert=""	
	for(var i=0;i<vParamdata.recordcount;i++)
	{
// 		appendFileText(serverPath+"/log/harshit.txt","\n loop :"+i);
//		insert+=" insert into "+vTablename+"("+vParamdata.fields+") values ("
		insertArr[insertArr.length]=" insert into "+vTablename+"("+vParamdata.fields+") values ("
		
		for(var j=0;j<vParamdata.fields.length;j++)
		{
			var data=vParamdata.data[i][j];
			if(data==null || data==undefined)
				data="";
				
//			insert+="'"+data+"'";
			insertArr[insertArr.length]="'"+data+"'";
			
			if(j != vParamdata.fields.length-1)
				insertArr[insertArr.length]=","
//				insert+=","
		}
		
		
		
//		insert+="); "
		insertArr[insertArr.length]="); \n"
//	   	appendFileText(serverPath+"/log/mohsin.txt","\n insert -  "+i);
	}
	
// 	appendFileText(serverPath+"/log/harshit.txt","\n final insert : "+insert );
	
//	if(insert != "")
//		insert="BEGIN  "+insert+" END;  ";
//	else
//		return ''
	if(insertArr.length==0)
	{
		return '';
	}
	else
	{
		if(begin_end_flag=="true")
			return ("BEGIN \n"+insertArr.join("\n")+" END;");
		else
			return (" "+insertArr.join(" ")+" ");
	}

// 	return (insert.toString());		
}


// Hash Password

function hashUserMasterPassword(uid)
{
	
	var hashObj="";
	var vSQL="";
	var hPass="";
	var systemUserId=userObj.user_id || uid;
	try
	{
		var rndPass=org.owasp.esapi.ESAPI.randomizer().getRandomString(8,org.owasp.esapi.reference.DefaultEncoder.CHAR_ALPHANUMERICS);
		hPass=""+rndPass;
		hashObj= new jsSHA(hPass, "TEXT");
		hashObj=hashObj.getHash("SHA-512", "HEX");
		vSQL=vSQL+" update iwz_user_master set password='"+hashObj+"',password_expire='Y' where lower(user_id)='"+uid.toLowerCase()+"' ;";
		vSQL=vSQL+" INSERT INTO audit_iwz_user_master(USER_ID, USER_NAME, PASSWORD, BRANCH_CODE, PROFILE_ID, EXPIRY_DAYS, CREATION_DATE, LASTPWD_UPDATED, ACTIVE, CREATED_BY, USER_SHORT_CODE, IP_ADDRESS, LOCKED, SESSIONID, LAST_LOGIN_TIME, LASTLOGINIP, LAST_ACCESSTIME, LOCATION, LOGIN_FLAG, COUNTER, LIMITS, REPORTS_TO, VISIBLE, ISADMIN, DELETED, EMAIL_ID, ENTITY_CODE, PASSWORD_EXPIRE, INACTIVE_APPLICABLE, INACTIVE_DATE, MAC_ADDRESS, SYS_AUDITREASON, SYS_USERID, SYS_AUDITDATE, SYS_OPERATION, SYS_AUDIT_ID) SELECT a.*,'reset password' AUDITREASON, '"+systemUserId+"'USERID, SYSDATE AUDITDATE, 'modify'OPRATION,1 AUDIT_ID FROM  iwz_user_master a WHERE lower(user_id)='"+uid.toLowerCase()+"' ;";
		vSQL=execSQLResultset("Begin "+vSQL+" End;");
    if(vSQL.status=="success")
      return {"status":"success","msg":"","error":"","password":rndPass};
    else
      return {"status":"unsuccess","msg":"","error":vSQL.error,"password":""};  
	}
	catch(error)
	{
		appendFileText(serverPath+"/log/resetPassword.txt","\n resetPassword error: "+error);
		return {"status":"unsuccess","msg":"","error":error,"password":""};
  }
}


//Password expiry function

function checkExpiryDateValidation()
{
		var auth_mode=getParameter("authentication_mode")||"";	
		if(auth_mode!="application")
			return '{"status":"unsuccess","msg":""}';
		var vSql="SELECT (expiry_days -(Trunc(SYSDATE)-Trunc(lastpwd_updated))) as daysLeft   FROM iwz_user_master  WHERE user_id='"+userObj.user_id+"' and (expiry_days -(Trunc(SYSDATE)-Trunc(lastpwd_updated)))<=(SELECT To_Number(paramvalue)  FROM iwz_parameter where paramname='pass_expiry_date_alert')";
		vSql=SQLResultset(vSql);
		if(vSql.recordcount==0)
			return '{"status":"unsuccess","msg":""}';
		return '{"status":"success","msg":"'+vSql.data[0]+'"}';
}

//Event notification

function sendPassResetNotification(vObj)
{
  var level="1"
  var event_id=vObj.emailevent||"E3";
  var vdata="{'user_id':'"+vObj.user_id+"','user_name':'"+vObj.user_name+"','email_id':'"+vObj.email_id+"','pwd':'"+vObj.password+"'}"
  var vObj={"event_id":event_id,"level":"1","vdata":vdata};
  var response=iEN.onProcessNotification(vObj);
  return response;
}

/**
 *@event      iwebz.callWebService.
 *@desc       call web service 
 *@author     Mohini
 *@dated      28-10-2013 4:16:42 PM
 *@param      postMessage{String} - Web Service Messgage
 *@param      eventtype{String} - Web Service event
 *            sslurl (String ) Web Service URL
 *@return     JSON Object
**/
iwebz.callWebService=function(vObj)
{
  var xmldata ="";   
  var JsonObj;
  var soapmessage='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.webz/"><soapenv:Header/><soapenv:Body><ser:InterfaceGateway><arg0>{"callback":"'+vObj.callback+'",source:"'+vObj.source+'","servicetype":"'+vObj.servicetype+'","unique_id":"'+vObj.unique_id+'","data":"'+vObj.data+'"}</arg0></ser:InterfaceGateway></soapenv:Body></soapenv:Envelope>';
  var cfgObj=iSettings[vObj.source+"_cfg"][vObj.servicetype];
  if(!cfgObj['ws-connection'].secured)
  	xmldata = webServiceClient.subscribeHTTP(soapmessage,"InterfaceGateway",cfgObj['ws-connection'].url);
  else
  {
  	if(!cfgObj['ws-connection'].auth_flag)
  		xmldata = webServiceClient.subscribe(soapmessage,"InterfaceGateway",cfgObj['ws-connection'].url);
  	else
  		xmldata = webServiceClient.sslWebServiceCall(soapmessage,cfgObj['ws-connection'].url);
  }

  if(xmldata=="")
    return {"status":"unsuccess","msg":"","error":"No data found"};
 	try
  {
    xmldata = webServiceClient.XMLtoJSON(xmldata);
    JsonObj =eval('('+xmldata+')');
    // appendFileText(serverPath+"/log/iWS.txt","\n JsonObj "+JsonObj);
    return {"status":"success","msg":"","error":"","jsonobj":JsonObj};
  }
  catch(error)
  {
    // appendFileText(serverPath+"/log/iWS.txt","\n error : "+error);
    return {"status":"unsuccess","msg":"","error":"Exception occurred."}; 
  }  
}

/**
 *@event      getWebServiceSeq.
 *@desc       Get webservice sequence
 *@author     Mohini
 *@dated      28-10-2013 3:56:15 PM
 *@return     Sequence no
**/
function getWebServiceSeq()
{
  return SQLResultset("Select webservice_seq.nextval from dual").data[0][0];
}

/**
 *@desc       get data  
 *@author     Mohini
 *@dated      08-09-2015 8:08:17 PM            
  source
  data
  unique_id
  servicetype
  callback  
**/
iwebz.getInterfaceData=function(vObj)
{
  var str_exp=""
  if(!vObj.source || !vObj.data || !vObj.unique_id || !vObj.servicetype || !vObj.callback)
    return '{"status":"unsuccess","msg":"","error":"Insufficent data.Please specify all the parameters."}';
  if(iSettings[vObj.source+"_cfg"][vObj.servicetype].calltype=="webservice")
  {
    response=iwebz.callWebService(vObj);
    // appendFileText(serverPath+"/log/iWS.txt","\n resposne : "+response.status);
    if(response.status=="unsuccess")
      return '{"status":"unsuccess","msg":"","error":"'+response.error+'"}';
    return response.jsonobj["soap:Envelope"]["soap:Body"]["ns2:InterfaceGatewayResponse"]["return"];
  }
  if(iSettings[vObj.source+"_cfg"][vObj.servicetype].calltype=="direct")
  {
    str_exp="{handler:function(obj){return new utils().getInterfaceData(obj);}}"
    str_exp=eval('('+str_exp+')')
  	var resposne=str_exp.handler(vparam)
    return response;
  }
  return '{"status":"unsuccess","msg":"","error":"Please specify the call type"}';

}

// function onGetSecurityInterfaceData()
// {
  // var vObj={"source":"bloomberg","servicetype":"corporate_action","callback":"iupl.oniDatasetUploadData","data":"[]","unique_id":"101"}
  // response=iwebz.getInterfaceData(vObj);
  // return response;  
// }
  
  
function getDownloadFileName(repid)
  {
	  var vSql="";
	  fileInfo={};
	  vSql="select repxml,REP_NAME from iwz_reports_config where repid='"+repid+"' ";
	  vSql=SQLResultset(vSql);
	  //if(vSql.status="success")
		 // appendFileText(serverPath+"/log/Append.txt","\n vSql: "+JSON.stringify(vSql));
	 //fileInfo={"filepath":vSql.fieldbyname('repxml'),"filename":vSql.fieldbyname('REP_NAME')};
	  return vSql.fieldbyname('repxml');
	}
	
	
	
	
	/**
 *@event      getWebServiceUserDetails.
 *@desc       Get web service default user details 
 *@author     Mohini
 *@dated      25-03-2014
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function getWebServiceUserDetails()
{
  var userJobObj='';
  var v_user=""
  var vSQL="SELECT paramvalue FROM iwz_parameter WHERE PARAMNAME='webservice_userid'";
  vSQL=SQLResultset(vSQL);
  if(vSQL.recordcount==0)
    return {"status":"unsuccess","msg":"","error":"Please set the userid for web service engine."};
  
  v_user=vSQL.data[0][0];
  if((v_user+"").trim()=="")
    return {"status":"unsuccess","msg":"","error":"Please set the userid for web service engine."};
  
   var vSQL="SELECT * from iwz_user_master u where user_id='"+ _encode(v_user) +"' and active='Y'"
  vSQL=SQLResultset(vSQL);
  if(vSQL.recordcount==0)
    return {"status":"unsuccess","msg":"","error":"Please create a user for web service engine"};
   
   userJobObj+="{" 
  for(var i = 0 ; i < vSQL.fields.length ;i++)
    userJobObj+='"'+vSQL.fields[i]+'":"'+vSQL.fieldbyname(vSQL.fields[i])+'",'; 			

  userJobObj+='"profileid":"'+vSQL.fieldbyname("profile_id")+'",';
  userJobObj+='"userid":"'+vSQL.fieldbyname("user_id")+'",';
  userJobObj+='"branchcode":"'+vSQL.fieldbyname("branch_code")+'",';

  var vSQL="SELECT um.roleid ,rm.visibility,rm.rolename FROM iwz_user_role_master um,iwz_role_master rm WHERE user_id='"+_encode(v_user)+"' AND  um.roleid=rm.roleid"
  vSQL=SQLResultset(vSQL);
  userJobObj+="roles:["
  for(var k = 0 ; k < vSQL.recordcount; k++)
  {
    vSQL.recordno = k;
    if(k>0)
      userJobObj+=","
    userJobObj+='{"roleid":"'+vSQL.fieldbyname('roleid')+'","rolename":"'+vSQL.fieldbyname('rolename')+'","visibility":"'+vSQL.fieldbyname('visibility')+'"}'
  }
  userJobObj+="]}"
  
  
  try
  {
    userJobObj=eval('('+userJobObj+')')
  }
  catch(error)
  {
    return {"status":"unsuccess","msg":"","error":"error while evaluating"};
  }
  
  return {"status":"success","msg":"","userObj":userJobObj};
}



/**
 *@event      FunctionName.
 *@desc       Function Description
 *@author     Mohini
 *@dated      
 *@param      Param1{String} - param Description
 *@param      Param1{String} - param Description
 *@validation 
              * Val Desc                   
 *@return     Return Data Desc
 **/
function testCluster()
{
  appendFileText(serverPath+"/log/cluster.txt","\n Cluster test function ");
  return {"status":"success","msg":"Cluster is working..... :)","error":""};
}


function getDownloadLogFileName()
{
  var folder_path=request.getParameter("folder_name");
  if(!iwebz.logList[folder_path]) return "";
  return iwebz.logList[folder_path]["path"]+"/"+request.getParameter("filename");
}


	/**
 *@event      getLogAnalyzer
 *@desc    	 create grid for logfiles.
 *@dated      04-01-2016
 **/
function getLogAnalyzer(vObj)
{
	vObj.paramdata.Filepath=vObj.paramdata.Filepath||"";
	var vSQL="";
	var fpath="";
	var ext=[];
  var filename=""
	vSQL+='[';
	
	if(vObj.paramdata.Filepath=="")
		return '{"data":[],"folder_name":1,"recordcount":0,"fieldcount":6,"file_last_updated":3,"fields":["file_name","folder_name","file_size","file_last_updated","sr_no","rc_internal"],"file_name":0,"file_size":2,"sr_no":4,"rc_internal":5,"fieldsize":["32","32","32","32","32","32"],"totalcount":0,"sortcolumn":"","recordno":0,"filtered":false,"fieldtype":["String","String","String","String","String","String"],"columns":["FILE_NAME","FOLDER_NAME","FILE_SIZE","FILE_LAST_UPDATED","SR_NO","RC_INTERNAL"]}'
	
		fpath=iwebz.logList[vObj.paramdata.Filepath]["path"];
		ext=iwebz.logList[vObj.paramdata.Filepath]["ext"];
		appPath=listFiles(fpath);
  for(var i=0;i<appPath.length;i++)			
  {
    if(appPath[i]==null)  continue;
    //check if it is file
    if(!(new java.io.File(appPath[i]).isFile())) continue;
    if((ext.indexOf(appPath[i].substring(appPath[i].lastIndexOf(".")+1).toLowerCase()+""))!=-1)
    {
      filename=(appPath[i].substring(fpath.length)+"").replace(/\\/g,"/");
    	fAttr=fileAttribute(appPath[i])
		
    	vSQL+='["'+filename+'","'+vObj.paramdata.Filepath+'","'+(parseInt(Math.floor(fAttr[1]/1024))).toString().replace(/\B(?=(?:\d{3})+(?!\d))/g, ",")  +'","'+fAttr[0]+'"],';	 
    }
  }
   
	vSQL=vSQL.substring(0,vSQL.length-1)
	vSQL+=']';
	return '{"data":'+vSQL+',"folder_name":1,"recordcount":0,"fieldcount":6,"file_last_updated":3,"fields":["file_name","folder_name","file_size","file_last_updated","sr_no","rc_internal"],"file_name":0,"file_size":2,"sr_no":4,"rc_internal":5,"fieldsize":["32","32","32","32","32","32"],"totalcount":0,"sortcolumn":"","recordno":0,"filtered":false,"fieldtype":["String","String","String","String","String","String"],"columns":["FILE_NAME","FOLDER_NAME","FILE_SIZE","FILE_LAST_UPDATED"]}'
}

	/**
 *@event      fileAttribute
 *@desc    	  return fileAttribute of text file.
 *@dated      04-01-2016
 **/
function fileAttribute(Filepath)
{
  var stringArray=null;
  var fAttr=getFileAttributes(Filepath);
  fAttr = eval('('+fAttr+')');  
  if(fAttr.status=="unsuccess")
  {
       return null;  	 
  }
  stringArray=fAttr.msg.split('#');
  return stringArray;
}

	/**
 *@event      getLogList
 *@desc    	  Create drop down list for log files.
 *@dated      04-01-2016
 **/
function getLogList(Filepath)
{
	var str="<option value=''></option>"
	for (var key in iwebz.logList) 
		str+="<option value="+key+">"+key+"</option>"
	return str;
}

	/**
 *@event      ifwk.prependFileText
 *@desc    	  Prepend text at beginning of file.	
 *@dated      06-01-2016
 **/
ifwk.prependFileText=function(aFilePath,atext)
{
	var filepath_index="",temp_filepath="",objMkFolder="",prependfile="",text="";	
	try
	{
		filepath_index=aFilePath.lastIndexOf("/")
		temp_filepath=aFilePath.substring(0,filepath_index)	
		objMkFolder = new java.io.File(temp_filepath);
		if(!objMkFolder.isDirectory())
  			objMkFolder.mkdirs();    
		
		
		prependfile = new java.io.RandomAccessFile(aFilePath, "rws");
		
		text=FileObj.getFileText(aFilePath);
		
		prependfile.seek(0);
		prependfile.writeBytes(atext+"\n");
		if(text!="")
			prependfile.writeBytes(text);
	
		return {"status":"success","msg":"Data prepended successfully.","error":""}
		 
	}
	catch(e)
	{
		iwebz.logSystemError("Exception:"+e);
		return {"status":"unsuccess","msg":"","error":"Exception:"+e};
	}
	finally
	{
		if(prependfile!=null)
		{
			prependfile.close();
			prependfile=null;
		}
	}
	
}

	/**
 *@event      ifwk.removeFirstLine
 *@desc    	  Remove first line from text file.	
 *@dated      08-01-2016
 **/
ifwk.removeFirstLine=function(vSrc)
{
	var srcDir="";
	var data=new java.lang.StringBuilder();
	var readfile=null,text="",writefile=null;
	var datatext=new java.lang.StringBuilder();
	try
	{
		srcDir = new java.io.File(vSrc);
		if(!srcDir.exists())
		{	
			iwebz.logSystemError("Source file not found while removing first line.");
			return {"status":"unsuccess","msg":"","error":"Source file not found while removing first line."};
		}
		readfile = new java.io.BufferedReader(new java.io.FileReader(vSrc));
		data=readfile.readLine();
		if(data==null)
		{
			iwebz.logSystemError("Text file is empty..");
			return {"status":"unsuccess","msg":"","error":"Text file is empty."}; 
		}
		
		while(data=readfile.readLine())	
		{	
			datatext.append(data+"\n");
		}
		writefile = new java.io.BufferedWriter(new java.io.FileWriter(vSrc));
		writefile.write(datatext.substring(0,datatext.lastIndexOf('\n')));
		
		return {"status":"success","msg":"File read successfully.","error":""};
	}
	catch(e)
	{
		iwebz.logSystemError("Exception while reading file.Error:"+e);
		return {"status":"unsuccess","msg":"","error":"Exception:"+e};
	}
	finally
	{
		  if(readfile!=null)
		  {
			  readfile.close();
			  readfile=null;
		  }
		  if(writefile!=null)
		  {
			writefile.close();
			writefile=null;
		  }
	}
}

	/**
 *@event      ifwk.copyFolder
 *@desc    	  Copy folder from source to destination location.
 *@dated      07-01-2016
 **/
ifwk.copyFolder=function(vSrc,vDest)
{
	var srcDir="", destDir=""; 
	try
	{
		srcDir = new java.io.File(vSrc);
		if(!srcDir.exists())
		{	
			iwebz.logSystemError("Source File not found in copy function");
			return {"status":"unsuccess","msg":"","error":"Source File not found in copy function"};
		}
		destDir =  new java.io.File(vDest);
		org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
		
		return {"status":"success","msg":"Folder Copied Successfully.","error":""};
	}
	catch(e)
	{
		iwebz.logSystemError("Exception:"+e);
		return {"status":"unsuccess","msg":"","error":"Exception:"+e};
	}
	finally
	{
		srcDir="";
		destDir=""; 
	}
	
}
	/**
 *@event      ifwk.moveFolder
 *@desc    	  Move folder from source to destination location.
 *@dated      07-01-2016
 **/
ifwk.moveFolder=function()
{
	vSrc=serverPath+request.getParameter("vsrc");
	vDest=serverPath+request.getParameter("vdest");
	var srcDir="", destDir=""; 
	var del="";
	var result="";
	try
	{
		srcDir = new java.io.File(vSrc);
		if(!srcDir.exists())
		{	
			iwebz.logSystemError(srcDir+"Source File not found in move function");
			return {"status":"unsuccess","msg":"","error":"Source File not found in move function"};
		}
		
		destDir =  new java.io.File(vDest);
		if(destDir.exists())
		{	
			iwebz.logSystemError("Destination Directory already exist.");
			result=removeFolder(destDir);
			result=eval('('+result+')');
			 if(result.status!="success")
			 {
					iwebz.logSystemError("unable to delete .");
					return {"status":"unsuccess","msg":"","error":"Unable to delete directory."};	
			 }
		}	
		org.apache.commons.io.FileUtils.moveToDirectory(srcDir, destDir,true);
		srcDir.mkdirs();    
		
		return {"status":"success","msg":"Folder Moved Successfully.","error":""};
	}
	catch(e)
	{
		iwebz.logSystemError("Exception:"+e);
		return {"status":"unsuccess","msg":"","error":"Exception:"+e};
	}
	finally
	{
		srcDir="";
		destDir=""; 
	}
	
}

/**
 *@event      iwebz.logSystemError.
 *@desc       Log error in system log file 
 *@author     Mohini
 *@dated      06-02-2014 5:04:03 PM
 *@param      error{String} - error to be printed 
 *@return     Return Data Desc
**/
iwebz.logSystemError=function(error)
{
 var date1=new java.util.Date(); 
 var logdate=formatDate(date1,"dd-MM-yyyy");
 appendFileText(serverPath+"/log/SystemLog-"+logdate+".txt","\n "+date1+":"+error);
}



/**
 *@event      iwebz.insertEmailBodyAttachments
 *@desc       save the attachments in the table
 *@author     Mohini
**/
iwebz.insertEmailBodyAttachments=function(vObj)
{
  vObj.msg_files=vObj.msg_files||"";
  if((vObj.msg_files.trim())=="")
    return {"status":"success","msg":"","error":"No attachments present."};
    
  var files=(vObj.msg_files+"").split(",");
  var response="";
  var filename="";
  var vSQL=""
  
  for(var i=0;i<files.length;i++)
  {
    filename=files[i].substring(files[i].lastIndexOf("/")+1);
    vSQL=execSQLResultset("insert into iwz_email_attachments(msg_refno,srno,filename) values('"+vObj.msg_refno+"','A"+i+"','"+filename+"')");
    if(vSQL.status=="unsuccess")
    {
      execSQL("delete from iwz_email_attachments where msg_refno='"+vObj.msg_refno+"'");
      return {"status":"unsuccess","msg":"","error":vSQL.error};
    }
    response=setBlobData("iwz_email_attachments","attachment",files[i]," and msg_refno='"+vObj.msg_refno+"' and srno='A"+i+"'");
    response=eval('('+response+')');
    if(response.status=="unsuccess")  
    {
      execSQL("delete from iwz_email_attachments where msg_refno='"+vObj.msg_refno+"'");
      return {"status":"unsuccess","msg":"","error":response.error};
    }
    
    if(vObj.deleteFile)
    {
      removeFile(files[i]);
      removeFolder(files[i].substring(0,files[i].lastIndexOf("/")));
    }
  }
  return {"status":"success","msg":"","error":"Attachments saved successfully."};  
}



/*function validateWebTicket( webticket )
{
   if( !webticket )	
		return {"status":"unsuccess","error":"Invalid web ticket","msg":"","userObj":""};
	
   var sid = webticket;
   if ("".equalsIgnoreCase(sid) || "null".equalsIgnoreCase(sid)) 
		return {"status":"unsuccess","error":"Invalid web ticket","msg":"","userObj":""};
    
  
   var vSQL=" SELECT (timeinterval-diff) timediff ,u.* ";
   vSQL=vSQL+" FROM ";
   vSQL=vSQL+" ( ";
   vSQL=vSQL+"   select Round(To_Number((SYSDATE - lastconnectedtime) * 24 * 60)) as diff ";
   vSQL=vSQL+"   ,decode((SELECT Count(*) FROM iwz_parameter WHERE paramname='timeout_interval'),0,60,(SELECT paramvalue FROM iwz_parameter WHERE paramname='timeout_interval')) timeinterval ";
   vSQL=vSQL+"   ,u.loginid USER_ID,u.username USER_NAME,u.cl_branch_code branch_code,u.profileid PROFILE_ID,u.cl_user_short_code user_short_code,u.cl_web_ticket ";
   vSQL=vSQL+"   ,u.cl_location location ";
   vSQL=vSQL+"   ,u.cl_counter COUNTER,u.cl_reports_to reports_to,u.cl_entity_code ENTITY_CODE,u.cl_isadmin isadmin  ";
   vSQL=vSQL+"   from userlist u "; 
   vSQL=vSQL+"   where cl_web_ticket ='"+ _encode( sid ) +"'  ";
   vSQL=vSQL+"   and active='T' ";
   vSQL=vSQL+" ) u ";
    
  vSQL = SQLResultset( vSQL ) ;
  if ( vSQL.recordcount ==0 )
  {
    return {"status":"unsuccess","error":"No data found for the web ticket.Invalid web ticket","msg":"","userObj":""};
  } 
  if(vSQL.fieldbyname("timediff")<=0)
  {

    var vSQL="update iwz_user_master set sessionid='',LAST_LOGIN_TIME='',LAST_ACCESSTIME=sysdate,login_flag='N',LASTLOGINIP='' where sessionid="+_encode(sid)+"";
    vSQL=execSQL(vSQL);
  	return {"status":"unsuccess","error":"Invalid web ticket","msg":"","userObj":""};
  }
  	
  for(var i = 0 ; i < vSQL.fields.length ;  i++)
  {
  	userObj[vSQL.fields[i]]=vSQL.fieldbyname(vSQL.fields[i]);			
  }
  userObj.sessionid=sid;
  userObj.profileid =vSQL.fieldbyname("profile_id");
  userObj.userid=  vSQL.fieldbyname("user_id");
  userObj.branchcode=vSQL.fieldbyname("branch_code");

  var vRoleSQL="SELECT um.roleid ,rm.visibility,rm.rolename FROM iwz_user_role_master um,iwz_role_master rm WHERE user_id='"+_encode(userObj.userid)+"' AND  um.roleid=rm.roleid"
  vRoleSQL=SQLResultset(vRoleSQL);
  for(var k = 0 ; k < vRoleSQL.recordcount; k++)
  {
  vRoleSQL.recordno = k;
    userObj['roles'][userObj['roles'].length]={role:vRoleSQL.fieldbyname('roleid'),rolename:vRoleSQL.fieldbyname('rolename'),visibility:vRoleSQL.fieldbyname('visibility')};
  }
  vSQL =null;
  
 	var vSql="update iwz_user_master set last_accesstime=sysdate where sessionid='"+_encode(sid)+"'";
 	var res=execSQL(vSql); 
	return {"status":"success","error":"","msg":"Valid webticket","userObj":userObj};
}*/

function execCustomAction(paramdata,_ign_client_prc_con,scr_ref,action)
{
try
	{
	log.info("************executing " + action + "*********************");
	var obj={}
	obj.paramdata = paramdata;
	obj._ignore_prc_con = (_ign_client_prc_con||'n');
	obj.scr_ref = scr_ref;
	obj.action = action;
	var valArr = iwebz.execProcessValidation(obj);
	var valArr_str = JSON.stringify(valArr)
	log.info("************execution ends " + action + " o/p : " + valArr_str);
	return { return_str : valArr_str, return_obj : valArr } ;
	}
catch(err)
	{
	log.info("Error while executing action " + scr_ref + "" + err.stack);
	return {"status":"unsuccess","msg":"","error":err.message};
	}
}

iwebz.callWebServiceV1=function(vObj)
{
  appendFileText(serverPath+"/log/Append.txt","\n omg its not workign ");
  var JsonObj ={},resp;
  var status={}
  var xmldata=""
  var wsSeq=getWebServiceSeq();
  var auth_flag=false;
  ws.log("\n\nWeb Service Request : "+wsSeq+"\nRequest Message : "+vObj.postMessage+"\nEvent :"+vObj.eventtype,vObj.label);
  var sslurl=getParameter('WP-WEBSERVICE-URL');  
  ws.log("\n\nsslurl "+sslurl);
//   if(vObj.auth)
//   	auth_flag=true;
  ws.log("\n\niwebz.secured "+iwebz.secured);	  	
  ws.log("\n\niwebz.auth_flag "+iwebz.auth_flag);	 
  var resp=iwebz.getJavaClassObject("webServiceClient");
  if(resp.status=="unsuccess")
    return {"status":"unsuccess","msg":"","error":"Error while retriving java refrence."};
  
  var webServiceClient=resp.classRef
  
     	
	if(!iwebz.secured)
	{
		ws.log("\n\nin if");	  	
		xmldata = webServiceClient.subscribeHTTP(vObj.postMessage,vObj.eventtype,sslurl);    	
	}
  	else
  	{
	  	if(!iwebz.auth_flag)
  			xmldata = webServiceClient.subscribe(vObj.postMessage,vObj.eventtype,sslurl);
  		else
  			xmldata = webServiceClient.sslWebServiceCall(vObj.postMessage,sslurl);	
	}
    	
  ws.log("\nWeb Service Response : "+wsSeq+"\nResponse Msg : "+xmldata,vObj.label);
  if(xmldata=="")
    return {"status":"unsuccess","msg":"","error":"No data found12121"};
 	
  xmldata = webServiceClient.XMLtoJSON(xmldata);
  try
  {
    JsonObj =eval('('+xmldata+')');
    return {"status":"success","msg":"","error":"","jsonobj":JsonObj};
  }
  catch(error)
  {
    ws.log("\nWeb Service Exception : "+wsSeq+"\nError : "+error,vObj.label);  
    return {"status":"unsuccess","msg":"","error":"Exception occurred."}; 
  }  
}
ws.log=function(m,f)
{
  var f=f||"Web Service";
  if(!m) return;
  appendFileText(serverPath+"/log/"+f+"-"+getServerDate()+".txt","\n"+getMiliseconds()+" : "+m);  
}


iwebz.getJavaClassObject=function(Objname)
{
  var Obj;
  if(javaObj[Objname])
    return {"status":"success","msg":"","error":"","classRef":javaObj[Objname]};
  else
  {
    try
    {
      Obj=eval("iwebz.get"+Objname+"Obj()");
      javaObj[Objname]=Obj;
      return {"status":"success","msg":"","error":"","classRef":Obj};
    }
    catch(error)
    {
      return {"status":"unsuccess","msg":"","error":"Error while retriveing the class object"};
    }
  }  
}


iwebz.getwebServiceClientObj=function()
{
  var _CredAPWClient =Java.type('custom.classes.CredAPWClient');
  webServiceClient = new _CredAPWClient("");
  return webServiceClient;
}